
F401CCU6_USBHost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007300  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aac  08007aac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab4  08007ab4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000090  08007b4c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08007b4c  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146fc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ea  00000000  00000000  000347bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a12  00000000  00000000  00039800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a59  00000000  00000000  00052212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c081  00000000  00000000  00066c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000f2d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800747c 	.word	0x0800747c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	0800747c 	.word	0x0800747c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <OLED_SPI_Init>:
#define OLED_W_DC(x)		HAL_GPIO_WritePin(LED_DC_GPIO_Port, LED_DC_Pin, (GPIO_PinState)(x))
#define OLED_W_CS(x)		HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_SPI_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	OLED_W_D0(1);
 80004dc:	2201      	movs	r2, #1
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004e2:	f000 ff59 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_D1(1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004ec:	f000 ff54 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_RES(1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004f6:	f000 ff4f 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <OLED_SPI_Init+0x3c>)
 8000500:	f000 ff4a 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_CS(1);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <OLED_SPI_Init+0x3c>)
 800050a:	f000 ff45 	bl	8001398 <HAL_GPIO_WritePin>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000

08000518 <OLED_SPI_SendByte>:
  * @brief  SPI发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_SPI_SendByte(uint8_t Byte)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	e01b      	b.n	8000560 <OLED_SPI_SendByte+0x48>
	{
		OLED_W_D0(0);
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <OLED_SPI_SendByte+0x58>)
 800052e:	f000 ff33 	bl	8001398 <HAL_GPIO_WritePin>
		OLED_W_D1(Byte & (0x80 >> i));
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	fa42 f303 	asr.w	r3, r2, r3
 800053a:	b25a      	sxtb	r2, r3
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	4013      	ands	r3, r2
 8000542:	b25b      	sxtb	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <OLED_SPI_SendByte+0x58>)
 800054c:	f000 ff24 	bl	8001398 <HAL_GPIO_WritePin>
		OLED_W_D0(1);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <OLED_SPI_SendByte+0x58>)
 8000556:	f000 ff1f 	bl	8001398 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	3301      	adds	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b07      	cmp	r3, #7
 8000564:	d9e0      	bls.n	8000528 <OLED_SPI_SendByte+0x10>
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020000 	.word	0x40020000

08000574 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <OLED_WriteCommand+0x38>)
 8000584:	f000 ff08 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_DC(0);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <OLED_WriteCommand+0x38>)
 800058e:	f000 ff03 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Command);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffbf 	bl	8000518 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 800059a:	2201      	movs	r2, #1
 800059c:	2108      	movs	r1, #8
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <OLED_WriteCommand+0x38>)
 80005a0:	f000 fefa 	bl	8001398 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020000 	.word	0x40020000

080005b0 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <OLED_WriteData+0x38>)
 80005c0:	f000 feea 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <OLED_WriteData+0x38>)
 80005ca:	f000 fee5 	bl	8001398 <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Data);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffa1 	bl	8000518 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2108      	movs	r1, #8
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <OLED_WriteData+0x38>)
 80005dc:	f000 fedc 	bl	8001398 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020000 	.word	0x40020000

080005ec <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffb5 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f043 0310 	orr.w	r3, r3, #16
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffac 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffa5 	bl	8000574 <OLED_WriteCommand>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000638:	2300      	movs	r3, #0
 800063a:	71bb      	strb	r3, [r7, #6]
 800063c:	e014      	b.n	8000668 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffd2 	bl	80005ec <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	e005      	b.n	800065a <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ffae 	bl	80005b0 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	3301      	adds	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	daf5      	bge.n	800064e <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3301      	adds	r3, #1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b07      	cmp	r3, #7
 800066c:	d9e7      	bls.n	800063e <OLED_Clear+0xc>
		}
	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	460b      	mov	r3, r1
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	3b01      	subs	r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	3b01      	subs	r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	4610      	mov	r0, r2
 80006a2:	f7ff ffa3 	bl	80005ec <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e00e      	b.n	80006ca <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	f1a3 0220 	sub.w	r2, r3, #32
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	491c      	ldr	r1, [pc, #112]	; (8000728 <OLED_ShowChar+0xb0>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff76 	bl	80005b0 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d9ed      	bls.n	80006ac <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3301      	adds	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	4610      	mov	r0, r2
 80006ec:	f7ff ff7e 	bl	80005ec <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e00f      	b.n	8000716 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	f1a3 0220 	sub.w	r2, r3, #32
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	3308      	adds	r3, #8
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <OLED_ShowChar+0xb0>)
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	440a      	add	r2, r1
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff50 	bl	80005b0 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3301      	adds	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d9ec      	bls.n	80006f6 <OLED_ShowChar+0x7e>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	080074a4 	.word	0x080074a4

0800072c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	603a      	str	r2, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	460b      	mov	r3, r1
 800073a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e00e      	b.n	8000760 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	4413      	add	r3, r2
 8000748:	b2d9      	uxtb	r1, r3
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8f 	bl	8000678 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3301      	adds	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ea      	bne.n	8000742 <OLED_ShowString+0x16>
	}
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	e00c      	b.n	800079c <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e002      	b.n	800078e <OLED_Init+0x18>
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	d3f8      	bcc.n	8000788 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007a2:	d3ee      	bcc.n	8000782 <OLED_Init+0xc>
	}
	
	OLED_SPI_Init();			//端口初始化
 80007a4:	f7ff fe98 	bl	80004d8 <OLED_SPI_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80007a8:	20ae      	movs	r0, #174	; 0xae
 80007aa:	f7ff fee3 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80007ae:	20d5      	movs	r0, #213	; 0xd5
 80007b0:	f7ff fee0 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	f7ff fedd 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80007ba:	20a8      	movs	r0, #168	; 0xa8
 80007bc:	f7ff feda 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80007c0:	203f      	movs	r0, #63	; 0x3f
 80007c2:	f7ff fed7 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80007c6:	20d3      	movs	r0, #211	; 0xd3
 80007c8:	f7ff fed4 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fed1 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80007d2:	2040      	movs	r0, #64	; 0x40
 80007d4:	f7ff fece 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80007d8:	20a1      	movs	r0, #161	; 0xa1
 80007da:	f7ff fecb 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80007de:	20c8      	movs	r0, #200	; 0xc8
 80007e0:	f7ff fec8 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80007e4:	20da      	movs	r0, #218	; 0xda
 80007e6:	f7ff fec5 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80007ea:	2012      	movs	r0, #18
 80007ec:	f7ff fec2 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 80007f0:	2081      	movs	r0, #129	; 0x81
 80007f2:	f7ff febf 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 80007f6:	20cf      	movs	r0, #207	; 0xcf
 80007f8:	f7ff febc 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 80007fc:	20d9      	movs	r0, #217	; 0xd9
 80007fe:	f7ff feb9 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000802:	20f1      	movs	r0, #241	; 0xf1
 8000804:	f7ff feb6 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000808:	20db      	movs	r0, #219	; 0xdb
 800080a:	f7ff feb3 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	f7ff feb0 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000814:	20a4      	movs	r0, #164	; 0xa4
 8000816:	f7ff fead 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800081a:	20a6      	movs	r0, #166	; 0xa6
 800081c:	f7ff feaa 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000820:	208d      	movs	r0, #141	; 0x8d
 8000822:	f7ff fea7 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000826:	2014      	movs	r0, #20
 8000828:	f7ff fea4 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800082c:	20af      	movs	r0, #175	; 0xaf
 800082e:	f7ff fea1 	bl	8000574 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8000832:	f7ff fefe 	bl	8000632 <OLED_Clear>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fa60 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f814 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8c0 	bl	80009d0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000850:	f000 f87e 	bl	8000950 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000854:	f000 f890 	bl	8000978 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000858:	f006 f9ee 	bl	8006c38 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800085c:	f7ff ff8b 	bl	8000776 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	OLED_ShowString(1,1,"InitComp");
 8000860:	4a03      	ldr	r2, [pc, #12]	; (8000870 <main+0x30>)
 8000862:	2101      	movs	r1, #1
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ff61 	bl	800072c <OLED_ShowString>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800086a:	f006 fa0b 	bl	8006c84 <MX_USB_HOST_Process>
	OLED_ShowString(1,1,"InitComp");
 800086e:	e7f7      	b.n	8000860 <main+0x20>
 8000870:	08007494 	.word	0x08007494

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 fcf4 	bl	8007270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <SystemClock_Config+0xd4>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <SystemClock_Config+0xd4>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <SystemClock_Config+0xd8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <SystemClock_Config+0xd8>)
 80008c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <SystemClock_Config+0xd8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008f0:	230f      	movs	r3, #15
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008fc:	2305      	movs	r3, #5
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f96b 	bl	8002be0 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000910:	f000 f8bc 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fbce 	bl	80030d0 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800093a:	f000 f8a7 	bl	8000a8c <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_CRC_Init+0x20>)
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <MX_CRC_Init+0x24>)
 8000958:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_CRC_Init+0x20>)
 800095c:	f000 fb7b 	bl	8001056 <HAL_CRC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000966:	f000 f891 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000ac 	.word	0x200000ac
 8000974:	40023000 	.word	0x40023000

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 80009b4:	f002 fd6c 	bl	8003490 <HAL_MultiProcessor_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 f865 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000b4 	.word	0x200000b4
 80009cc:	40011000 	.word	0x40011000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 8000a56:	2200      	movs	r2, #0
 8000a58:	21f8      	movs	r1, #248	; 0xf8
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a5c:	f000 fc9c 	bl	8001398 <HAL_GPIO_WritePin>
                          |LED_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CS_Pin LED_DC_Pin LED_RES_Pin LED_SDA_Pin
                           LED_SCL_Pin */
  GPIO_InitStruct.Pin = LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 8000a60:	23f8      	movs	r3, #248	; 0xf8
 8000a62:	617b      	str	r3, [r7, #20]
                          |LED_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a78:	f000 fb0a 	bl	8001090 <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10d      	bne.n	8000b16 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023000 	.word	0x40023000
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f000 fa75 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8d0 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <OTG_FS_IRQHandler+0x10>)
 8000c16:	f000 fe43 	bl	80018a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000514 	.word	0x20000514

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f006 fad2 	bl	80071fc <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20010000 	.word	0x20010000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200000f8 	.word	0x200000f8
 8000c8c:	20000828 	.word	0x20000828

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd7 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 fa91 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fdab 	bl	8000840 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cf8:	08007abc 	.word	0x08007abc
  ldr r2, =_sbss
 8000cfc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d00:	20000828 	.word	0x20000828

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f94f 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff feac 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f967 	bl	800103e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f92f 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200000fc 	.word	0x200000fc

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200000fc 	.word	0x200000fc

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e00e      	b.n	8001086 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	795b      	ldrb	r3, [r3, #5]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fd35 	bl	8000ae8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e159      	b.n	8001360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8148 	bne.w	800135a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a2 	beq.w	800135a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a56      	ldr	r2, [pc, #344]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x2ec>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x202>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1fe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_GPIO_Init+0x2f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1fa>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_GPIO_Init+0x2fc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x300>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1f2>
 800127e:	2304      	movs	r3, #4
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001282:	2307      	movs	r3, #7
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2ec>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f aea2 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013cc:	b08f      	sub	sp, #60	; 0x3c
 80013ce:	af0a      	add	r7, sp, #40	; 0x28
 80013d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e054      	b.n	8001486 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f005 fc7c 	bl	8006cf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fb8e 	bl	8003b3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	687e      	ldr	r6, [r7, #4]
 8001428:	466d      	mov	r5, sp
 800142a:	f106 0410 	add.w	r4, r6, #16
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800143a:	e885 0003 	stmia.w	r5, {r0, r1}
 800143e:	1d33      	adds	r3, r6, #4
 8001440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f002 fb08 	bl	8003a58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fb85 	bl	8003b5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	687e      	ldr	r6, [r7, #4]
 800145c:	466d      	mov	r5, sp
 800145e:	f106 0410 	add.w	r4, r6, #16
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001472:	1d33      	adds	r3, r6, #4
 8001474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f002 fd0e 	bl	8003e98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800148e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800148e:	b590      	push	{r4, r7, lr}
 8001490:	b089      	sub	sp, #36	; 0x24
 8001492:	af04      	add	r7, sp, #16
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	4608      	mov	r0, r1
 8001498:	4611      	mov	r1, r2
 800149a:	461a      	mov	r2, r3
 800149c:	4603      	mov	r3, r0
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70bb      	strb	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_HCD_HC_Init+0x28>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e076      	b.n	80015a4 <HAL_HCD_HC_Init+0x116>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	333d      	adds	r3, #61	; 0x3d
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	212c      	movs	r1, #44	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	3338      	adds	r3, #56	; 0x38
 80014de:	787a      	ldrb	r2, [r7, #1]
 80014e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	212c      	movs	r1, #44	; 0x2c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3340      	adds	r3, #64	; 0x40
 80014f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	3339      	adds	r3, #57	; 0x39
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	333f      	adds	r3, #63	; 0x3f
 8001514:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001522:	b2d0      	uxtb	r0, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	212c      	movs	r1, #44	; 0x2c
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	333a      	adds	r3, #58	; 0x3a
 8001530:	4602      	mov	r2, r0
 8001532:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da09      	bge.n	8001550 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	212c      	movs	r1, #44	; 0x2c
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	333b      	adds	r3, #59	; 0x3b
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e008      	b.n	8001562 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4413      	add	r3, r2
 800155c:	333b      	adds	r3, #59	; 0x3b
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	333c      	adds	r3, #60	; 0x3c
 8001570:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001574:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	787c      	ldrb	r4, [r7, #1]
 800157c:	78ba      	ldrb	r2, [r7, #2]
 800157e:	78f9      	ldrb	r1, [r7, #3]
 8001580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4623      	mov	r3, r4
 8001592:	f002 fe07 	bl	80041a4 <USB_HC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_HCD_HC_Halt+0x1e>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e00f      	b.n	80015ea <HAL_HCD_HC_Halt+0x3e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 f857 	bl	800468e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	460b      	mov	r3, r1
 8001608:	70bb      	strb	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333b      	adds	r3, #59	; 0x3b
 800161c:	78ba      	ldrb	r2, [r7, #2]
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	333f      	adds	r3, #63	; 0x3f
 800162e:	787a      	ldrb	r2, [r7, #1]
 8001630:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001632:	7c3b      	ldrb	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d112      	bne.n	800165e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	3342      	adds	r3, #66	; 0x42
 8001646:	2203      	movs	r2, #3
 8001648:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	333d      	adds	r3, #61	; 0x3d
 8001658:	7f3a      	ldrb	r2, [r7, #28]
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e008      	b.n	8001670 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	3342      	adds	r3, #66	; 0x42
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b03      	cmp	r3, #3
 8001674:	f200 80c6 	bhi.w	8001804 <HAL_HCD_HC_SubmitRequest+0x210>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080017f1 	.word	0x080017f1
 8001688:	080016f5 	.word	0x080016f5
 800168c:	08001773 	.word	0x08001773
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 80b8 	bne.w	8001808 <HAL_HCD_HC_SubmitRequest+0x214>
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 80b4 	bne.w	8001808 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d108      	bne.n	80016b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3355      	adds	r3, #85	; 0x55
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	3355      	adds	r3, #85	; 0x55
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3342      	adds	r3, #66	; 0x42
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016de:	e093      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3342      	adds	r3, #66	; 0x42
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
      break;
 80016f2:	e089      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016f4:	78bb      	ldrb	r3, [r7, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11d      	bne.n	8001736 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3355      	adds	r3, #85	; 0x55
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3342      	adds	r3, #66	; 0x42
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001720:	e073      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3342      	adds	r3, #66	; 0x42
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
      break;
 8001734:	e069      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3354      	adds	r3, #84	; 0x54
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
      break;
 800175c:	e055      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e04b      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001772:	78bb      	ldrb	r3, [r7, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d11d      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3355      	adds	r3, #85	; 0x55
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3342      	adds	r3, #66	; 0x42
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800179e:	e034      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e02a      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3354      	adds	r3, #84	; 0x54
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
      break;
 80017da:	e016      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e00c      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e002      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001808:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3344      	adds	r3, #68	; 0x44
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	8b3a      	ldrh	r2, [r7, #24]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	202c      	movs	r0, #44	; 0x2c
 8001824:	fb00 f303 	mul.w	r3, r0, r3
 8001828:	440b      	add	r3, r1
 800182a:	334c      	adds	r3, #76	; 0x4c
 800182c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3350      	adds	r3, #80	; 0x50
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3339      	adds	r3, #57	; 0x39
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3361      	adds	r3, #97	; 0x61
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	222c      	movs	r2, #44	; 0x2c
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	3338      	adds	r3, #56	; 0x38
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	18d1      	adds	r1, r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	f002 fdaa 	bl	80043e8 <USB_HC_StartXfer>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop

080018a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 faab 	bl	8003e12 <USB_GetMode>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 80f6 	bne.w	8001ab0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fa8f 	bl	8003dec <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80ec 	beq.w	8001aae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fa86 	bl	8003dec <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ea:	d104      	bne.n	80018f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 fa76 	bl	8003dec <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d104      	bne.n	8001916 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fa66 	bl	8003dec <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800192a:	d104      	bne.n	8001936 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fa56 	bl	8003dec <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d103      	bne.n	8001952 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fa48 	bl	8003dec <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001966:	d11c      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001970:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001982:	2110      	movs	r1, #16
 8001984:	6938      	ldr	r0, [r7, #16]
 8001986:	f002 f937 	bl	8003bf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800198a:	6938      	ldr	r0, [r7, #16]
 800198c:	f002 f968 	bl	8003c60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fb3e 	bl	8004018 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f005 fa27 	bl	8006df0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fa20 	bl	8003dec <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b6:	d102      	bne.n	80019be <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f001 f89e 	bl	8002afa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fa12 	bl	8003dec <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d106      	bne.n	80019e0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f005 f9f0 	bl	8006db8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2208      	movs	r2, #8
 80019de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fa01 	bl	8003dec <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d101      	bne.n	80019f8 <HAL_HCD_IRQHandler+0x158>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_HCD_IRQHandler+0x15a>
 80019f8:	2300      	movs	r3, #0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d012      	beq.n	8001a24 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0210 	bic.w	r2, r2, #16
 8001a0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 ffa1 	bl	8002956 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0210 	orr.w	r2, r2, #16
 8001a22:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 f9df 	bl	8003dec <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a38:	d13a      	bne.n	8001ab0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fe14 	bl	800466c <USB_HC_ReadInterrupt>
 8001a44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e025      	b.n	8001a98 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a76:	d106      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8ab 	bl	8001bda <HCD_HC_IN_IRQHandler>
 8001a84:	e005      	b.n	8001a92 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fbf9 	bl	8002284 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3d4      	bcc.n	8001a4c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	e000      	b.n	8001ab0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001aae:	bf00      	nop
    }
  }
}
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_HCD_Start+0x16>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e013      	b.n	8001af4 <HAL_HCD_Start+0x3e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fb00 	bl	80040e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 f818 	bl	8003b1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_HCD_Stop+0x16>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e00d      	b.n	8001b2e <HAL_HCD_Stop+0x32>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 feee 	bl	8004900 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 faa2 	bl	800408c <USB_ResetPort>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3360      	adds	r3, #96	; 0x60
 8001b6c:	781b      	ldrb	r3, [r3, #0]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3350      	adds	r3, #80	; 0x50
 8001b94:	681b      	ldr	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fae6 	bl	8004180 <USB_GetCurrentFrame>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fac1 	bl	8004152 <USB_GetHostSpeed>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d11a      	bne.n	8001c40 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	461a      	mov	r2, r3
 8001c18:	2304      	movs	r3, #4
 8001c1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3361      	adds	r3, #97	; 0x61
 8001c2a:	2206      	movs	r2, #6
 8001c2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fd28 	bl	800468e <USB_HC_Halt>
 8001c3e:	e0af      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c56:	d11b      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	461a      	mov	r2, r3
 8001c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3361      	adds	r3, #97	; 0x61
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fd00 	bl	800468e <USB_HC_Halt>
 8001c8e:	e087      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d109      	bne.n	8001cba <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	6093      	str	r3, [r2, #8]
 8001cb8:	e072      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d11a      	bne.n	8001d06 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2308      	movs	r3, #8
 8001ce0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3361      	adds	r3, #97	; 0x61
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fcc5 	bl	800468e <USB_HC_Halt>
 8001d04:	e04c      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d11b      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3361      	adds	r3, #97	; 0x61
 8001d40:	2208      	movs	r2, #8
 8001d42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fc9d 	bl	800468e <USB_HC_Halt>
 8001d54:	e024      	b.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	d119      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3361      	adds	r3, #97	; 0x61
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fc77 	bl	800468e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db6:	d112      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fc63 	bl	800468e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dda:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ddc:	e24e      	b.n	800227c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f040 80df 	bne.w	8001fb4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3348      	adds	r3, #72	; 0x48
 8001e0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0159      	lsls	r1, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	440b      	add	r3, r1
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	202c      	movs	r0, #44	; 0x2c
 8001e28:	fb00 f303 	mul.w	r3, r0, r3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3350      	adds	r3, #80	; 0x50
 8001e30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3361      	adds	r3, #97	; 0x61
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	335c      	adds	r3, #92	; 0x5c
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	333f      	adds	r3, #63	; 0x3f
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	333f      	adds	r3, #63	; 0x3f
 8001e8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d111      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fbf7 	bl	800468e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	461a      	mov	r2, r3
 8001eae:	2310      	movs	r3, #16
 8001eb0:	6093      	str	r3, [r2, #8]
 8001eb2:	e03a      	b.n	8001f2a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	333f      	adds	r3, #63	; 0x3f
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d009      	beq.n	8001edc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	333f      	adds	r3, #63	; 0x3f
 8001ed6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d126      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	0151      	lsls	r1, r2, #5
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001efa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	b2d9      	uxtb	r1, r3
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	202c      	movs	r0, #44	; 0x2c
 8001f18:	fb00 f303 	mul.w	r3, r0, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3360      	adds	r3, #96	; 0x60
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f004 ff71 	bl	8006e0c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d12b      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3348      	adds	r3, #72	; 0x48
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	202c      	movs	r0, #44	; 0x2c
 8001f48:	fb00 f202 	mul.w	r2, r0, r2
 8001f4c:	440a      	add	r2, r1
 8001f4e:	3240      	adds	r2, #64	; 0x40
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 818e 	beq.w	800227c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3354      	adds	r3, #84	; 0x54
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f083 0301 	eor.w	r3, r3, #1
 8001f74:	b2d8      	uxtb	r0, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3354      	adds	r3, #84	; 0x54
 8001f84:	4602      	mov	r2, r0
 8001f86:	701a      	strb	r2, [r3, #0]
}
 8001f88:	e178      	b.n	800227c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3354      	adds	r3, #84	; 0x54
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2d8      	uxtb	r0, r3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3354      	adds	r3, #84	; 0x54
 8001fae:	4602      	mov	r2, r0
 8001fb0:	701a      	strb	r2, [r3, #0]
}
 8001fb2:	e163      	b.n	800227c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80f6 	bne.w	80021b8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3361      	adds	r3, #97	; 0x61
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d109      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3360      	adds	r3, #96	; 0x60
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e0c9      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3361      	adds	r3, #97	; 0x61
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d109      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3360      	adds	r3, #96	; 0x60
 8002016:	2205      	movs	r2, #5
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e0b5      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3361      	adds	r3, #97	; 0x61
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b06      	cmp	r3, #6
 800202e:	d009      	beq.n	8002044 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3361      	adds	r3, #97	; 0x61
 800203e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002040:	2b08      	cmp	r3, #8
 8002042:	d150      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	335c      	adds	r3, #92	; 0x5c
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	202c      	movs	r0, #44	; 0x2c
 800205c:	fb00 f303 	mul.w	r3, r0, r3
 8002060:	440b      	add	r3, r1
 8002062:	335c      	adds	r3, #92	; 0x5c
 8002064:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d912      	bls.n	80020a0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	335c      	adds	r3, #92	; 0x5c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	2204      	movs	r2, #4
 800209c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800209e:	e073      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020e4:	e050      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3361      	adds	r3, #97	; 0x61
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d122      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3360      	adds	r3, #96	; 0x60
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002122:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800212a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e023      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3361      	adds	r3, #97	; 0x61
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b07      	cmp	r3, #7
 8002152:	d119      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	335c      	adds	r3, #92	; 0x5c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	202c      	movs	r0, #44	; 0x2c
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	440b      	add	r3, r1
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2204      	movs	r2, #4
 8002186:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2302      	movs	r3, #2
 8002198:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	202c      	movs	r0, #44	; 0x2c
 80021a4:	fb00 f303 	mul.w	r3, r0, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3360      	adds	r3, #96	; 0x60
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 fe2b 	bl	8006e0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021b6:	e061      	b.n	800227c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d156      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333f      	adds	r3, #63	; 0x3f
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d111      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	335c      	adds	r3, #92	; 0x5c
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 fa45 	bl	800468e <USB_HC_Halt>
 8002204:	e031      	b.n	800226a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	333f      	adds	r3, #63	; 0x3f
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800222a:	2b02      	cmp	r3, #2
 800222c:	d11d      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d110      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3361      	adds	r3, #97	; 0x61
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fa12 	bl	800468e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	2310      	movs	r3, #16
 800227a:	6093      	str	r3, [r2, #8]
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11a      	bne.n	80022ea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	2304      	movs	r3, #4
 80022c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3361      	adds	r3, #97	; 0x61
 80022d4:	2206      	movs	r2, #6
 80022d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 f9d3 	bl	800468e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80022e8:	e331      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d12e      	bne.n	800235e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	2320      	movs	r3, #32
 8002310:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	333d      	adds	r3, #61	; 0x3d
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 8313 	bne.w	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333d      	adds	r3, #61	; 0x3d
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f002 f999 	bl	800468e <USB_HC_Halt>
}
 800235c:	e2f7      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d112      	bne.n	800239c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	461a      	mov	r2, r3
 8002384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002388:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f002 f97a 	bl	800468e <USB_HC_Halt>
}
 800239a:	e2d8      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d140      	bne.n	8002434 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	335c      	adds	r3, #92	; 0x5c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d111      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333d      	adds	r3, #61	; 0x3d
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2301      	movs	r3, #1
 800240e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3361      	adds	r3, #97	; 0x61
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f002 f92e 	bl	800468e <USB_HC_Halt>
}
 8002432:	e28c      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d12c      	bne.n	80024a4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3361      	adds	r3, #97	; 0x61
 8002458:	2204      	movs	r2, #4
 800245a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	333d      	adds	r3, #61	; 0x3d
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f8ff 	bl	800468e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	461a      	mov	r2, r3
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	6093      	str	r3, [r2, #8]
}
 80024a2:	e254      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11a      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	2308      	movs	r3, #8
 80024ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3361      	adds	r3, #97	; 0x61
 80024da:	2205      	movs	r2, #5
 80024dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 f8d0 	bl	800468e <USB_HC_Halt>
}
 80024ee:	e22e      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d140      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	333d      	adds	r3, #61	; 0x3d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d112      	bne.n	8002564 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	333c      	adds	r3, #60	; 0x3c
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333d      	adds	r3, #61	; 0x3d
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f002 f88d 	bl	800468e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2310      	movs	r3, #16
 8002584:	6093      	str	r3, [r2, #8]
}
 8002586:	e1e2      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d164      	bne.n	8002668 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d111      	bne.n	80025ca <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3361      	adds	r3, #97	; 0x61
 80025b4:	2206      	movs	r2, #6
 80025b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 f863 	bl	800468e <USB_HC_Halt>
 80025c8:	e044      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	202c      	movs	r0, #44	; 0x2c
 80025e2:	fb00 f303 	mul.w	r3, r0, r3
 80025e6:	440b      	add	r3, r1
 80025e8:	335c      	adds	r3, #92	; 0x5c
 80025ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d920      	bls.n	8002642 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	335c      	adds	r3, #92	; 0x5c
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3360      	adds	r3, #96	; 0x60
 8002620:	2204      	movs	r2, #4
 8002622:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	202c      	movs	r0, #44	; 0x2c
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	4413      	add	r3, r2
 8002634:	3360      	adds	r3, #96	; 0x60
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f004 fbe6 	bl	8006e0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002640:	e008      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3360      	adds	r3, #96	; 0x60
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	6093      	str	r3, [r2, #8]
}
 8002666:	e172      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d11b      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3361      	adds	r3, #97	; 0x61
 800268e:	2208      	movs	r2, #8
 8002690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fff6 	bl	800468e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	461a      	mov	r2, r3
 80026b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b4:	6093      	str	r3, [r2, #8]
}
 80026b6:	e14a      	b.n	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	f040 813f 	bne.w	800294e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3361      	adds	r3, #97	; 0x61
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d17d      	bne.n	80027e0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333f      	adds	r3, #63	; 0x3f
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d00a      	beq.n	8002720 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333f      	adds	r3, #63	; 0x3f
 8002718:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800271a:	2b03      	cmp	r3, #3
 800271c:	f040 8100 	bne.w	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d113      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3355      	adds	r3, #85	; 0x55
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3355      	adds	r3, #85	; 0x55
 800274c:	4602      	mov	r2, r0
 800274e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 80e3 	bne.w	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	334c      	adds	r3, #76	; 0x4c
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80d8 	beq.w	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	334c      	adds	r3, #76	; 0x4c
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	202c      	movs	r0, #44	; 0x2c
 8002786:	fb00 f202 	mul.w	r2, r0, r2
 800278a:	440a      	add	r2, r1
 800278c:	3240      	adds	r2, #64	; 0x40
 800278e:	8812      	ldrh	r2, [r2, #0]
 8002790:	4413      	add	r3, r2
 8002792:	3b01      	subs	r3, #1
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	202c      	movs	r0, #44	; 0x2c
 800279a:	fb00 f202 	mul.w	r2, r0, r2
 800279e:	440a      	add	r2, r1
 80027a0:	3240      	adds	r2, #64	; 0x40
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80b5 	beq.w	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3355      	adds	r3, #85	; 0x55
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2d8      	uxtb	r0, r3
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3355      	adds	r3, #85	; 0x55
 80027da:	4602      	mov	r2, r0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e09f      	b.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3361      	adds	r3, #97	; 0x61
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d109      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3360      	adds	r3, #96	; 0x60
 8002802:	2202      	movs	r2, #2
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e08b      	b.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3361      	adds	r3, #97	; 0x61
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d109      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3360      	adds	r3, #96	; 0x60
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e077      	b.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d109      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	2205      	movs	r2, #5
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e063      	b.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3361      	adds	r3, #97	; 0x61
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d009      	beq.n	8002880 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800287c:	2b08      	cmp	r3, #8
 800287e:	d14f      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	202c      	movs	r0, #44	; 0x2c
 8002898:	fb00 f303 	mul.w	r3, r0, r3
 800289c:	440b      	add	r3, r1
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d912      	bls.n	80028dc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	335c      	adds	r3, #92	; 0x5c
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	2204      	movs	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e021      	b.n	8002920 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002904:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800290c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2302      	movs	r3, #2
 8002930:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	b2d9      	uxtb	r1, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	202c      	movs	r0, #44	; 0x2c
 800293c:	fb00 f303 	mul.w	r3, r0, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f004 fa5f 	bl	8006e0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b08a      	sub	sp, #40	; 0x28
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	0c5b      	lsrs	r3, r3, #17
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d004      	beq.n	800299c <HCD_RXQLVL_IRQHandler+0x46>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b05      	cmp	r3, #5
 8002996:	f000 80a9 	beq.w	8002aec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800299a:	e0aa      	b.n	8002af2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80a6 	beq.w	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3344      	adds	r3, #68	; 0x44
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 809b 	beq.w	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3350      	adds	r3, #80	; 0x50
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	441a      	add	r2, r3
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	202c      	movs	r0, #44	; 0x2c
 80029d4:	fb00 f303 	mul.w	r3, r0, r3
 80029d8:	440b      	add	r3, r1
 80029da:	334c      	adds	r3, #76	; 0x4c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d87a      	bhi.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3344      	adds	r3, #68	; 0x44
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	b292      	uxth	r2, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f001 f99e 	bl	8003d3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3344      	adds	r3, #68	; 0x44
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	441a      	add	r2, r3
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	202c      	movs	r0, #44	; 0x2c
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	; 0x44
 8002a22:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3350      	adds	r3, #80	; 0x50
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	441a      	add	r2, r3
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	202c      	movs	r0, #44	; 0x2c
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	440b      	add	r3, r1
 8002a44:	3350      	adds	r3, #80	; 0x50
 8002a46:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	0cdb      	lsrs	r3, r3, #19
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3340      	adds	r3, #64	; 0x40
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d13c      	bne.n	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d039      	beq.n	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3354      	adds	r3, #84	; 0x54
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	f083 0301 	eor.w	r3, r3, #1
 8002ac2:	b2d8      	uxtb	r0, r3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3354      	adds	r3, #84	; 0x54
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	701a      	strb	r2, [r3, #0]
      break;
 8002ad6:	e00b      	b.n	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3360      	adds	r3, #96	; 0x60
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	701a      	strb	r2, [r3, #0]
      break;
 8002aea:	e001      	b.n	8002af0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002af0:	bf00      	nop
  }
}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d10b      	bne.n	8002b4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f004 f949 	bl	8006dd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d132      	bne.n	8002bba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d126      	bne.n	8002bb4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d113      	bne.n	8002b96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b78:	d106      	bne.n	8002b88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2102      	movs	r1, #2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fa49 	bl	8004018 <USB_InitFSLSPClkSel>
 8002b86:	e011      	b.n	8002bac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fa42 	bl	8004018 <USB_InitFSLSPClkSel>
 8002b94:	e00a      	b.n	8002bac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d106      	bne.n	8002bac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002baa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f004 f93b 	bl	8006e28 <HAL_HCD_PortEnabled_Callback>
 8002bb2:	e002      	b.n	8002bba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f004 f945 	bl	8006e44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d103      	bne.n	8002bcc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f043 0320 	orr.w	r3, r3, #32
 8002bca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe f89c 	bl	8000dd4 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe f898 	bl	8000dd4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f888 	bl	8000dd4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f884 	bl	8000dd4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe f83d 	bl	8000dd4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe f839 	bl	8000dd4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe f81c 	bl	8000dd4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe f818 	bl	8000dd4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fd fffc 	bl	8000dd4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fd fff8 	bl	8000dd4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fd ffe5 	bl	8000dd4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fd ffe1 	bl	8000dd4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd ffa1 	bl	8000dd4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fd ff9d 	bl	8000dd4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fd ff62 	bl	8000dd4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd ff5e 	bl	8000dd4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fd ff4c 	bl	8000dd4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fd ff48 	bl	8000dd4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fd ff1c 	bl	8000dd4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd ff18 	bl	8000dd4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd fef1 	bl	8000dd4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd feed 	bl	8000dd4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd feda 	bl	8000dd4 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fed6 	bl	8000dd4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fd fe08 	bl	8000dd4 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fd fe04 	bl	8000dd4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fd68 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	08007a94 	.word	0x08007a94
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b090      	sub	sp, #64	; 0x40
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032d4:	e09b      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032da:	e098      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b4d      	ldr	r3, [pc, #308]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	627a      	str	r2, [r7, #36]	; 0x24
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003304:	2100      	movs	r1, #0
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003308:	fb03 f201 	mul.w	r2, r3, r1
 800330c:	2300      	movs	r3, #0
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	4413      	add	r3, r2
 8003314:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003316:	fba0 1202 	umull	r1, r2, r0, r2
 800331a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331c:	460a      	mov	r2, r1
 800331e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003322:	4413      	add	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2200      	movs	r2, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003336:	f7fc ff4d 	bl	80001d4 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003342:	e053      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	2200      	movs	r2, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	617a      	str	r2, [r7, #20]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	4652      	mov	r2, sl
 800335c:	465b      	mov	r3, fp
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ebb2 080a 	subs.w	r8, r2, sl
 8003376:	eb63 090b 	sbc.w	r9, r3, fp
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800338e:	ebb2 0408 	subs.w	r4, r2, r8
 8003392:	eb63 0509 	sbc.w	r5, r3, r9
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	00eb      	lsls	r3, r5, #3
 80033a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a4:	00e2      	lsls	r2, r4, #3
 80033a6:	4614      	mov	r4, r2
 80033a8:	461d      	mov	r5, r3
 80033aa:	eb14 030a 	adds.w	r3, r4, sl
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	eb45 030b 	adc.w	r3, r5, fp
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	2200      	movs	r2, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	f7fc fef8 	bl	80001d4 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003410:	4618      	mov	r0, r3
 8003412:	3740      	adds	r7, #64	; 0x40
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	017d7840 	.word	0x017d7840

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	08007aa4 	.word	0x08007aa4

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800346c:	f7ff ffdc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08007aa4 	.word	0x08007aa4

08003490 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	460b      	mov	r3, r1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e05f      	b.n	8003568 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7fd fb35 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f848 	bl	8003570 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034fe:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 020f 	bic.w	r2, r2, #15
 800350e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6919      	ldr	r1, [r3, #16]
 8003516:	7afa      	ldrb	r2, [r7, #11]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800354e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b0c0      	sub	sp, #256	; 0x100
 8003576:	af00      	add	r7, sp, #0
 8003578:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	68d9      	ldr	r1, [r3, #12]
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	ea40 0301 	orr.w	r3, r0, r1
 8003598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035c8:	f021 010c 	bic.w	r1, r1, #12
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035d6:	430b      	orrs	r3, r1
 80035d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ea:	6999      	ldr	r1, [r3, #24]
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	ea40 0301 	orr.w	r3, r0, r1
 80035f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b8f      	ldr	r3, [pc, #572]	; (800383c <UART_SetConfig+0x2cc>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d005      	beq.n	8003610 <UART_SetConfig+0xa0>
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <UART_SetConfig+0x2d0>)
 800360c:	429a      	cmp	r2, r3
 800360e:	d104      	bne.n	800361a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003610:	f7ff ff2a 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8003614:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003618:	e003      	b.n	8003622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800361a:	f7ff ff11 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 800361e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	f040 810c 	bne.w	8003848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800363a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800363e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003642:	4622      	mov	r2, r4
 8003644:	462b      	mov	r3, r5
 8003646:	1891      	adds	r1, r2, r2
 8003648:	65b9      	str	r1, [r7, #88]	; 0x58
 800364a:	415b      	adcs	r3, r3
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800364e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003652:	4621      	mov	r1, r4
 8003654:	eb12 0801 	adds.w	r8, r2, r1
 8003658:	4629      	mov	r1, r5
 800365a:	eb43 0901 	adc.w	r9, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003672:	4690      	mov	r8, r2
 8003674:	4699      	mov	r9, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb18 0303 	adds.w	r3, r8, r3
 800367c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003680:	462b      	mov	r3, r5
 8003682:	eb49 0303 	adc.w	r3, r9, r3
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003696:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800369a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800369e:	460b      	mov	r3, r1
 80036a0:	18db      	adds	r3, r3, r3
 80036a2:	653b      	str	r3, [r7, #80]	; 0x50
 80036a4:	4613      	mov	r3, r2
 80036a6:	eb42 0303 	adc.w	r3, r2, r3
 80036aa:	657b      	str	r3, [r7, #84]	; 0x54
 80036ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036b4:	f7fc fd8e 	bl	80001d4 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <UART_SetConfig+0x2d4>)
 80036be:	fba3 2302 	umull	r2, r3, r3, r2
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	011c      	lsls	r4, r3, #4
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	1891      	adds	r1, r2, r2
 80036de:	64b9      	str	r1, [r7, #72]	; 0x48
 80036e0:	415b      	adcs	r3, r3
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036e8:	4641      	mov	r1, r8
 80036ea:	eb12 0a01 	adds.w	sl, r2, r1
 80036ee:	4649      	mov	r1, r9
 80036f0:	eb43 0b01 	adc.w	fp, r3, r1
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003708:	4692      	mov	sl, r2
 800370a:	469b      	mov	fp, r3
 800370c:	4643      	mov	r3, r8
 800370e:	eb1a 0303 	adds.w	r3, sl, r3
 8003712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003716:	464b      	mov	r3, r9
 8003718:	eb4b 0303 	adc.w	r3, fp, r3
 800371c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800372c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003734:	460b      	mov	r3, r1
 8003736:	18db      	adds	r3, r3, r3
 8003738:	643b      	str	r3, [r7, #64]	; 0x40
 800373a:	4613      	mov	r3, r2
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
 8003742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800374a:	f7fc fd43 	bl	80001d4 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4611      	mov	r1, r2
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <UART_SetConfig+0x2d4>)
 8003756:	fba3 2301 	umull	r2, r3, r3, r1
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2264      	movs	r2, #100	; 0x64
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	1acb      	subs	r3, r1, r3
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <UART_SetConfig+0x2d4>)
 800376c:	fba3 2302 	umull	r2, r3, r3, r2
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003778:	441c      	add	r4, r3
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003784:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	63b9      	str	r1, [r7, #56]	; 0x38
 8003794:	415b      	adcs	r3, r3
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800379c:	4641      	mov	r1, r8
 800379e:	1851      	adds	r1, r2, r1
 80037a0:	6339      	str	r1, [r7, #48]	; 0x30
 80037a2:	4649      	mov	r1, r9
 80037a4:	414b      	adcs	r3, r1
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037b4:	4659      	mov	r1, fp
 80037b6:	00cb      	lsls	r3, r1, #3
 80037b8:	4651      	mov	r1, sl
 80037ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037be:	4651      	mov	r1, sl
 80037c0:	00ca      	lsls	r2, r1, #3
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	4642      	mov	r2, r8
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d0:	464b      	mov	r3, r9
 80037d2:	460a      	mov	r2, r1
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037f0:	460b      	mov	r3, r1
 80037f2:	18db      	adds	r3, r3, r3
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	4613      	mov	r3, r2
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003806:	f7fc fce5 	bl	80001d4 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <UART_SetConfig+0x2d4>)
 8003810:	fba3 1302 	umull	r1, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2164      	movs	r1, #100	; 0x64
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <UART_SetConfig+0x2d4>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 0207 	and.w	r2, r3, #7
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4422      	add	r2, r4
 8003836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003838:	e105      	b.n	8003a46 <UART_SetConfig+0x4d6>
 800383a:	bf00      	nop
 800383c:	40011000 	.word	0x40011000
 8003840:	40011400 	.word	0x40011400
 8003844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384c:	2200      	movs	r2, #0
 800384e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003852:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800385a:	4642      	mov	r2, r8
 800385c:	464b      	mov	r3, r9
 800385e:	1891      	adds	r1, r2, r2
 8003860:	6239      	str	r1, [r7, #32]
 8003862:	415b      	adcs	r3, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800386a:	4641      	mov	r1, r8
 800386c:	1854      	adds	r4, r2, r1
 800386e:	4649      	mov	r1, r9
 8003870:	eb43 0501 	adc.w	r5, r3, r1
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	00eb      	lsls	r3, r5, #3
 800387e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003882:	00e2      	lsls	r2, r4, #3
 8003884:	4614      	mov	r4, r2
 8003886:	461d      	mov	r5, r3
 8003888:	4643      	mov	r3, r8
 800388a:	18e3      	adds	r3, r4, r3
 800388c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003890:	464b      	mov	r3, r9
 8003892:	eb45 0303 	adc.w	r3, r5, r3
 8003896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038b6:	4629      	mov	r1, r5
 80038b8:	008b      	lsls	r3, r1, #2
 80038ba:	4621      	mov	r1, r4
 80038bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c0:	4621      	mov	r1, r4
 80038c2:	008a      	lsls	r2, r1, #2
 80038c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038c8:	f7fc fc84 	bl	80001d4 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b60      	ldr	r3, [pc, #384]	; (8003a54 <UART_SetConfig+0x4e4>)
 80038d2:	fba3 2302 	umull	r2, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	011c      	lsls	r4, r3, #4
 80038da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038ec:	4642      	mov	r2, r8
 80038ee:	464b      	mov	r3, r9
 80038f0:	1891      	adds	r1, r2, r2
 80038f2:	61b9      	str	r1, [r7, #24]
 80038f4:	415b      	adcs	r3, r3
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fc:	4641      	mov	r1, r8
 80038fe:	1851      	adds	r1, r2, r1
 8003900:	6139      	str	r1, [r7, #16]
 8003902:	4649      	mov	r1, r9
 8003904:	414b      	adcs	r3, r1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003914:	4659      	mov	r1, fp
 8003916:	00cb      	lsls	r3, r1, #3
 8003918:	4651      	mov	r1, sl
 800391a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391e:	4651      	mov	r1, sl
 8003920:	00ca      	lsls	r2, r1, #3
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	4603      	mov	r3, r0
 8003928:	4642      	mov	r2, r8
 800392a:	189b      	adds	r3, r3, r2
 800392c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003930:	464b      	mov	r3, r9
 8003932:	460a      	mov	r2, r1
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	67bb      	str	r3, [r7, #120]	; 0x78
 8003946:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003954:	4649      	mov	r1, r9
 8003956:	008b      	lsls	r3, r1, #2
 8003958:	4641      	mov	r1, r8
 800395a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395e:	4641      	mov	r1, r8
 8003960:	008a      	lsls	r2, r1, #2
 8003962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003966:	f7fc fc35 	bl	80001d4 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <UART_SetConfig+0x4e4>)
 8003970:	fba3 1302 	umull	r1, r3, r3, r2
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2164      	movs	r1, #100	; 0x64
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	3332      	adds	r3, #50	; 0x32
 8003982:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <UART_SetConfig+0x4e4>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398e:	441c      	add	r4, r3
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	2200      	movs	r2, #0
 8003996:	673b      	str	r3, [r7, #112]	; 0x70
 8003998:	677a      	str	r2, [r7, #116]	; 0x74
 800399a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800399e:	4642      	mov	r2, r8
 80039a0:	464b      	mov	r3, r9
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	415b      	adcs	r3, r3
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ae:	4641      	mov	r1, r8
 80039b0:	1851      	adds	r1, r2, r1
 80039b2:	6039      	str	r1, [r7, #0]
 80039b4:	4649      	mov	r1, r9
 80039b6:	414b      	adcs	r3, r1
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039c6:	4659      	mov	r1, fp
 80039c8:	00cb      	lsls	r3, r1, #3
 80039ca:	4651      	mov	r1, sl
 80039cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d0:	4651      	mov	r1, sl
 80039d2:	00ca      	lsls	r2, r1, #3
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	4642      	mov	r2, r8
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	663b      	str	r3, [r7, #96]	; 0x60
 80039f4:	667a      	str	r2, [r7, #100]	; 0x64
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a02:	4649      	mov	r1, r9
 8003a04:	008b      	lsls	r3, r1, #2
 8003a06:	4641      	mov	r1, r8
 8003a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	008a      	lsls	r2, r1, #2
 8003a10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a14:	f7fc fbde 	bl	80001d4 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <UART_SetConfig+0x4e4>)
 8003a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	; 0x32
 8003a30:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <UART_SetConfig+0x4e4>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4422      	add	r2, r4
 8003a44:	609a      	str	r2, [r3, #8]
}
 8003a46:	bf00      	nop
 8003a48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a52:	bf00      	nop
 8003a54:	51eb851f 	.word	0x51eb851f

08003a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a58:	b084      	sub	sp, #16
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	f107 001c 	add.w	r0, r7, #28
 8003a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d122      	bne.n	8003ab6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9c0 	bl	8003e30 <USB_CoreReset>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e01a      	b.n	8003aec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9b4 	bl	8003e30 <USB_CoreReset>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ade:	e005      	b.n	8003aec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10b      	bne.n	8003b0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f043 0206 	orr.w	r2, r3, #6
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b16:	b004      	add	sp, #16
 8003b18:	4770      	bx	lr

08003b1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 0201 	bic.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d115      	bne.n	8003bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fd f92d 	bl	8000dec <HAL_Delay>
      ms++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f93a 	bl	8003e12 <USB_GetMode>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d01e      	beq.n	8003be2 <USB_SetCurrentMode+0x84>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b31      	cmp	r3, #49	; 0x31
 8003ba8:	d9f0      	bls.n	8003b8c <USB_SetCurrentMode+0x2e>
 8003baa:	e01a      	b.n	8003be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d115      	bne.n	8003bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f7fd f914 	bl	8000dec <HAL_Delay>
      ms++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f921 	bl	8003e12 <USB_GetMode>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <USB_SetCurrentMode+0x84>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b31      	cmp	r3, #49	; 0x31
 8003bda:	d9f0      	bls.n	8003bbe <USB_SetCurrentMode+0x60>
 8003bdc:	e001      	b.n	8003be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e005      	b.n	8003bee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b32      	cmp	r3, #50	; 0x32
 8003be6:	d101      	bne.n	8003bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <USB_FlushTxFifo+0x64>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e01b      	b.n	8003c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	daf2      	bge.n	8003c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	019b      	lsls	r3, r3, #6
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <USB_FlushTxFifo+0x64>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e006      	b.n	8003c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d0f0      	beq.n	8003c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	00030d40 	.word	0x00030d40

08003c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <USB_FlushRxFifo+0x5c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e018      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	daf2      	bge.n	8003c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <USB_FlushRxFifo+0x5c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e006      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d0f0      	beq.n	8003c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	00030d40 	.word	0x00030d40

08003cc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	460b      	mov	r3, r1
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d123      	bne.n	8003d2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ce6:	88bb      	ldrh	r3, [r7, #4]
 8003ce8:	3303      	adds	r3, #3
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e018      	b.n	8003d26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	031a      	lsls	r2, r3, #12
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d00:	461a      	mov	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3e2      	bcc.n	8003cf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3724      	adds	r7, #36	; 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	e014      	b.n	8003d92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	3301      	adds	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	3301      	adds	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	3301      	adds	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3a      	ldr	r2, [r7, #32]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3e6      	bcc.n	8003d68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d9a:	8bfb      	ldrh	r3, [r7, #30]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01e      	beq.n	8003dde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	461a      	mov	r2, r3
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	701a      	strb	r2, [r3, #0]
      i++;
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	623b      	str	r3, [r7, #32]
      pDest++;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003dd2:	8bfb      	ldrh	r3, [r7, #30]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ea      	bne.n	8003db4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	372c      	adds	r7, #44	; 0x2c
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <USB_CoreReset+0x64>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e01b      	b.n	8003e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	daf2      	bge.n	8003e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <USB_CoreReset+0x64>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e006      	b.n	8003e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d0f0      	beq.n	8003e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	00030d40 	.word	0x00030d40

08003e98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e98:	b084      	sub	sp, #16
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10a      	bne.n	8003f0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e014      	b.n	8003f34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e009      	b.n	8003f34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f34:	2110      	movs	r1, #16
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe5e 	bl	8003bf8 <USB_FlushTxFifo>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fe8a 	bl	8003c60 <USB_FlushRxFifo>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e015      	b.n	8003f88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d3e5      	bcc.n	8003f5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <USB_HostInit+0x16c>)
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <USB_HostInit+0x170>)
 8003fbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003fc0:	e009      	b.n	8003fd6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <USB_HostInit+0x174>)
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <USB_HostInit+0x178>)
 8003fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f043 0210 	orr.w	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <USB_HostInit+0x17c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004000:	b004      	add	sp, #16
 8004002:	4770      	bx	lr
 8004004:	01000200 	.word	0x01000200
 8004008:	00e00300 	.word	0x00e00300
 800400c:	00600080 	.word	0x00600080
 8004010:	004000e0 	.word	0x004000e0
 8004014:	a3200008 	.word	0xa3200008

08004018 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004060:	461a      	mov	r2, r3
 8004062:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004066:	6053      	str	r3, [r2, #4]
 8004068:	e009      	b.n	800407e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d106      	bne.n	800407e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	461a      	mov	r2, r3
 8004078:	f241 7370 	movw	r3, #6000	; 0x1770
 800407c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	f7fc fe95 	bl	8000dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80040d0:	200a      	movs	r0, #10
 80040d2:	f7fc fe8b 	bl	8000dec <HAL_Delay>

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004104:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <USB_DriveVbus+0x44>
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d106      	bne.n	8004124 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800411e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004122:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d109      	bne.n	8004144 <USB_DriveVbus+0x64>
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800413e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004142:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	0c5b      	lsrs	r3, r3, #17
 8004170:	f003 0303 	and.w	r3, r3, #3
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	b29b      	uxth	r3, r3
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	70fb      	strb	r3, [r7, #3]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70bb      	strb	r3, [r7, #2]
 80041ba:	4613      	mov	r3, r2
 80041bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80041da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d87e      	bhi.n	80042e0 <USB_HC_Init+0x13c>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <USB_HC_Init+0x44>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	080042a3 	.word	0x080042a3
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	08004265 	.word	0x08004265
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	461a      	mov	r2, r3
 8004206:	f240 439d 	movw	r3, #1181	; 0x49d
 800420a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800420c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da10      	bge.n	8004236 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	440a      	add	r2, r1
 800422a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004234:	e057      	b.n	80042e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d051      	beq.n	80042e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	440a      	add	r2, r1
 8004258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800425c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004260:	60d3      	str	r3, [r2, #12]
      break;
 8004262:	e040      	b.n	80042e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	f240 639d 	movw	r3, #1693	; 0x69d
 8004276:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004278:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800427c:	2b00      	cmp	r3, #0
 800427e:	da34      	bge.n	80042ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	440a      	add	r2, r1
 8004296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80042a0:	e023      	b.n	80042ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	461a      	mov	r2, r3
 80042b0:	f240 2325 	movw	r3, #549	; 0x225
 80042b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da17      	bge.n	80042ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80042dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80042de:	e006      	b.n	80042ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]
      break;
 80042e4:	e004      	b.n	80042f0 <USB_HC_Init+0x14c>
      break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <USB_HC_Init+0x14c>
      break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <USB_HC_Init+0x14c>
      break;
 80042ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	440a      	add	r2, r1
 8004306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800432a:	4313      	orrs	r3, r2
 800432c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800433a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da03      	bge.n	800434a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e001      	b.n	800434e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff feff 	bl	8004152 <USB_GetHostSpeed>
 8004354:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004356:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800435a:	2b02      	cmp	r3, #2
 800435c:	d106      	bne.n	800436c <USB_HC_Init+0x1c8>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d003      	beq.n	800436c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e001      	b.n	8004370 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	059b      	lsls	r3, r3, #22
 8004374:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	02db      	lsls	r3, r3, #11
 800437c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004380:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004382:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004386:	049b      	lsls	r3, r3, #18
 8004388:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800438c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800438e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004390:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004394:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	0159      	lsls	r1, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	440b      	add	r3, r1
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80043ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d003      	beq.n	80043be <USB_HC_Init+0x21a>
 80043b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10f      	bne.n	80043de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80043de:	7ffb      	ldrb	r3, [r7, #31]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004404:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02d      	beq.n	800446e <USB_HC_StartXfer+0x86>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	791b      	ldrb	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d129      	bne.n	800446e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d117      	bne.n	8004450 <USB_HC_StartXfer+0x68>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	79db      	ldrb	r3, [r3, #7]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <USB_HC_StartXfer+0x48>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	79db      	ldrb	r3, [r3, #7]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d10f      	bne.n	8004450 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	440a      	add	r2, r1
 8004446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <USB_HC_StartXfer+0x86>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	795b      	ldrb	r3, [r3, #5]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fa0f 	bl	8004888 <USB_DoPing>
      return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e0f8      	b.n	8004660 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d018      	beq.n	80044a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	8912      	ldrh	r2, [r2, #8]
 800447e:	4413      	add	r3, r2
 8004480:	3b01      	subs	r3, #1
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	8912      	ldrh	r2, [r2, #8]
 8004486:	fbb3 f3f2 	udiv	r3, r3, r2
 800448a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800448c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	429a      	cmp	r2, r3
 8004492:	d90b      	bls.n	80044ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004494:	8b7b      	ldrh	r3, [r7, #26]
 8004496:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	8912      	ldrh	r2, [r2, #8]
 800449e:	fb03 f202 	mul.w	r2, r3, r2
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	611a      	str	r2, [r3, #16]
 80044a6:	e001      	b.n	80044ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	78db      	ldrb	r3, [r3, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80044b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	8912      	ldrh	r2, [r2, #8]
 80044ba:	fb03 f202 	mul.w	r2, r3, r2
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	e003      	b.n	80044cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044d6:	04d9      	lsls	r1, r3, #19
 80044d8:	4b63      	ldr	r3, [pc, #396]	; (8004668 <USB_HC_StartXfer+0x280>)
 80044da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	7a9b      	ldrb	r3, [r3, #10]
 80044e2:	075b      	lsls	r3, r3, #29
 80044e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	0148      	lsls	r0, r1, #5
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	4401      	add	r1, r0
 80044f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450e:	460a      	mov	r2, r1
 8004510:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	440a      	add	r2, r1
 8004540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004544:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004548:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	7e7b      	ldrb	r3, [r7, #25]
 800455a:	075b      	lsls	r3, r3, #29
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	0148      	lsls	r0, r1, #5
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	4401      	add	r1, r0
 8004564:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004582:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	78db      	ldrb	r3, [r3, #3]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	e003      	b.n	800459e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800459c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e04e      	b.n	8004660 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	78db      	ldrb	r3, [r3, #3]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d149      	bne.n	800465e <USB_HC_StartXfer+0x276>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d045      	beq.n	800465e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	79db      	ldrb	r3, [r3, #7]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d830      	bhi.n	800463c <USB_HC_StartXfer+0x254>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <USB_HC_StartXfer+0x1f8>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004615 	.word	0x08004615
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	08004615 	.word	0x08004615
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	3303      	adds	r3, #3
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80045fa:	8afa      	ldrh	r2, [r7, #22]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	b29b      	uxth	r3, r3
 8004602:	429a      	cmp	r2, r3
 8004604:	d91c      	bls.n	8004640 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f043 0220 	orr.w	r2, r3, #32
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	619a      	str	r2, [r3, #24]
        }
        break;
 8004612:	e015      	b.n	8004640 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	3303      	adds	r3, #3
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800461e:	8afa      	ldrh	r2, [r7, #22]
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	b29b      	uxth	r3, r3
 800462a:	429a      	cmp	r2, r3
 800462c:	d90a      	bls.n	8004644 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	619a      	str	r2, [r3, #24]
        }
        break;
 800463a:	e003      	b.n	8004644 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <USB_HC_StartXfer+0x25e>
        break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <USB_HC_StartXfer+0x25e>
        break;
 8004644:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68d9      	ldr	r1, [r3, #12]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	785a      	ldrb	r2, [r3, #1]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	b29b      	uxth	r3, r3
 8004654:	2000      	movs	r0, #0
 8004656:	9000      	str	r0, [sp, #0]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff fb31 	bl	8003cc0 <USB_WritePacket>
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3728      	adds	r7, #40	; 0x28
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	1ff80000 	.word	0x1ff80000

0800466c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	b29b      	uxth	r3, r3
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800468e:	b480      	push	{r7}
 8004690:	b089      	sub	sp, #36	; 0x24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0c9b      	lsrs	r3, r3, #18
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0fdb      	lsrs	r3, r3, #31
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d104      	bne.n	80046e8 <USB_HC_Halt+0x5a>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e0c8      	b.n	800487a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <USB_HC_Halt+0x66>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d163      	bne.n	80047bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	440a      	add	r2, r1
 800470a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004712:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 80ab 	bne.w	8004878 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d133      	bne.n	8004796 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	440a      	add	r2, r1
 8004764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477a:	d81d      	bhi.n	80047b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800478e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004792:	d0ec      	beq.n	800476e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004794:	e070      	b.n	8004878 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047b6:	e05f      	b.n	8004878 <USB_HC_Halt+0x1ea>
            break;
 80047b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047ba:	e05d      	b.n	8004878 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d133      	bne.n	8004854 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004838:	d81d      	bhi.n	8004876 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800484c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004850:	d0ec      	beq.n	800482c <USB_HC_Halt+0x19e>
 8004852:	e011      	b.n	8004878 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	440a      	add	r2, r1
 800486a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800486e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e000      	b.n	8004878 <USB_HC_Halt+0x1ea>
          break;
 8004876:	bf00      	nop
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	04da      	lsls	r2, r3, #19
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <USB_DoPing+0x74>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	1ff80000 	.word	0x1ff80000

08004900 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff f911 	bl	8003b3c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800491a:	2110      	movs	r1, #16
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff f96b 	bl	8003bf8 <USB_FlushTxFifo>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff f997 	bl	8003c60 <USB_FlushRxFifo>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e01f      	b.n	8004982 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004958:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004960:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004968:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	461a      	mov	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	3301      	adds	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b0f      	cmp	r3, #15
 8004986:	d9dc      	bls.n	8004942 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e034      	b.n	80049f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	461a      	mov	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d4:	d80c      	bhi.n	80049f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ec:	d0ec      	beq.n	80049c8 <USB_StopHost+0xc8>
 80049ee:	e000      	b.n	80049f2 <USB_StopHost+0xf2>
        break;
 80049f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d9c7      	bls.n	800498e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff f880 	bl	8003b1a <USB_EnableGlobalInt>

  return ret;
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e029      	b.n	8004a90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	79fa      	ldrb	r2, [r7, #7]
 8004a40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f81f 	bl	8004a98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f002 f9e9 	bl	8006e60 <USBH_LL_Init>

  return USBH_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e009      	b.n	8004abe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	33e0      	adds	r3, #224	; 0xe0
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d9f2      	bls.n	8004aaa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e009      	b.n	8004ade <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae4:	d3f1      	bcc.n	8004aca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d016      	beq.n	8004b82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10e      	bne.n	8004b7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	33de      	adds	r3, #222	; 0xde
 8004b70:	6839      	ldr	r1, [r7, #0]
 8004b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	e004      	b.n	8004b86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	73fb      	strb	r3, [r7, #15]
 8004b80:	e001      	b.n	8004b86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004b82:	2302      	movs	r3, #2
 8004b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d204      	bcs.n	8004bba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004bb8:	e001      	b.n	8004bbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	70fb      	strb	r3, [r7, #3]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70bb      	strb	r3, [r7, #2]
 8004be2:	4613      	mov	r3, r2
 8004be4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004bf4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004bf6:	e025      	b.n	8004c44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	221a      	movs	r2, #26
 8004bfc:	fb02 f303 	mul.w	r3, r2, r3
 8004c00:	3308      	adds	r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	3302      	adds	r3, #2
 8004c08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	795b      	ldrb	r3, [r3, #5]
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d002      	beq.n	8004c1a <USBH_FindInterface+0x4e>
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	2bff      	cmp	r3, #255	; 0xff
 8004c18:	d111      	bne.n	8004c3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004c1e:	78ba      	ldrb	r2, [r7, #2]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d002      	beq.n	8004c2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c24:	78bb      	ldrb	r3, [r7, #2]
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d109      	bne.n	8004c3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c2e:	787a      	ldrb	r2, [r7, #1]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d002      	beq.n	8004c3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004c34:	787b      	ldrb	r3, [r7, #1]
 8004c36:	2bff      	cmp	r3, #255	; 0xff
 8004c38:	d101      	bne.n	8004c3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	e006      	b.n	8004c4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	3301      	adds	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d9d6      	bls.n	8004bf8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004c4a:	23ff      	movs	r3, #255	; 0xff
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f002 f939 	bl	8006ed8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004c66:	2101      	movs	r1, #1
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f002 fa52 	bl	8007112 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004c80:	2302      	movs	r3, #2
 8004c82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b0b      	cmp	r3, #11
 8004ca2:	f200 81be 	bhi.w	8005022 <USBH_Process+0x3aa>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <USBH_Process+0x34>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cdd 	.word	0x08004cdd
 8004cb0:	08004d0f 	.word	0x08004d0f
 8004cb4:	08004d77 	.word	0x08004d77
 8004cb8:	08004fbd 	.word	0x08004fbd
 8004cbc:	08005023 	.word	0x08005023
 8004cc0:	08004e1b 	.word	0x08004e1b
 8004cc4:	08004f63 	.word	0x08004f63
 8004cc8:	08004e51 	.word	0x08004e51
 8004ccc:	08004e71 	.word	0x08004e71
 8004cd0:	08004e91 	.word	0x08004e91
 8004cd4:	08004ed5 	.word	0x08004ed5
 8004cd8:	08004fa5 	.word	0x08004fa5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 819e 	beq.w	8005026 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004cf0:	20c8      	movs	r0, #200	; 0xc8
 8004cf2:	f002 fa4c 	bl	800718e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f002 f94b 	bl	8006f92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004d0c:	e18b      	b.n	8005026 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004d26:	e18d      	b.n	8005044 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d32:	d914      	bls.n	8004d5e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d903      	bls.n	8004d56 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	220d      	movs	r2, #13
 8004d52:	701a      	strb	r2, [r3, #0]
      break;
 8004d54:	e176      	b.n	8005044 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
      break;
 8004d5c:	e172      	b.n	8005044 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d64:	f103 020a 	add.w	r2, r3, #10
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004d6e:	200a      	movs	r0, #10
 8004d70:	f002 fa0d 	bl	800718e <USBH_Delay>
      break;
 8004d74:	e166      	b.n	8005044 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d86:	2104      	movs	r1, #4
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004d8c:	2064      	movs	r0, #100	; 0x64
 8004d8e:	f002 f9fe 	bl	800718e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f002 f8d6 	bl	8006f44 <USBH_LL_GetSpeed>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2205      	movs	r2, #5
 8004da6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004da8:	2100      	movs	r1, #0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f001 fee1 	bl	8006b72 <USBH_AllocPipe>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004db8:	2180      	movs	r1, #128	; 0x80
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 fed9 	bl	8006b72 <USBH_AllocPipe>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7919      	ldrb	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	9202      	str	r2, [sp, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	9201      	str	r2, [sp, #4]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4603      	mov	r3, r0
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fe92 	bl	8006b14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7959      	ldrb	r1, [r3, #5]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004e04:	b292      	uxth	r2, r2
 8004e06:	9202      	str	r2, [sp, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9201      	str	r2, [sp, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2200      	movs	r2, #0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fe7e 	bl	8006b14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e18:	e114      	b.n	8005044 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f918 	bl	8005050 <USBH_HandleEnum>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004e24:	7bbb      	ldrb	r3, [r7, #14]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80fe 	bne.w	800502a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d103      	bne.n	8004e48 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2208      	movs	r2, #8
 8004e44:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004e46:	e0f0      	b.n	800502a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2207      	movs	r2, #7
 8004e4c:	701a      	strb	r2, [r3, #0]
      break;
 8004e4e:	e0ec      	b.n	800502a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80e9 	beq.w	800502e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e62:	2101      	movs	r1, #1
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8004e6e:	e0de      	b.n	800502e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fc2c 	bl	80056d8 <USBH_SetCfg>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 80d5 	bne.w	8005032 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2209      	movs	r2, #9
 8004e8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e8e:	e0d0      	b.n	8005032 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fc3c 	bl	800571e <USBH_SetFeature>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	220a      	movs	r2, #10
 8004eb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004eb8:	e0bd      	b.n	8005036 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	f040 80b9 	bne.w	8005036 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	220a      	movs	r2, #10
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e0b4      	b.n	8005036 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	220a      	movs	r2, #10
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	e0b0      	b.n	8005036 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80ad 	beq.w	800503a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e016      	b.n	8004f1c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	32de      	adds	r2, #222	; 0xde
 8004ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef8:	791a      	ldrb	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d108      	bne.n	8004f16 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	32de      	adds	r2, #222	; 0xde
 8004f0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004f14:	e005      	b.n	8004f22 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0e5      	beq.n	8004eee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d016      	beq.n	8004f5a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2206      	movs	r2, #6
 8004f42:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f4a:	2103      	movs	r1, #3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004f50:	e073      	b.n	800503a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	220d      	movs	r2, #13
 8004f56:	701a      	strb	r2, [r3, #0]
      break;
 8004f58:	e06f      	b.n	800503a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	220d      	movs	r2, #13
 8004f5e:	701a      	strb	r2, [r3, #0]
      break;
 8004f60:	e06b      	b.n	800503a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	220b      	movs	r2, #11
 8004f88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004f8a:	e058      	b.n	800503e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d154      	bne.n	800503e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	220d      	movs	r2, #13
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e050      	b.n	800503e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	220d      	movs	r2, #13
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	e04c      	b.n	800503e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d049      	beq.n	8005042 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
      }
      break;
 8004fba:	e042      	b.n	8005042 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fd67 	bl	8004a98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004ff8:	2105      	movs	r1, #5
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fe20 	bl	8004c58 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005018:	e014      	b.n	8005044 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 ff5c 	bl	8006ed8 <USBH_LL_Start>
      break;
 8005020:	e010      	b.n	8005044 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005022:	bf00      	nop
 8005024:	e00e      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 8005026:	bf00      	nop
 8005028:	e00c      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 800502a:	bf00      	nop
 800502c:	e00a      	b.n	8005044 <USBH_Process+0x3cc>
    break;
 800502e:	bf00      	nop
 8005030:	e008      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 8005032:	bf00      	nop
 8005034:	e006      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 8005036:	bf00      	nop
 8005038:	e004      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <USBH_Process+0x3cc>
      break;
 8005042:	bf00      	nop
  }
  return USBH_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop

08005050 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af04      	add	r7, sp, #16
 8005056:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800505c:	2301      	movs	r3, #1
 800505e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b07      	cmp	r3, #7
 8005066:	f200 81c1 	bhi.w	80053ec <USBH_HandleEnum+0x39c>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <USBH_HandleEnum+0x20>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005091 	.word	0x08005091
 8005074:	0800514f 	.word	0x0800514f
 8005078:	080051b9 	.word	0x080051b9
 800507c:	08005247 	.word	0x08005247
 8005080:	080052b1 	.word	0x080052b1
 8005084:	08005321 	.word	0x08005321
 8005088:	08005367 	.word	0x08005367
 800508c:	080053ad 	.word	0x080053ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005090:	2108      	movs	r1, #8
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa50 	bl	8005538 <USBH_Get_DevDesc>
 8005098:	4603      	mov	r3, r0
 800509a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d130      	bne.n	8005104 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7919      	ldrb	r1, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80050c6:	b292      	uxth	r2, r2
 80050c8:	9202      	str	r2, [sp, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	9201      	str	r2, [sp, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fd1d 	bl	8006b14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7959      	ldrb	r1, [r3, #5]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80050ee:	b292      	uxth	r2, r2
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	9201      	str	r2, [sp, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4603      	mov	r3, r0
 80050fa:	2200      	movs	r2, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 fd09 	bl	8006b14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005102:	e175      	b.n	80053f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	2b03      	cmp	r3, #3
 8005108:	f040 8172 	bne.w	80053f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005112:	3301      	adds	r3, #1
 8005114:	b2da      	uxtb	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005122:	2b03      	cmp	r3, #3
 8005124:	d903      	bls.n	800512e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	220d      	movs	r2, #13
 800512a:	701a      	strb	r2, [r3, #0]
      break;
 800512c:	e160      	b.n	80053f0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	795b      	ldrb	r3, [r3, #5]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 fd3d 	bl	8006bb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	791b      	ldrb	r3, [r3, #4]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f001 fd37 	bl	8006bb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
      break;
 800514c:	e150      	b.n	80053f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800514e:	2112      	movs	r1, #18
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f9f1 	bl	8005538 <USBH_Get_DevDesc>
 8005156:	4603      	mov	r3, r0
 8005158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005166:	e145      	b.n	80053f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	2b03      	cmp	r3, #3
 800516c:	f040 8142 	bne.w	80053f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005176:	3301      	adds	r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005186:	2b03      	cmp	r3, #3
 8005188:	d903      	bls.n	8005192 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	220d      	movs	r2, #13
 800518e:	701a      	strb	r2, [r3, #0]
      break;
 8005190:	e130      	b.n	80053f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	795b      	ldrb	r3, [r3, #5]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fd0b 	bl	8006bb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	791b      	ldrb	r3, [r3, #4]
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fd05 	bl	8006bb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
      break;
 80051b6:	e11d      	b.n	80053f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80051b8:	2101      	movs	r1, #1
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa68 	bl	8005690 <USBH_SetAddress>
 80051c0:	4603      	mov	r3, r0
 80051c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80051c4:	7bbb      	ldrb	r3, [r7, #14]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d132      	bne.n	8005230 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80051ca:	2002      	movs	r0, #2
 80051cc:	f001 ffdf 	bl	800718e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7919      	ldrb	r1, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80051f2:	b292      	uxth	r2, r2
 80051f4:	9202      	str	r2, [sp, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	9201      	str	r2, [sp, #4]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4603      	mov	r3, r0
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 fc87 	bl	8006b14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7959      	ldrb	r1, [r3, #5]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800521a:	b292      	uxth	r2, r2
 800521c:	9202      	str	r2, [sp, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	9201      	str	r2, [sp, #4]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4603      	mov	r3, r0
 8005226:	2200      	movs	r2, #0
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f001 fc73 	bl	8006b14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800522e:	e0e3      	b.n	80053f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2b03      	cmp	r3, #3
 8005234:	f040 80e0 	bne.w	80053f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	220d      	movs	r2, #13
 800523c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	705a      	strb	r2, [r3, #1]
      break;
 8005244:	e0d8      	b.n	80053f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005246:	2109      	movs	r1, #9
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f99d 	bl	8005588 <USBH_Get_CfgDesc>
 800524e:	4603      	mov	r3, r0
 8005250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2204      	movs	r2, #4
 800525c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800525e:	e0cd      	b.n	80053fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	2b03      	cmp	r3, #3
 8005264:	f040 80ca 	bne.w	80053fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800526e:	3301      	adds	r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800527e:	2b03      	cmp	r3, #3
 8005280:	d903      	bls.n	800528a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	220d      	movs	r2, #13
 8005286:	701a      	strb	r2, [r3, #0]
      break;
 8005288:	e0b8      	b.n	80053fc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	795b      	ldrb	r3, [r3, #5]
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fc8f 	bl	8006bb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	791b      	ldrb	r3, [r3, #4]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fc89 	bl	8006bb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
      break;
 80052ae:	e0a5      	b.n	80053fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f965 	bl	8005588 <USBH_Get_CfgDesc>
 80052be:	4603      	mov	r3, r0
 80052c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2205      	movs	r2, #5
 80052cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80052ce:	e097      	b.n	8005400 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052d0:	7bbb      	ldrb	r3, [r7, #14]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	f040 8094 	bne.w	8005400 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80052de:	3301      	adds	r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d903      	bls.n	80052fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	220d      	movs	r2, #13
 80052f6:	701a      	strb	r2, [r3, #0]
      break;
 80052f8:	e082      	b.n	8005400 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	795b      	ldrb	r3, [r3, #5]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fc57 	bl	8006bb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	791b      	ldrb	r3, [r3, #4]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fc51 	bl	8006bb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
      break;
 800531e:	e06f      	b.n	8005400 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005326:	2b00      	cmp	r3, #0
 8005328:	d019      	beq.n	800535e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005336:	23ff      	movs	r3, #255	; 0xff
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f949 	bl	80055d0 <USBH_Get_StringDesc>
 800533e:	4603      	mov	r3, r0
 8005340:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2206      	movs	r2, #6
 800534c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800534e:	e059      	b.n	8005404 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d156      	bne.n	8005404 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2206      	movs	r2, #6
 800535a:	705a      	strb	r2, [r3, #1]
      break;
 800535c:	e052      	b.n	8005404 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2206      	movs	r2, #6
 8005362:	705a      	strb	r2, [r3, #1]
      break;
 8005364:	e04e      	b.n	8005404 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800536c:	2b00      	cmp	r3, #0
 800536e:	d019      	beq.n	80053a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800537c:	23ff      	movs	r3, #255	; 0xff
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f926 	bl	80055d0 <USBH_Get_StringDesc>
 8005384:	4603      	mov	r3, r0
 8005386:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2207      	movs	r2, #7
 8005392:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005394:	e038      	b.n	8005408 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d135      	bne.n	8005408 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2207      	movs	r2, #7
 80053a0:	705a      	strb	r2, [r3, #1]
      break;
 80053a2:	e031      	b.n	8005408 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2207      	movs	r2, #7
 80053a8:	705a      	strb	r2, [r3, #1]
      break;
 80053aa:	e02d      	b.n	8005408 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80053c2:	23ff      	movs	r3, #255	; 0xff
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f903 	bl	80055d0 <USBH_Get_StringDesc>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80053d8:	e018      	b.n	800540c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80053da:	7bbb      	ldrb	r3, [r7, #14]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d115      	bne.n	800540c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e012      	b.n	800540c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ea:	e00f      	b.n	800540c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80053ec:	bf00      	nop
 80053ee:	e00e      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 80053f0:	bf00      	nop
 80053f2:	e00c      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 80053f4:	bf00      	nop
 80053f6:	e00a      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 80053f8:	bf00      	nop
 80053fa:	e008      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 80053fc:	bf00      	nop
 80053fe:	e006      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 8005400:	bf00      	nop
 8005402:	e004      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <USBH_HandleEnum+0x3be>
      break;
 800540c:	bf00      	nop
  }
  return Status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f804 	bl	800545a <USBH_HandleSof>
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b0b      	cmp	r3, #11
 800546a:	d10a      	bne.n	8005482 <USBH_HandleSof+0x28>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
  }
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800549a:	bf00      	nop
}
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80054b6:	bf00      	nop
}
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 fcfc 	bl	8006f0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	791b      	ldrb	r3, [r3, #4]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 fb49 	bl	8006bb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	795b      	ldrb	r3, [r3, #5]
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fb43 	bl	8006bb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	b29b      	uxth	r3, r3
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005556:	2100      	movs	r1, #0
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f864 	bl	8005626 <USBH_GetDescriptor>
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	b292      	uxth	r2, r2
 8005578:	4619      	mov	r1, r3
 800557a:	f000 f918 	bl	80057ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	331c      	adds	r3, #28
 8005598:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a4:	2100      	movs	r1, #0
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f83d 	bl	8005626 <USBH_GetDescriptor>
 80055ac:	4603      	mov	r3, r0
 80055ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	461a      	mov	r2, r3
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f987 	bl	80058d0 <USBH_ParseCfgDesc>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	461a      	mov	r2, r3
 80055dc:	460b      	mov	r3, r1
 80055de:	72fb      	strb	r3, [r7, #11]
 80055e0:	4613      	mov	r3, r2
 80055e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80055e4:	7afb      	ldrb	r3, [r7, #11]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80055ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80055f4:	893b      	ldrh	r3, [r7, #8]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	460b      	mov	r3, r1
 80055fa:	2100      	movs	r1, #0
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f812 	bl	8005626 <USBH_GetDescriptor>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005612:	893a      	ldrh	r2, [r7, #8]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fb24 	bl	8005c64 <USBH_ParseStringDesc>
  }

  return status;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	72fb      	strb	r3, [r7, #11]
 8005634:	4613      	mov	r3, r2
 8005636:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	789b      	ldrb	r3, [r3, #2]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d11c      	bne.n	800567a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2206      	movs	r2, #6
 8005650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800565e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005662:	d104      	bne.n	800566e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f240 4209 	movw	r2, #1033	; 0x409
 800566a:	829a      	strh	r2, [r3, #20]
 800566c:	e002      	b.n	8005674 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8b3a      	ldrh	r2, [r7, #24]
 8005678:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800567a:	8b3b      	ldrh	r3, [r7, #24]
 800567c:	461a      	mov	r2, r3
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fb3d 	bl	8005d00 <USBH_CtlReq>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10f      	bne.n	80056c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2205      	movs	r2, #5
 80056ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb19 	bl	8005d00 <USBH_CtlReq>
 80056ce:	4603      	mov	r3, r0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	789b      	ldrb	r3, [r3, #2]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d10e      	bne.n	800570a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2209      	movs	r2, #9
 80056f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 faf6 	bl	8005d00 <USBH_CtlReq>
 8005714:	4603      	mov	r3, r0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	789b      	ldrb	r3, [r3, #2]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d10f      	bne.n	8005752 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2203      	movs	r2, #3
 800573c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005752:	2200      	movs	r2, #0
 8005754:	2100      	movs	r1, #0
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fad2 	bl	8005d00 <USBH_CtlReq>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	460b      	mov	r3, r1
 8005770:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	789b      	ldrb	r3, [r3, #2]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10f      	bne.n	800579a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 faae 	bl	8005d00 <USBH_CtlReq>
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	785a      	ldrb	r2, [r3, #1]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	3302      	adds	r3, #2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	3303      	adds	r3, #3
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	791a      	ldrb	r2, [r3, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	795a      	ldrb	r2, [r3, #5]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	799a      	ldrb	r2, [r3, #6]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	79da      	ldrb	r2, [r3, #7]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	79db      	ldrb	r3, [r3, #7]
 800580c:	2b20      	cmp	r3, #32
 800580e:	dc11      	bgt.n	8005834 <USBH_ParseDevDesc+0x86>
 8005810:	2b08      	cmp	r3, #8
 8005812:	db16      	blt.n	8005842 <USBH_ParseDevDesc+0x94>
 8005814:	3b08      	subs	r3, #8
 8005816:	2201      	movs	r2, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8005820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <USBH_ParseDevDesc+0x8a>
 8005832:	e006      	b.n	8005842 <USBH_ParseDevDesc+0x94>
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d104      	bne.n	8005842 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	79da      	ldrb	r2, [r3, #7]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	71da      	strb	r2, [r3, #7]
      break;
 8005840:	e003      	b.n	800584a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	71da      	strb	r2, [r3, #7]
      break;
 8005848:	bf00      	nop
  }

  if (length > 8U)
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d939      	bls.n	80058c4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3308      	adds	r3, #8
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b29a      	uxth	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	3309      	adds	r3, #9
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	b29b      	uxth	r3, r3
 8005864:	4313      	orrs	r3, r2
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	330a      	adds	r3, #10
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b29a      	uxth	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	330b      	adds	r3, #11
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	4313      	orrs	r3, r2
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	330c      	adds	r3, #12
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	330d      	adds	r3, #13
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	b29b      	uxth	r3, r3
 800589c:	4313      	orrs	r3, r2
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	7b9a      	ldrb	r2, [r3, #14]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	7bda      	ldrb	r2, [r3, #15]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	7c1a      	ldrb	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	7c5a      	ldrb	r2, [r3, #17]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	745a      	strb	r2, [r3, #17]
  }
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	; 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80058e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	785a      	ldrb	r2, [r3, #1]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	3302      	adds	r3, #2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b29a      	uxth	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	3303      	adds	r3, #3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	4313      	orrs	r3, r2
 8005926:	b29b      	uxth	r3, r3
 8005928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592c:	bf28      	it	cs
 800592e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005932:	b29a      	uxth	r2, r3
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	791a      	ldrb	r2, [r3, #4]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	795a      	ldrb	r2, [r3, #5]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	799a      	ldrb	r2, [r3, #6]
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	79da      	ldrb	r2, [r3, #7]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	7a1a      	ldrb	r2, [r3, #8]
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b09      	cmp	r3, #9
 8005966:	d002      	beq.n	800596e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2209      	movs	r2, #9
 800596c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b09      	cmp	r3, #9
 8005972:	f240 809d 	bls.w	8005ab0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8005976:	2309      	movs	r3, #9
 8005978:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800597e:	e081      	b.n	8005a84 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005980:	f107 0316 	add.w	r3, r7, #22
 8005984:	4619      	mov	r1, r3
 8005986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005988:	f000 f99f 	bl	8005cca <USBH_GetNextDesc>
 800598c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d176      	bne.n	8005a84 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b09      	cmp	r3, #9
 800599c:	d002      	beq.n	80059a4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	2209      	movs	r2, #9
 80059a2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80059a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a8:	221a      	movs	r2, #26
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	3308      	adds	r3, #8
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	4413      	add	r3, r2
 80059b4:	3302      	adds	r3, #2
 80059b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80059b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ba:	69f8      	ldr	r0, [r7, #28]
 80059bc:	f000 f87e 	bl	8005abc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80059ca:	e043      	b.n	8005a54 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80059cc:	f107 0316 	add.w	r3, r7, #22
 80059d0:	4619      	mov	r1, r3
 80059d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d4:	f000 f979 	bl	8005cca <USBH_GetNextDesc>
 80059d8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d138      	bne.n	8005a54 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	795b      	ldrb	r3, [r3, #5]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d10f      	bne.n	8005a0a <USBH_ParseCfgDesc+0x13a>
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	799b      	ldrb	r3, [r3, #6]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d10b      	bne.n	8005a0a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	79db      	ldrb	r3, [r3, #7]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10f      	bne.n	8005a1a <USBH_ParseCfgDesc+0x14a>
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b09      	cmp	r3, #9
 8005a00:	d00b      	beq.n	8005a1a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2209      	movs	r2, #9
 8005a06:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005a08:	e007      	b.n	8005a1a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b07      	cmp	r3, #7
 8005a10:	d004      	beq.n	8005a1c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	2207      	movs	r2, #7
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e000      	b.n	8005a1c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005a1a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a24:	3201      	adds	r2, #1
 8005a26:	00d2      	lsls	r2, r2, #3
 8005a28:	211a      	movs	r1, #26
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	3308      	adds	r3, #8
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f86b 	bl	8005b1a <USBH_ParseEPDesc>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d204      	bcs.n	8005a6a <USBH_ParseCfgDesc+0x19a>
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	885a      	ldrh	r2, [r3, #2]
 8005a64:	8afb      	ldrh	r3, [r7, #22]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d8b0      	bhi.n	80059cc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d201      	bcs.n	8005a7a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e01c      	b.n	8005ab4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8005a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d805      	bhi.n	8005a98 <USBH_ParseCfgDesc+0x1c8>
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	885a      	ldrh	r2, [r3, #2]
 8005a90:	8afb      	ldrh	r3, [r7, #22]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f63f af74 	bhi.w	8005980 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	791b      	ldrb	r3, [r3, #4]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	bf28      	it	cs
 8005aa0:	2302      	movcs	r3, #2
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d201      	bcs.n	8005ab0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e001      	b.n	8005ab4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8005ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3730      	adds	r7, #48	; 0x30
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	785a      	ldrb	r2, [r3, #1]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	789a      	ldrb	r2, [r3, #2]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	78da      	ldrb	r2, [r3, #3]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	791a      	ldrb	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	795a      	ldrb	r2, [r3, #5]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	799a      	ldrb	r2, [r3, #6]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	79da      	ldrb	r2, [r3, #7]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	7a1a      	ldrb	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	721a      	strb	r2, [r3, #8]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	785a      	ldrb	r2, [r3, #1]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	789a      	ldrb	r2, [r3, #2]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	78da      	ldrb	r2, [r3, #3]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3305      	adds	r3, #5
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	799a      	ldrb	r2, [r3, #6]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	889b      	ldrh	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8005b76:	2303      	movs	r3, #3
 8005b78:	75fb      	strb	r3, [r7, #23]
 8005b7a:	e033      	b.n	8005be4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	889b      	ldrh	r3, [r3, #4]
 8005b80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b84:	f023 0307 	bic.w	r3, r3, #7
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	b21a      	sxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b299      	uxth	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3305      	adds	r3, #5
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <USBH_ParseEPDesc+0xbc>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b299      	uxth	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3305      	adds	r3, #5
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd2:	b21b      	sxth	r3, r3
 8005bd4:	e001      	b.n	8005bda <USBH_ParseEPDesc+0xc0>
 8005bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b21b      	sxth	r3, r3
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d005      	beq.n	8005c06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d127      	bne.n	8005c56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	799b      	ldrb	r3, [r3, #6]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <USBH_ParseEPDesc+0xfc>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	799b      	ldrb	r3, [r3, #6]
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d91f      	bls.n	8005c56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c16:	2303      	movs	r3, #3
 8005c18:	75fb      	strb	r3, [r7, #23]
 8005c1a:	e01c      	b.n	8005c56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10a      	bne.n	8005c3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	799b      	ldrb	r3, [r3, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <USBH_ParseEPDesc+0x11e>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	799b      	ldrb	r3, [r3, #6]
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d90e      	bls.n	8005c56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	75fb      	strb	r3, [r7, #23]
 8005c3c:	e00b      	b.n	8005c56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d105      	bne.n	8005c56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	799b      	ldrb	r3, [r3, #6]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c52:	2303      	movs	r3, #3
 8005c54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d120      	bne.n	8005cbe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	1e9a      	subs	r2, r3, #2
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf28      	it	cs
 8005c88:	4613      	movcs	r3, r2
 8005c8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005c92:	2300      	movs	r3, #0
 8005c94:	82fb      	strh	r3, [r7, #22]
 8005c96:	e00b      	b.n	8005cb0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005c98:	8afb      	ldrh	r3, [r7, #22]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	781a      	ldrb	r2, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005caa:	8afb      	ldrh	r3, [r7, #22]
 8005cac:	3302      	adds	r3, #2
 8005cae:	82fb      	strh	r3, [r7, #22]
 8005cb0:	8afa      	ldrh	r2, [r7, #22]
 8005cb2:	8abb      	ldrh	r3, [r7, #20]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3ef      	bcc.n	8005c98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	789b      	ldrb	r3, [r3, #2]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d002      	beq.n	8005d20 <USBH_CtlReq+0x20>
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d00f      	beq.n	8005d3e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005d1e:	e027      	b.n	8005d70 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2202      	movs	r2, #2
 8005d36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3c:	e018      	b.n	8005d70 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f81c 	bl	8005d7c <USBH_HandleControl>
 8005d44:	4603      	mov	r3, r0
 8005d46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <USBH_CtlReq+0x54>
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d106      	bne.n	8005d62 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	761a      	strb	r2, [r3, #24]
      break;
 8005d60:	e005      	b.n	8005d6e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d102      	bne.n	8005d6e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	709a      	strb	r2, [r3, #2]
      break;
 8005d6e:	bf00      	nop
  }
  return status;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	7e1b      	ldrb	r3, [r3, #24]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	2b0a      	cmp	r3, #10
 8005d94:	f200 8156 	bhi.w	8006044 <USBH_HandleControl+0x2c8>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <USBH_HandleControl+0x24>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005de7 	.word	0x08005de7
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005e77 	.word	0x08005e77
 8005db0:	08005eaf 	.word	0x08005eaf
 8005db4:	08005ed9 	.word	0x08005ed9
 8005db8:	08005f2b 	.word	0x08005f2b
 8005dbc:	08005f4d 	.word	0x08005f4d
 8005dc0:	08005f89 	.word	0x08005f89
 8005dc4:	08005faf 	.word	0x08005faf
 8005dc8:	08005fed 	.word	0x08005fed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f103 0110 	add.w	r1, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	795b      	ldrb	r3, [r3, #5]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fe1f 	bl	8006a1c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	761a      	strb	r2, [r3, #24]
      break;
 8005de4:	e139      	b.n	800605a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	795b      	ldrb	r3, [r3, #5]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f97d 	bl	80070ec <USBH_LL_GetURBState>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d11e      	bne.n	8005e3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7c1b      	ldrb	r3, [r3, #16]
 8005e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8adb      	ldrh	r3, [r3, #22]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005e0e:	7b7b      	ldrb	r3, [r7, #13]
 8005e10:	2b80      	cmp	r3, #128	; 0x80
 8005e12:	d103      	bne.n	8005e1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2203      	movs	r2, #3
 8005e18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005e1a:	e115      	b.n	8006048 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2205      	movs	r2, #5
 8005e20:	761a      	strb	r2, [r3, #24]
      break;
 8005e22:	e111      	b.n	8006048 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005e24:	7b7b      	ldrb	r3, [r7, #13]
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d103      	bne.n	8005e32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2209      	movs	r2, #9
 8005e2e:	761a      	strb	r2, [r3, #24]
      break;
 8005e30:	e10a      	b.n	8006048 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2207      	movs	r2, #7
 8005e36:	761a      	strb	r2, [r3, #24]
      break;
 8005e38:	e106      	b.n	8006048 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d003      	beq.n	8005e48 <USBH_HandleControl+0xcc>
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	f040 8100 	bne.w	8006048 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	220b      	movs	r2, #11
 8005e4c:	761a      	strb	r2, [r3, #24]
      break;
 8005e4e:	e0fb      	b.n	8006048 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6899      	ldr	r1, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	899a      	ldrh	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fe16 	bl	8006a9a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	761a      	strb	r2, [r3, #24]
      break;
 8005e74:	e0f1      	b.n	800605a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 f935 	bl	80070ec <USBH_LL_GetURBState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2209      	movs	r2, #9
 8005e90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	d102      	bne.n	8005e9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005e9c:	e0d6      	b.n	800604c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	f040 80d3 	bne.w	800604c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	220b      	movs	r2, #11
 8005eaa:	761a      	strb	r2, [r3, #24]
      break;
 8005eac:	e0ce      	b.n	800604c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6899      	ldr	r1, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	899a      	ldrh	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	795b      	ldrb	r3, [r3, #5]
 8005eba:	2001      	movs	r0, #1
 8005ebc:	9000      	str	r0, [sp, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fdc6 	bl	8006a50 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2206      	movs	r2, #6
 8005ed4:	761a      	strb	r2, [r3, #24]
      break;
 8005ed6:	e0c0      	b.n	800605a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	795b      	ldrb	r3, [r3, #5]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 f904 	bl	80070ec <USBH_LL_GetURBState>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d103      	bne.n	8005ef6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005ef4:	e0ac      	b.n	8006050 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d105      	bne.n	8005f08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	220c      	movs	r2, #12
 8005f00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005f02:	2303      	movs	r3, #3
 8005f04:	73fb      	strb	r3, [r7, #15]
      break;
 8005f06:	e0a3      	b.n	8006050 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d103      	bne.n	8005f16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2205      	movs	r2, #5
 8005f12:	761a      	strb	r2, [r3, #24]
      break;
 8005f14:	e09c      	b.n	8006050 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	f040 8099 	bne.w	8006050 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	220b      	movs	r2, #11
 8005f22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005f24:	2302      	movs	r3, #2
 8005f26:	73fb      	strb	r3, [r7, #15]
      break;
 8005f28:	e092      	b.n	8006050 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	791b      	ldrb	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2100      	movs	r1, #0
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fdb1 	bl	8006a9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2208      	movs	r2, #8
 8005f48:	761a      	strb	r2, [r3, #24]

      break;
 8005f4a:	e086      	b.n	800605a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	791b      	ldrb	r3, [r3, #4]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f8ca 	bl	80070ec <USBH_LL_GetURBState>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d105      	bne.n	8005f6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	220d      	movs	r2, #13
 8005f66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005f6c:	e072      	b.n	8006054 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d103      	bne.n	8005f7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	220b      	movs	r2, #11
 8005f78:	761a      	strb	r2, [r3, #24]
      break;
 8005f7a:	e06b      	b.n	8006054 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d168      	bne.n	8006054 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005f82:	2303      	movs	r3, #3
 8005f84:	73fb      	strb	r3, [r7, #15]
      break;
 8005f86:	e065      	b.n	8006054 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	795b      	ldrb	r3, [r3, #5]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	9200      	str	r2, [sp, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fd5b 	bl	8006a50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	220a      	movs	r2, #10
 8005faa:	761a      	strb	r2, [r3, #24]
      break;
 8005fac:	e055      	b.n	800605a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	795b      	ldrb	r3, [r3, #5]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 f899 	bl	80070ec <USBH_LL_GetURBState>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	220d      	movs	r2, #13
 8005fcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005fce:	e043      	b.n	8006058 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d103      	bne.n	8005fde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2209      	movs	r2, #9
 8005fda:	761a      	strb	r2, [r3, #24]
      break;
 8005fdc:	e03c      	b.n	8006058 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d139      	bne.n	8006058 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	220b      	movs	r2, #11
 8005fe8:	761a      	strb	r2, [r3, #24]
      break;
 8005fea:	e035      	b.n	8006058 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	7e5b      	ldrb	r3, [r3, #25]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	765a      	strb	r2, [r3, #25]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7e5b      	ldrb	r3, [r3, #25]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d806      	bhi.n	800600e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800600c:	e025      	b.n	800605a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006014:	2106      	movs	r1, #6
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	795b      	ldrb	r3, [r3, #5]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fdc4 	bl	8006bb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	791b      	ldrb	r3, [r3, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fdbe 	bl	8006bb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800603e:	2302      	movs	r3, #2
 8006040:	73fb      	strb	r3, [r7, #15]
      break;
 8006042:	e00a      	b.n	800605a <USBH_HandleControl+0x2de>

    default:
      break;
 8006044:	bf00      	nop
 8006046:	e008      	b.n	800605a <USBH_HandleControl+0x2de>
      break;
 8006048:	bf00      	nop
 800604a:	e006      	b.n	800605a <USBH_HandleControl+0x2de>
      break;
 800604c:	bf00      	nop
 800604e:	e004      	b.n	800605a <USBH_HandleControl+0x2de>
      break;
 8006050:	bf00      	nop
 8006052:	e002      	b.n	800605a <USBH_HandleControl+0x2de>
      break;
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <USBH_HandleControl+0x2de>
      break;
 8006058:	bf00      	nop
  }

  return status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b08b      	sub	sp, #44	; 0x2c
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006076:	7919      	ldrb	r1, [r3, #4]
 8006078:	23ff      	movs	r3, #255	; 0xff
 800607a:	2201      	movs	r2, #1
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fe fda5 	bl	8004bcc <USBH_FindInterface>
 8006082:	4603      	mov	r3, r0
 8006084:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006086:	7dbb      	ldrb	r3, [r7, #22]
 8006088:	2bff      	cmp	r3, #255	; 0xff
 800608a:	d002      	beq.n	8006092 <USBH_HID_InterfaceInit+0x2e>
 800608c:	7dbb      	ldrb	r3, [r7, #22]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d901      	bls.n	8006096 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	e108      	b.n	80062a8 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8006096:	7dbb      	ldrb	r3, [r7, #22]
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fe fd7a 	bl	8004b94 <USBH_SelectInterface>
 80060a0:	4603      	mov	r3, r0
 80060a2:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80060a4:	7d7b      	ldrb	r3, [r7, #21]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80060aa:	2302      	movs	r3, #2
 80060ac:	e0fc      	b.n	80062a8 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060b4:	2034      	movs	r0, #52	; 0x34
 80060b6:	f001 f8cb 	bl	8007250 <malloc>
 80060ba:	4603      	mov	r3, r0
 80060bc:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0ea      	b.n	80062a8 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80060d2:	2234      	movs	r2, #52	; 0x34
 80060d4:	2100      	movs	r1, #0
 80060d6:	6938      	ldr	r0, [r7, #16]
 80060d8:	f001 f8ca 	bl	8007270 <memset>

  HID_Handle->state = HID_ERROR;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2207      	movs	r2, #7
 80060e0:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80060e2:	7dbb      	ldrb	r3, [r7, #22]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	211a      	movs	r1, #26
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 3349 	addw	r3, r3, #841	; 0x349
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d103      	bne.n	8006100 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4a6d      	ldr	r2, [pc, #436]	; (80062b0 <USBH_HID_InterfaceInit+0x24c>)
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
 80060fe:	e010      	b.n	8006122 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8006100:	7dbb      	ldrb	r3, [r7, #22]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	211a      	movs	r1, #26
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	4413      	add	r3, r2
 800610c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d103      	bne.n	800611e <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4a66      	ldr	r2, [pc, #408]	; (80062b4 <USBH_HID_InterfaceInit+0x250>)
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
 800611c:	e001      	b.n	8006122 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	e0c2      	b.n	80062a8 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2200      	movs	r2, #0
 8006126:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2200      	movs	r2, #0
 800612c:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800612e:	7dbb      	ldrb	r3, [r7, #22]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	211a      	movs	r1, #26
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	4413      	add	r3, r2
 800613a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006144:	7dbb      	ldrb	r3, [r7, #22]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	211a      	movs	r1, #26
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800615a:	7dbb      	ldrb	r3, [r7, #22]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	211a      	movs	r1, #26
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	f203 3352 	addw	r3, r3, #850	; 0x352
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	8b9b      	ldrh	r3, [r3, #28]
 8006176:	2b09      	cmp	r3, #9
 8006178:	d802      	bhi.n	8006180 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	220a      	movs	r2, #10
 800617e:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8006180:	7dbb      	ldrb	r3, [r7, #22]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	211a      	movs	r1, #26
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b02      	cmp	r3, #2
 8006194:	bf28      	it	cs
 8006196:	2302      	movcs	r3, #2
 8006198:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800619a:	2300      	movs	r3, #0
 800619c:	75fb      	strb	r3, [r7, #23]
 800619e:	e07d      	b.n	800629c <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80061a0:	7dbb      	ldrb	r3, [r7, #22]
 80061a2:	7df9      	ldrb	r1, [r7, #23]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	3101      	adds	r1, #1
 80061a8:	00c9      	lsls	r1, r1, #3
 80061aa:	201a      	movs	r0, #26
 80061ac:	fb00 f303 	mul.w	r3, r0, r3
 80061b0:	440b      	add	r3, r1
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 3346 	addw	r3, r3, #838	; 0x346
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da35      	bge.n	800622c <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80061c0:	7dbb      	ldrb	r3, [r7, #22]
 80061c2:	7df9      	ldrb	r1, [r7, #23]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	3101      	adds	r1, #1
 80061c8:	00c9      	lsls	r1, r1, #3
 80061ca:	201a      	movs	r0, #26
 80061cc:	fb00 f303 	mul.w	r3, r0, r3
 80061d0:	440b      	add	r3, r1
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 3346 	addw	r3, r3, #838	; 0x346
 80061d8:	781a      	ldrb	r2, [r3, #0]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fcc4 	bl	8006b72 <USBH_AllocPipe>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	7859      	ldrb	r1, [r3, #1]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	7918      	ldrb	r0, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	8b12      	ldrh	r2, [r2, #24]
 800620a:	9202      	str	r2, [sp, #8]
 800620c:	2203      	movs	r2, #3
 800620e:	9201      	str	r2, [sp, #4]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4623      	mov	r3, r4
 8006214:	4602      	mov	r2, r0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fc7c 	bl	8006b14 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2200      	movs	r2, #0
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 ff82 	bl	800712e <USBH_LL_SetToggle>
 800622a:	e034      	b.n	8006296 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800622c:	7dbb      	ldrb	r3, [r7, #22]
 800622e:	7df9      	ldrb	r1, [r7, #23]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	3101      	adds	r1, #1
 8006234:	00c9      	lsls	r1, r1, #3
 8006236:	201a      	movs	r0, #26
 8006238:	fb00 f303 	mul.w	r3, r0, r3
 800623c:	440b      	add	r3, r1
 800623e:	4413      	add	r3, r2
 8006240:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc8e 	bl	8006b72 <USBH_AllocPipe>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	7819      	ldrb	r1, [r3, #0]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	78d8      	ldrb	r0, [r3, #3]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	8b12      	ldrh	r2, [r2, #24]
 8006276:	9202      	str	r2, [sp, #8]
 8006278:	2203      	movs	r2, #3
 800627a:	9201      	str	r2, [sp, #4]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4623      	mov	r3, r4
 8006280:	4602      	mov	r2, r0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc46 	bl	8006b14 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 ff4c 	bl	800712e <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	3301      	adds	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
 800629c:	7dfa      	ldrb	r2, [r7, #23]
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	f4ff af7d 	bcc.w	80061a0 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd90      	pop	{r4, r7, pc}
 80062b0:	080068e1 	.word	0x080068e1
 80062b4:	08006989 	.word	0x08006989

080062b8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc3a 	bl	8006b52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc65 	bl	8006bb4 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc27 	bl	8006b52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc52 	bl	8006bb4 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff98 	bl	8007260 <free>
    phost->pActiveClass->pData = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006336:	2200      	movs	r2, #0
 8006338:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8006350:	2301      	movs	r3, #1
 8006352:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	795b      	ldrb	r3, [r3, #5]
 8006362:	2b05      	cmp	r3, #5
 8006364:	d860      	bhi.n	8006428 <USBH_HID_ClassRequest+0xe4>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBH_HID_ClassRequest+0x28>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006385 	.word	0x08006385
 8006370:	08006429 	.word	0x08006429
 8006374:	0800639f 	.word	0x0800639f
 8006378:	08006385 	.word	0x08006385
 800637c:	080063c9 	.word	0x080063c9
 8006380:	080063f3 	.word	0x080063f3
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	331c      	adds	r3, #28
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f000 f9cd 	bl	8006730 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2202      	movs	r2, #2
 800639a:	715a      	strb	r2, [r3, #5]

      break;
 800639c:	e04b      	b.n	8006436 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f930 	bl	800660a <USBH_HID_GetHIDReportDescriptor>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2204      	movs	r2, #4
 80063b8:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 80063ba:	e037      	b.n	800642c <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d134      	bne.n	800642c <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80063c2:	2302      	movs	r3, #2
 80063c4:	73fb      	strb	r3, [r7, #15]
      break;
 80063c6:	e031      	b.n	800642c <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f935 	bl	800663c <USBH_HID_SetIdle>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2205      	movs	r2, #5
 80063e0:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 80063e2:	e025      	b.n	8006430 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d122      	bne.n	8006430 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2205      	movs	r2, #5
 80063ee:	715a      	strb	r2, [r3, #5]
      break;
 80063f0:	e01e      	b.n	8006430 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 80063f2:	2100      	movs	r1, #0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f975 	bl	80066e4 <USBH_HID_SetProtocol>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2201      	movs	r2, #1
 8006408:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006410:	2102      	movs	r1, #2
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
        status = USBH_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800641a:	e00b      	b.n	8006434 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d108      	bne.n	8006434 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8006422:	2302      	movs	r3, #2
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e005      	b.n	8006434 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8006428:	bf00      	nop
 800642a:	e004      	b.n	8006436 <USBH_HID_ClassRequest+0xf2>
      break;
 800642c:	bf00      	nop
 800642e:	e002      	b.n	8006436 <USBH_HID_ClassRequest+0xf2>
      break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <USBH_HID_ClassRequest+0xf2>
      break;
 8006434:	bf00      	nop
  }

  return status;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	789b      	ldrb	r3, [r3, #2]
 800645a:	2b06      	cmp	r3, #6
 800645c:	f200 80a9 	bhi.w	80065b2 <USBH_HID_Process+0x172>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <USBH_HID_Process+0x28>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	08006485 	.word	0x08006485
 800646c:	08006495 	.word	0x08006495
 8006470:	080065b3 	.word	0x080065b3
 8006474:	080065b3 	.word	0x080065b3
 8006478:	08006505 	.word	0x08006505
 800647c:	080064ef 	.word	0x080064ef
 8006480:	08006533 	.word	0x08006533
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2201      	movs	r2, #1
 8006490:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006492:	e093      	b.n	80065bc <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	8b1b      	ldrh	r3, [r3, #24]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	2101      	movs	r1, #1
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f8f0 	bl	800668c <USBH_HID_GetReport>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2205      	movs	r2, #5
 80064ba:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064bc:	e07e      	b.n	80065bc <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2201      	movs	r2, #1
 80064c8:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
      break;
 80064ce:	e075      	b.n	80065bc <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d105      	bne.n	80064e2 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2205      	movs	r2, #5
 80064da:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	e06c      	b.n	80065bc <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2207      	movs	r2, #7
 80064e6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80064e8:	2302      	movs	r3, #2
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e066      	b.n	80065bc <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05c      	beq.n	80065b6 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2204      	movs	r2, #4
 8006500:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006502:	e058      	b.n	80065b6 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800650c:	b2da      	uxtb	r2, r3
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fadf 	bl	8006ad6 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2206      	movs	r2, #6
 800651c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8006530:	e044      	b.n	80065bc <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fdd7 	bl	80070ec <USBH_LL_GetURBState>
 800653e:	4603      	mov	r3, r0
 8006540:	2b01      	cmp	r3, #1
 8006542:	d120      	bne.n	8006586 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fd3c 	bl	8006fc8 <USBH_LL_GetLastXferSize>
 8006550:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d12e      	bne.n	80065ba <USBH_HID_Process+0x17a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02b      	beq.n	80065ba <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f103 0008 	add.w	r0, r3, #8
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6959      	ldr	r1, [r3, #20]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	8b1b      	ldrh	r3, [r3, #24]
 8006570:	461a      	mov	r2, r3
 8006572:	f000 f957 	bl	8006824 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9a4 	bl	80068cc <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8006584:	e019      	b.n	80065ba <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fdad 	bl	80070ec <USBH_LL_GetURBState>
 8006592:	4603      	mov	r3, r0
 8006594:	2b05      	cmp	r3, #5
 8006596:	d110      	bne.n	80065ba <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	7e9b      	ldrb	r3, [r3, #26]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff f8e1 	bl	8005766 <USBH_ClrFeature>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2204      	movs	r2, #4
 80065ae:	709a      	strb	r2, [r3, #2]
      break;
 80065b0:	e003      	b.n	80065ba <USBH_HID_Process+0x17a>

    default:
      break;
 80065b2:	bf00      	nop
 80065b4:	e002      	b.n	80065bc <USBH_HID_Process+0x17c>
      break;
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <USBH_HID_Process+0x17c>
      break;
 80065ba:	bf00      	nop
  }

  return status;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	789b      	ldrb	r3, [r3, #2]
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d10c      	bne.n	80065fc <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	8b92      	ldrh	r2, [r2, #28]
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d302      	bcc.n	80065fc <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2204      	movs	r2, #4
 80065fa:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af02      	add	r7, sp, #8
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006626:	2101      	movs	r1, #1
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fe fffc 	bl	8005626 <USBH_GetDescriptor>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
 8006648:	4613      	mov	r3, r2
 800664a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2221      	movs	r2, #33	; 0x21
 8006650:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	220a      	movs	r2, #10
 8006656:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	b29b      	uxth	r3, r3
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	b29a      	uxth	r2, r3
 8006660:	78bb      	ldrb	r3, [r7, #2]
 8006662:	b29b      	uxth	r3, r3
 8006664:	4313      	orrs	r3, r2
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fb3f 	bl	8005d00 <USBH_CtlReq>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	72fb      	strb	r3, [r7, #11]
 800669a:	4613      	mov	r3, r2
 800669c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22a1      	movs	r2, #161	; 0xa1
 80066a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	7abb      	ldrb	r3, [r7, #10]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80066c4:	7e3b      	ldrb	r3, [r7, #24]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80066cc:	7e3b      	ldrb	r3, [r7, #24]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fb13 	bl	8005d00 <USBH_CtlReq>
 80066da:	4603      	mov	r3, r0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2221      	movs	r2, #33	; 0x21
 80066f4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	220b      	movs	r2, #11
 80066fa:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	825a      	strh	r2, [r3, #18]
 8006708:	e002      	b.n	8006710 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff faed 	bl	8005d00 <USBH_CtlReq>
 8006726:	4603      	mov	r3, r0

}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3302      	adds	r3, #2
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	b29a      	uxth	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	3303      	adds	r3, #3
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	b29b      	uxth	r3, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006756:	897b      	ldrh	r3, [r7, #10]
 8006758:	2b09      	cmp	r3, #9
 800675a:	d943      	bls.n	80067e4 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800675c:	2309      	movs	r3, #9
 800675e:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8006760:	e03c      	b.n	80067dc <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4619      	mov	r1, r3
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff faae 	bl	8005cca <USBH_GetNextDesc>
 800676e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b21      	cmp	r3, #33	; 0x21
 8006776:	d131      	bne.n	80067dc <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	785a      	ldrb	r2, [r3, #1]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3302      	adds	r3, #2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3303      	adds	r3, #3
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	b29b      	uxth	r3, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	791a      	ldrb	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	795a      	ldrb	r2, [r3, #5]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	799a      	ldrb	r2, [r3, #6]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3307      	adds	r3, #7
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3308      	adds	r3, #8
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	4313      	orrs	r3, r2
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	811a      	strh	r2, [r3, #8]
        break;
 80067d8:	bf00      	nop
      }
    }
  }
}
 80067da:	e003      	b.n	80067e4 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	897a      	ldrh	r2, [r7, #10]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d8be      	bhi.n	8006762 <USBH_HID_ParseHIDDesc+0x32>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	601a      	str	r2, [r3, #0]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7a9b      	ldrb	r3, [r3, #10]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d13c      	bne.n	80068b8 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006844:	2300      	movs	r3, #0
 8006846:	82fb      	strh	r3, [r7, #22]
 8006848:	e032      	b.n	80068b0 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	88d2      	ldrh	r2, [r2, #6]
 8006854:	4293      	cmp	r3, r2
 8006856:	d00a      	beq.n	800686e <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	889b      	ldrh	r3, [r3, #4]
 800685c:	3301      	adds	r3, #1
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8006862:	4293      	cmp	r3, r2
 8006864:	d108      	bne.n	8006878 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88db      	ldrh	r3, [r3, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	729a      	strb	r2, [r3, #10]
        return i;
 8006874:	8afb      	ldrh	r3, [r7, #22]
 8006876:	e023      	b.n	80068c0 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	613a      	str	r2, [r7, #16]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	8889      	ldrh	r1, [r1, #4]
 8006886:	440a      	add	r2, r1
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	7013      	strb	r3, [r2, #0]
        f->head++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	889b      	ldrh	r3, [r3, #4]
 8006890:	3301      	adds	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	889a      	ldrh	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	891b      	ldrh	r3, [r3, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d102      	bne.n	80068aa <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80068aa:	8afb      	ldrh	r3, [r7, #22]
 80068ac:	3301      	adds	r3, #1
 80068ae:	82fb      	strh	r3, [r7, #22]
 80068b0:	8afa      	ldrh	r2, [r7, #22]
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3c8      	bcc.n	800684a <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80068be:	88fb      	ldrh	r3, [r7, #6]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_HID_EventCallback>:
  * @brief  The function is a callback about HID Data events
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80068fe:	4b1f      	ldr	r3, [pc, #124]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 8006900:	2200      	movs	r2, #0
 8006902:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 8006906:	2200      	movs	r2, #0
 8006908:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 800690c:	2200      	movs	r2, #0
 800690e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 8006912:	2200      	movs	r2, #0
 8006914:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8006916:	4b19      	ldr	r3, [pc, #100]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 8006918:	2200      	movs	r2, #0
 800691a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800691c:	4b17      	ldr	r3, [pc, #92]	; (800697c <USBH_HID_KeybdInit+0x9c>)
 800691e:	2200      	movs	r2, #0
 8006920:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	e00c      	b.n	8006942 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006928:	4a15      	ldr	r2, [pc, #84]	; (8006980 <USBH_HID_KeybdInit+0xa0>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2100      	movs	r1, #0
 800692e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8006932:	4a14      	ldr	r2, [pc, #80]	; (8006984 <USBH_HID_KeybdInit+0xa4>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2100      	movs	r1, #0
 8006938:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3301      	adds	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d9ef      	bls.n	8006928 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	8b1b      	ldrh	r3, [r3, #24]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d902      	bls.n	8006956 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2208      	movs	r2, #8
 8006954:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <USBH_HID_KeybdInit+0xa4>)
 800695a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f103 0008 	add.w	r0, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006968:	2250      	movs	r2, #80	; 0x50
 800696a:	4619      	mov	r1, r3
 800696c:	f7ff ff3e 	bl	80067ec <USBH_HID_FifoInit>

  return USBH_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000100 	.word	0x20000100
 8006980:	20000118 	.word	0x20000118
 8006984:	20000110 	.word	0x20000110

08006988 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <USBH_HID_MouseInit+0x88>)
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <USBH_HID_MouseInit+0x88>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <USBH_HID_MouseInit+0x88>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80069ac:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <USBH_HID_MouseInit+0x88>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80069b2:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <USBH_HID_MouseInit+0x88>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e00c      	b.n	80069d8 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <USBH_HID_MouseInit+0x8c>)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2100      	movs	r1, #0
 80069c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <USBH_HID_MouseInit+0x90>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2100      	movs	r1, #0
 80069ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d9ef      	bls.n	80069be <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	8b1b      	ldrh	r3, [r3, #24]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d902      	bls.n	80069ec <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2208      	movs	r2, #8
 80069ea:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <USBH_HID_MouseInit+0x90>)
 80069f0:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f103 0008 	add.w	r0, r3, #8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069fe:	2250      	movs	r2, #80	; 0x50
 8006a00:	4619      	mov	r1, r3
 8006a02:	f7ff fef3 	bl	80067ec <USBH_HID_FifoInit>

  return USBH_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000120 	.word	0x20000120
 8006a14:	20000128 	.word	0x20000128
 8006a18:	20000130 	.word	0x20000130

08006a1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af04      	add	r7, sp, #16
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a2a:	79f9      	ldrb	r1, [r7, #7]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	2308      	movs	r3, #8
 8006a32:	9302      	str	r3, [sp, #8]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fb22 	bl	800708a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	460b      	mov	r3, r1
 8006a60:	80fb      	strh	r3, [r7, #6]
 8006a62:	4613      	mov	r3, r2
 8006a64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a74:	7979      	ldrb	r1, [r7, #5]
 8006a76:	7e3b      	ldrb	r3, [r7, #24]
 8006a78:	9303      	str	r3, [sp, #12]
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	9302      	str	r3, [sp, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	2301      	movs	r3, #1
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2300      	movs	r3, #0
 8006a88:	2200      	movs	r2, #0
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fafd 	bl	800708a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b088      	sub	sp, #32
 8006a9e:	af04      	add	r7, sp, #16
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	80fb      	strh	r3, [r7, #6]
 8006aac:	4613      	mov	r3, r2
 8006aae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ab0:	7979      	ldrb	r1, [r7, #5]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fadf 	bl	800708a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006acc:	2300      	movs	r3, #0

}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b088      	sub	sp, #32
 8006ada:	af04      	add	r7, sp, #16
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	79b9      	ldrb	r1, [r7, #6]
 8006af2:	2200      	movs	r2, #0
 8006af4:	9203      	str	r2, [sp, #12]
 8006af6:	9302      	str	r3, [sp, #8]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	2301      	movs	r3, #1
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	2303      	movs	r3, #3
 8006b02:	2201      	movs	r2, #1
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fac0 	bl	800708a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af04      	add	r7, sp, #16
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	4611      	mov	r1, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	70fb      	strb	r3, [r7, #3]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70bb      	strb	r3, [r7, #2]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006b2e:	7878      	ldrb	r0, [r7, #1]
 8006b30:	78ba      	ldrb	r2, [r7, #2]
 8006b32:	78f9      	ldrb	r1, [r7, #3]
 8006b34:	8b3b      	ldrh	r3, [r7, #24]
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	7d3b      	ldrb	r3, [r7, #20]
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	7c3b      	ldrb	r3, [r7, #16]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4603      	mov	r3, r0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa53 	bl	8006fee <USBH_LL_OpenPipe>

  return USBH_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa72 	bl	800704c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f836 	bl	8006bf0 <USBH_GetFreePipe>
 8006b84:	4603      	mov	r3, r0
 8006b86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00a      	beq.n	8006ba8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	33e0      	adds	r3, #224	; 0xe0
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006ba8:	89fb      	ldrh	r3, [r7, #14]
 8006baa:	b2db      	uxtb	r3, r3
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d80d      	bhi.n	8006be2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	33e0      	adds	r3, #224	; 0xe0
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	33e0      	adds	r3, #224	; 0xe0
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
 8006c00:	e00f      	b.n	8006c22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	33e0      	adds	r3, #224	; 0xe0
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	e007      	b.n	8006c2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	73fb      	strb	r3, [r7, #15]
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b0f      	cmp	r3, #15
 8006c26:	d9ec      	bls.n	8006c02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	490e      	ldr	r1, [pc, #56]	; (8006c78 <MX_USB_HOST_Init+0x40>)
 8006c40:	480e      	ldr	r0, [pc, #56]	; (8006c7c <MX_USB_HOST_Init+0x44>)
 8006c42:	f7fd feef 	bl	8004a24 <USBH_Init>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006c4c:	f7f9 ff1e 	bl	8000a8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006c50:	490b      	ldr	r1, [pc, #44]	; (8006c80 <MX_USB_HOST_Init+0x48>)
 8006c52:	480a      	ldr	r0, [pc, #40]	; (8006c7c <MX_USB_HOST_Init+0x44>)
 8006c54:	f7fd ff74 	bl	8004b40 <USBH_RegisterClass>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006c5e:	f7f9 ff15 	bl	8000a8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006c62:	4806      	ldr	r0, [pc, #24]	; (8006c7c <MX_USB_HOST_Init+0x44>)
 8006c64:	f7fd fff8 	bl	8004c58 <USBH_Start>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006c6e:	f7f9 ff0d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006c72:	bf00      	nop
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	08006c99 	.word	0x08006c99
 8006c7c:	20000138 	.word	0x20000138
 8006c80:	2000000c 	.word	0x2000000c

08006c84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006c88:	4802      	ldr	r0, [pc, #8]	; (8006c94 <MX_USB_HOST_Process+0x10>)
 8006c8a:	f7fd fff5 	bl	8004c78 <USBH_Process>
}
 8006c8e:	bf00      	nop
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000138 	.word	0x20000138

08006c98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d819      	bhi.n	8006ce0 <USBH_UserProcess+0x48>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <USBH_UserProcess+0x1c>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cd1 	.word	0x08006cd1
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006cd9 	.word	0x08006cd9
 8006cc4:	08006cc9 	.word	0x08006cc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <USBH_UserProcess+0x58>)
 8006cca:	2203      	movs	r2, #3
 8006ccc:	701a      	strb	r2, [r3, #0]
  break;
 8006cce:	e008      	b.n	8006ce2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <USBH_UserProcess+0x58>)
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
  break;
 8006cd6:	e004      	b.n	8006ce2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <USBH_UserProcess+0x58>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
  break;
 8006cde:	e000      	b.n	8006ce2 <USBH_UserProcess+0x4a>

  default:
  break;
 8006ce0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000510 	.word	0x20000510

08006cf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	60da      	str	r2, [r3, #12]
 8006d0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d14:	d147      	bne.n	8006da6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	6313      	str	r3, [r2, #48]	; 0x30
 8006d26:	4b22      	ldr	r3, [pc, #136]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006d32:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d40:	2303      	movs	r3, #3
 8006d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d44:	230a      	movs	r3, #10
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4819      	ldr	r0, [pc, #100]	; (8006db4 <HAL_HCD_MspInit+0xc0>)
 8006d50:	f7fa f99e 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	4619      	mov	r1, r3
 8006d68:	4812      	ldr	r0, [pc, #72]	; (8006db4 <HAL_HCD_MspInit+0xc0>)
 8006d6a:	f7fa f991 	bl	8001090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d78:	6353      	str	r3, [r2, #52]	; 0x34
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	4a0b      	ldr	r2, [pc, #44]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d88:	6453      	str	r3, [r2, #68]	; 0x44
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <HAL_HCD_MspInit+0xbc>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	2043      	movs	r0, #67	; 0x43
 8006d9c:	f7fa f925 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006da0:	2043      	movs	r0, #67	; 0x43
 8006da2:	f7fa f93e 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006da6:	bf00      	nop
 8006da8:	3728      	adds	r7, #40	; 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40023800 	.word	0x40023800
 8006db4:	40020000 	.word	0x40020000

08006db8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fb35 	bl	8005436 <USBH_LL_IncTimer>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fb6d 	bl	80054c2 <USBH_LL_Connect>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fb76 	bl	80054f0 <USBH_LL_Disconnect>
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe fb27 	bl	800548a <USBH_LL_PortEnabled>
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fb27 	bl	80054a6 <USBH_LL_PortDisabled>
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d12a      	bne.n	8006ec8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006e72:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ea8:	480a      	ldr	r0, [pc, #40]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006eaa:	f7fa fa8e 	bl	80013ca <HAL_HCD_Init>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006eb4:	f7f9 fdea 	bl	8000a8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006eb8:	4806      	ldr	r0, [pc, #24]	; (8006ed4 <USBH_LL_Init+0x74>)
 8006eba:	f7fa fe72 	bl	8001ba2 <HAL_HCD_GetCurrentFrame>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe faa8 	bl	8005418 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000514 	.word	0x20000514

08006ed8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fa fde1 	bl	8001ab6 <HAL_HCD_Start>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f952 	bl	80071a4 <USBH_Get_USB_Status>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa fde9 	bl	8001afc <HAL_HCD_Stop>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 f937 	bl	80071a4 <USBH_Get_USB_Status>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fa fe31 	bl	8001bbe <HAL_HCD_GetCurrentSpeed>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d00c      	beq.n	8006f7c <USBH_LL_GetSpeed+0x38>
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d80d      	bhi.n	8006f82 <USBH_LL_GetSpeed+0x3e>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <USBH_LL_GetSpeed+0x2c>
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d003      	beq.n	8006f76 <USBH_LL_GetSpeed+0x32>
 8006f6e:	e008      	b.n	8006f82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
    break;
 8006f74:	e008      	b.n	8006f88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7a:	e005      	b.n	8006f88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f80:	e002      	b.n	8006f88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
    break;
 8006f86:	bf00      	nop
  }
  return  speed;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fa fdc4 	bl	8001b36 <HAL_HCD_ResetPort>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f8f5 	bl	80071a4 <USBH_Get_USB_Status>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fa fdcb 	bl	8001b7a <HAL_HCD_HC_GetXferCount>
 8006fe4:	4603      	mov	r3, r0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006fee:	b590      	push	{r4, r7, lr}
 8006ff0:	b089      	sub	sp, #36	; 0x24
 8006ff2:	af04      	add	r7, sp, #16
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	70fb      	strb	r3, [r7, #3]
 8007000:	460b      	mov	r3, r1
 8007002:	70bb      	strb	r3, [r7, #2]
 8007004:	4613      	mov	r3, r2
 8007006:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007016:	787c      	ldrb	r4, [r7, #1]
 8007018:	78ba      	ldrb	r2, [r7, #2]
 800701a:	78f9      	ldrb	r1, [r7, #3]
 800701c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	f897 3020 	ldrb.w	r3, [r7, #32]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4623      	mov	r3, r4
 800702e:	f7fa fa2e 	bl	800148e <HAL_HCD_HC_Init>
 8007032:	4603      	mov	r3, r0
 8007034:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 f8b3 	bl	80071a4 <USBH_Get_USB_Status>
 800703e:	4603      	mov	r3, r0
 8007040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007042:	7bbb      	ldrb	r3, [r7, #14]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bd90      	pop	{r4, r7, pc}

0800704c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f7fa fa9e 	bl	80015ac <HAL_HCD_HC_Halt>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f894 	bl	80071a4 <USBH_Get_USB_Status>
 800707c:	4603      	mov	r3, r0
 800707e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007080:	7bbb      	ldrb	r3, [r7, #14]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800708a:	b590      	push	{r4, r7, lr}
 800708c:	b089      	sub	sp, #36	; 0x24
 800708e:	af04      	add	r7, sp, #16
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	4608      	mov	r0, r1
 8007094:	4611      	mov	r1, r2
 8007096:	461a      	mov	r2, r3
 8007098:	4603      	mov	r3, r0
 800709a:	70fb      	strb	r3, [r7, #3]
 800709c:	460b      	mov	r3, r1
 800709e:	70bb      	strb	r3, [r7, #2]
 80070a0:	4613      	mov	r3, r2
 80070a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80070b2:	787c      	ldrb	r4, [r7, #1]
 80070b4:	78ba      	ldrb	r2, [r7, #2]
 80070b6:	78f9      	ldrb	r1, [r7, #3]
 80070b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070bc:	9303      	str	r3, [sp, #12]
 80070be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4623      	mov	r3, r4
 80070ce:	f7fa fa91 	bl	80015f4 <HAL_HCD_HC_SubmitRequest>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f863 	bl	80071a4 <USBH_Get_USB_Status>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}

080070ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7fa fd25 	bl	8001b52 <HAL_HCD_HC_GetURBState>
 8007108:	4603      	mov	r3, r0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800711e:	20c8      	movs	r0, #200	; 0xc8
 8007120:	f7f9 fe64 	bl	8000dec <HAL_Delay>
  return USBH_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
 800713a:	4613      	mov	r3, r2
 800713c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007144:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	212c      	movs	r1, #44	; 0x2c
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	4413      	add	r3, r2
 8007152:	333b      	adds	r3, #59	; 0x3b
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	212c      	movs	r1, #44	; 0x2c
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	4413      	add	r3, r2
 8007166:	3354      	adds	r3, #84	; 0x54
 8007168:	78ba      	ldrb	r2, [r7, #2]
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e008      	b.n	8007180 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	212c      	movs	r1, #44	; 0x2c
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	4413      	add	r3, r2
 800717a:	3355      	adds	r3, #85	; 0x55
 800717c:	78ba      	ldrb	r2, [r7, #2]
 800717e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7f9 fe28 	bl	8000dec <HAL_Delay>
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d817      	bhi.n	80071e8 <USBH_Get_USB_Status+0x44>
 80071b8:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <USBH_Get_USB_Status+0x1c>)
 80071ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071be:	bf00      	nop
 80071c0:	080071d1 	.word	0x080071d1
 80071c4:	080071d7 	.word	0x080071d7
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071e3 	.word	0x080071e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
    break;
 80071d4:	e00b      	b.n	80071ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80071d6:	2302      	movs	r3, #2
 80071d8:	73fb      	strb	r3, [r7, #15]
    break;
 80071da:	e008      	b.n	80071ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
    break;
 80071e0:	e005      	b.n	80071ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80071e2:	2302      	movs	r3, #2
 80071e4:	73fb      	strb	r3, [r7, #15]
    break;
 80071e6:	e002      	b.n	80071ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80071e8:	2302      	movs	r3, #2
 80071ea:	73fb      	strb	r3, [r7, #15]
    break;
 80071ec:	bf00      	nop
  }
  return usb_status;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <__errno>:
 80071fc:	4b01      	ldr	r3, [pc, #4]	; (8007204 <__errno+0x8>)
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	2000002c 	.word	0x2000002c

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4d0d      	ldr	r5, [pc, #52]	; (8007240 <__libc_init_array+0x38>)
 800720c:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 800720e:	1b64      	subs	r4, r4, r5
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	2600      	movs	r6, #0
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	4d0b      	ldr	r5, [pc, #44]	; (8007248 <__libc_init_array+0x40>)
 800721a:	4c0c      	ldr	r4, [pc, #48]	; (800724c <__libc_init_array+0x44>)
 800721c:	f000 f92e 	bl	800747c <_init>
 8007220:	1b64      	subs	r4, r4, r5
 8007222:	10a4      	asrs	r4, r4, #2
 8007224:	2600      	movs	r6, #0
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	08007ab4 	.word	0x08007ab4
 8007244:	08007ab4 	.word	0x08007ab4
 8007248:	08007ab4 	.word	0x08007ab4
 800724c:	08007ab8 	.word	0x08007ab8

08007250 <malloc>:
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <malloc+0xc>)
 8007252:	4601      	mov	r1, r0
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f000 b87f 	b.w	8007358 <_malloc_r>
 800725a:	bf00      	nop
 800725c:	2000002c 	.word	0x2000002c

08007260 <free>:
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <free+0xc>)
 8007262:	4601      	mov	r1, r0
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	f000 b80b 	b.w	8007280 <_free_r>
 800726a:	bf00      	nop
 800726c:	2000002c 	.word	0x2000002c

08007270 <memset>:
 8007270:	4402      	add	r2, r0
 8007272:	4603      	mov	r3, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	d100      	bne.n	800727a <memset+0xa>
 8007278:	4770      	bx	lr
 800727a:	f803 1b01 	strb.w	r1, [r3], #1
 800727e:	e7f9      	b.n	8007274 <memset+0x4>

08007280 <_free_r>:
 8007280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007282:	2900      	cmp	r1, #0
 8007284:	d044      	beq.n	8007310 <_free_r+0x90>
 8007286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800728a:	9001      	str	r0, [sp, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f1a1 0404 	sub.w	r4, r1, #4
 8007292:	bfb8      	it	lt
 8007294:	18e4      	addlt	r4, r4, r3
 8007296:	f000 f8e3 	bl	8007460 <__malloc_lock>
 800729a:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <_free_r+0x94>)
 800729c:	9801      	ldr	r0, [sp, #4]
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	b933      	cbnz	r3, 80072b0 <_free_r+0x30>
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	6014      	str	r4, [r2, #0]
 80072a6:	b003      	add	sp, #12
 80072a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072ac:	f000 b8de 	b.w	800746c <__malloc_unlock>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d908      	bls.n	80072c6 <_free_r+0x46>
 80072b4:	6825      	ldr	r5, [r4, #0]
 80072b6:	1961      	adds	r1, r4, r5
 80072b8:	428b      	cmp	r3, r1
 80072ba:	bf01      	itttt	eq
 80072bc:	6819      	ldreq	r1, [r3, #0]
 80072be:	685b      	ldreq	r3, [r3, #4]
 80072c0:	1949      	addeq	r1, r1, r5
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	e7ed      	b.n	80072a2 <_free_r+0x22>
 80072c6:	461a      	mov	r2, r3
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b10b      	cbz	r3, 80072d0 <_free_r+0x50>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d9fa      	bls.n	80072c6 <_free_r+0x46>
 80072d0:	6811      	ldr	r1, [r2, #0]
 80072d2:	1855      	adds	r5, r2, r1
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	d10b      	bne.n	80072f0 <_free_r+0x70>
 80072d8:	6824      	ldr	r4, [r4, #0]
 80072da:	4421      	add	r1, r4
 80072dc:	1854      	adds	r4, r2, r1
 80072de:	42a3      	cmp	r3, r4
 80072e0:	6011      	str	r1, [r2, #0]
 80072e2:	d1e0      	bne.n	80072a6 <_free_r+0x26>
 80072e4:	681c      	ldr	r4, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	6053      	str	r3, [r2, #4]
 80072ea:	4421      	add	r1, r4
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	e7da      	b.n	80072a6 <_free_r+0x26>
 80072f0:	d902      	bls.n	80072f8 <_free_r+0x78>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	e7d6      	b.n	80072a6 <_free_r+0x26>
 80072f8:	6825      	ldr	r5, [r4, #0]
 80072fa:	1961      	adds	r1, r4, r5
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf04      	itt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	bf04      	itt	eq
 8007308:	1949      	addeq	r1, r1, r5
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	6054      	str	r4, [r2, #4]
 800730e:	e7ca      	b.n	80072a6 <_free_r+0x26>
 8007310:	b003      	add	sp, #12
 8007312:	bd30      	pop	{r4, r5, pc}
 8007314:	20000818 	.word	0x20000818

08007318 <sbrk_aligned>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4e0e      	ldr	r6, [pc, #56]	; (8007354 <sbrk_aligned+0x3c>)
 800731c:	460c      	mov	r4, r1
 800731e:	6831      	ldr	r1, [r6, #0]
 8007320:	4605      	mov	r5, r0
 8007322:	b911      	cbnz	r1, 800732a <sbrk_aligned+0x12>
 8007324:	f000 f88c 	bl	8007440 <_sbrk_r>
 8007328:	6030      	str	r0, [r6, #0]
 800732a:	4621      	mov	r1, r4
 800732c:	4628      	mov	r0, r5
 800732e:	f000 f887 	bl	8007440 <_sbrk_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d00a      	beq.n	800734c <sbrk_aligned+0x34>
 8007336:	1cc4      	adds	r4, r0, #3
 8007338:	f024 0403 	bic.w	r4, r4, #3
 800733c:	42a0      	cmp	r0, r4
 800733e:	d007      	beq.n	8007350 <sbrk_aligned+0x38>
 8007340:	1a21      	subs	r1, r4, r0
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f87c 	bl	8007440 <_sbrk_r>
 8007348:	3001      	adds	r0, #1
 800734a:	d101      	bne.n	8007350 <sbrk_aligned+0x38>
 800734c:	f04f 34ff 	mov.w	r4, #4294967295
 8007350:	4620      	mov	r0, r4
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	2000081c 	.word	0x2000081c

08007358 <_malloc_r>:
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	1ccd      	adds	r5, r1, #3
 800735e:	f025 0503 	bic.w	r5, r5, #3
 8007362:	3508      	adds	r5, #8
 8007364:	2d0c      	cmp	r5, #12
 8007366:	bf38      	it	cc
 8007368:	250c      	movcc	r5, #12
 800736a:	2d00      	cmp	r5, #0
 800736c:	4607      	mov	r7, r0
 800736e:	db01      	blt.n	8007374 <_malloc_r+0x1c>
 8007370:	42a9      	cmp	r1, r5
 8007372:	d905      	bls.n	8007380 <_malloc_r+0x28>
 8007374:	230c      	movs	r3, #12
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	2600      	movs	r6, #0
 800737a:	4630      	mov	r0, r6
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007380:	4e2e      	ldr	r6, [pc, #184]	; (800743c <_malloc_r+0xe4>)
 8007382:	f000 f86d 	bl	8007460 <__malloc_lock>
 8007386:	6833      	ldr	r3, [r6, #0]
 8007388:	461c      	mov	r4, r3
 800738a:	bb34      	cbnz	r4, 80073da <_malloc_r+0x82>
 800738c:	4629      	mov	r1, r5
 800738e:	4638      	mov	r0, r7
 8007390:	f7ff ffc2 	bl	8007318 <sbrk_aligned>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	4604      	mov	r4, r0
 8007398:	d14d      	bne.n	8007436 <_malloc_r+0xde>
 800739a:	6834      	ldr	r4, [r6, #0]
 800739c:	4626      	mov	r6, r4
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d140      	bne.n	8007424 <_malloc_r+0xcc>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	4631      	mov	r1, r6
 80073a6:	4638      	mov	r0, r7
 80073a8:	eb04 0803 	add.w	r8, r4, r3
 80073ac:	f000 f848 	bl	8007440 <_sbrk_r>
 80073b0:	4580      	cmp	r8, r0
 80073b2:	d13a      	bne.n	800742a <_malloc_r+0xd2>
 80073b4:	6821      	ldr	r1, [r4, #0]
 80073b6:	3503      	adds	r5, #3
 80073b8:	1a6d      	subs	r5, r5, r1
 80073ba:	f025 0503 	bic.w	r5, r5, #3
 80073be:	3508      	adds	r5, #8
 80073c0:	2d0c      	cmp	r5, #12
 80073c2:	bf38      	it	cc
 80073c4:	250c      	movcc	r5, #12
 80073c6:	4629      	mov	r1, r5
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff ffa5 	bl	8007318 <sbrk_aligned>
 80073ce:	3001      	adds	r0, #1
 80073d0:	d02b      	beq.n	800742a <_malloc_r+0xd2>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	442b      	add	r3, r5
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	e00e      	b.n	80073f8 <_malloc_r+0xa0>
 80073da:	6822      	ldr	r2, [r4, #0]
 80073dc:	1b52      	subs	r2, r2, r5
 80073de:	d41e      	bmi.n	800741e <_malloc_r+0xc6>
 80073e0:	2a0b      	cmp	r2, #11
 80073e2:	d916      	bls.n	8007412 <_malloc_r+0xba>
 80073e4:	1961      	adds	r1, r4, r5
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	6025      	str	r5, [r4, #0]
 80073ea:	bf18      	it	ne
 80073ec:	6059      	strne	r1, [r3, #4]
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	bf08      	it	eq
 80073f2:	6031      	streq	r1, [r6, #0]
 80073f4:	5162      	str	r2, [r4, r5]
 80073f6:	604b      	str	r3, [r1, #4]
 80073f8:	4638      	mov	r0, r7
 80073fa:	f104 060b 	add.w	r6, r4, #11
 80073fe:	f000 f835 	bl	800746c <__malloc_unlock>
 8007402:	f026 0607 	bic.w	r6, r6, #7
 8007406:	1d23      	adds	r3, r4, #4
 8007408:	1af2      	subs	r2, r6, r3
 800740a:	d0b6      	beq.n	800737a <_malloc_r+0x22>
 800740c:	1b9b      	subs	r3, r3, r6
 800740e:	50a3      	str	r3, [r4, r2]
 8007410:	e7b3      	b.n	800737a <_malloc_r+0x22>
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	42a3      	cmp	r3, r4
 8007416:	bf0c      	ite	eq
 8007418:	6032      	streq	r2, [r6, #0]
 800741a:	605a      	strne	r2, [r3, #4]
 800741c:	e7ec      	b.n	80073f8 <_malloc_r+0xa0>
 800741e:	4623      	mov	r3, r4
 8007420:	6864      	ldr	r4, [r4, #4]
 8007422:	e7b2      	b.n	800738a <_malloc_r+0x32>
 8007424:	4634      	mov	r4, r6
 8007426:	6876      	ldr	r6, [r6, #4]
 8007428:	e7b9      	b.n	800739e <_malloc_r+0x46>
 800742a:	230c      	movs	r3, #12
 800742c:	603b      	str	r3, [r7, #0]
 800742e:	4638      	mov	r0, r7
 8007430:	f000 f81c 	bl	800746c <__malloc_unlock>
 8007434:	e7a1      	b.n	800737a <_malloc_r+0x22>
 8007436:	6025      	str	r5, [r4, #0]
 8007438:	e7de      	b.n	80073f8 <_malloc_r+0xa0>
 800743a:	bf00      	nop
 800743c:	20000818 	.word	0x20000818

08007440 <_sbrk_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d06      	ldr	r5, [pc, #24]	; (800745c <_sbrk_r+0x1c>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7f9 fbea 	bl	8000c24 <_sbrk>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_sbrk_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_sbrk_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	20000820 	.word	0x20000820

08007460 <__malloc_lock>:
 8007460:	4801      	ldr	r0, [pc, #4]	; (8007468 <__malloc_lock+0x8>)
 8007462:	f000 b809 	b.w	8007478 <__retarget_lock_acquire_recursive>
 8007466:	bf00      	nop
 8007468:	20000824 	.word	0x20000824

0800746c <__malloc_unlock>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__malloc_unlock+0x8>)
 800746e:	f000 b804 	b.w	800747a <__retarget_lock_release_recursive>
 8007472:	bf00      	nop
 8007474:	20000824 	.word	0x20000824

08007478 <__retarget_lock_acquire_recursive>:
 8007478:	4770      	bx	lr

0800747a <__retarget_lock_release_recursive>:
 800747a:	4770      	bx	lr

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
