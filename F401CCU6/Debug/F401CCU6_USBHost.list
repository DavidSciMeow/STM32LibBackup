
F401CCU6_USBHost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae8  08007ae8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af0  08007af0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000090  08007b88  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08007b88  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146fc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ea  00000000  00000000  000347bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a36  00000000  00000000  00039800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a6c  00000000  00000000  00052236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c136  00000000  00000000  00066ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000f2e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080074b8 	.word	0x080074b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	080074b8 	.word	0x080074b8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <OLED_SPI_Init>:
#define OLED_W_DC(x)		HAL_GPIO_WritePin(LED_DC_GPIO_Port, LED_DC_Pin, (GPIO_PinState)(x))
#define OLED_W_CS(x)		HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_SPI_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	OLED_W_D0(1);
 80004dc:	2201      	movs	r2, #1
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004e2:	f000 ff77 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_D1(1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004ec:	f000 ff72 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_RES(1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <OLED_SPI_Init+0x3c>)
 80004f6:	f000 ff6d 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <OLED_SPI_Init+0x3c>)
 8000500:	f000 ff68 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_CS(1);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <OLED_SPI_Init+0x3c>)
 800050a:	f000 ff63 	bl	80013d4 <HAL_GPIO_WritePin>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000

08000518 <OLED_SPI_SendByte>:
  * @brief  SPI发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_SPI_SendByte(uint8_t Byte)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	e01b      	b.n	8000560 <OLED_SPI_SendByte+0x48>
	{
		OLED_W_D0(0);
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <OLED_SPI_SendByte+0x58>)
 800052e:	f000 ff51 	bl	80013d4 <HAL_GPIO_WritePin>
		OLED_W_D1(Byte & (0x80 >> i));
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	fa42 f303 	asr.w	r3, r2, r3
 800053a:	b25a      	sxtb	r2, r3
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	4013      	ands	r3, r2
 8000542:	b25b      	sxtb	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <OLED_SPI_SendByte+0x58>)
 800054c:	f000 ff42 	bl	80013d4 <HAL_GPIO_WritePin>
		OLED_W_D0(1);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <OLED_SPI_SendByte+0x58>)
 8000556:	f000 ff3d 	bl	80013d4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	3301      	adds	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b07      	cmp	r3, #7
 8000564:	d9e0      	bls.n	8000528 <OLED_SPI_SendByte+0x10>
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020000 	.word	0x40020000

08000574 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <OLED_WriteCommand+0x38>)
 8000584:	f000 ff26 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_DC(0);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <OLED_WriteCommand+0x38>)
 800058e:	f000 ff21 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Command);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffbf 	bl	8000518 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 800059a:	2201      	movs	r2, #1
 800059c:	2108      	movs	r1, #8
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <OLED_WriteCommand+0x38>)
 80005a0:	f000 ff18 	bl	80013d4 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020000 	.word	0x40020000

080005b0 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <OLED_WriteData+0x38>)
 80005c0:	f000 ff08 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <OLED_WriteData+0x38>)
 80005ca:	f000 ff03 	bl	80013d4 <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Data);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffa1 	bl	8000518 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2108      	movs	r1, #8
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <OLED_WriteData+0x38>)
 80005dc:	f000 fefa 	bl	80013d4 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020000 	.word	0x40020000

080005ec <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffb5 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f043 0310 	orr.w	r3, r3, #16
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffac 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffa5 	bl	8000574 <OLED_WriteCommand>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000638:	2300      	movs	r3, #0
 800063a:	71bb      	strb	r3, [r7, #6]
 800063c:	e014      	b.n	8000668 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffd2 	bl	80005ec <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	e005      	b.n	800065a <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ffae 	bl	80005b0 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	3301      	adds	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	daf5      	bge.n	800064e <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3301      	adds	r3, #1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b07      	cmp	r3, #7
 800066c:	d9e7      	bls.n	800063e <OLED_Clear+0xc>
		}
	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	460b      	mov	r3, r1
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	3b01      	subs	r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	3b01      	subs	r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	4610      	mov	r0, r2
 80006a2:	f7ff ffa3 	bl	80005ec <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e00e      	b.n	80006ca <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	f1a3 0220 	sub.w	r2, r3, #32
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	491c      	ldr	r1, [pc, #112]	; (8000728 <OLED_ShowChar+0xb0>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff76 	bl	80005b0 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d9ed      	bls.n	80006ac <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3301      	adds	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	4610      	mov	r0, r2
 80006ec:	f7ff ff7e 	bl	80005ec <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e00f      	b.n	8000716 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	f1a3 0220 	sub.w	r2, r3, #32
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	3308      	adds	r3, #8
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <OLED_ShowChar+0xb0>)
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	440a      	add	r2, r1
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff50 	bl	80005b0 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3301      	adds	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d9ec      	bls.n	80006f6 <OLED_ShowChar+0x7e>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	080074e0 	.word	0x080074e0

0800072c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	603a      	str	r2, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	460b      	mov	r3, r1
 800073a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e00e      	b.n	8000760 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	4413      	add	r3, r2
 8000748:	b2d9      	uxtb	r1, r3
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8f 	bl	8000678 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3301      	adds	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ea      	bne.n	8000742 <OLED_ShowString+0x16>
	}
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	e00c      	b.n	800079c <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e002      	b.n	800078e <OLED_Init+0x18>
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	d3f8      	bcc.n	8000788 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007a2:	d3ee      	bcc.n	8000782 <OLED_Init+0xc>
	}
	
	OLED_SPI_Init();			//端口初始化
 80007a4:	f7ff fe98 	bl	80004d8 <OLED_SPI_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80007a8:	20ae      	movs	r0, #174	; 0xae
 80007aa:	f7ff fee3 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80007ae:	20d5      	movs	r0, #213	; 0xd5
 80007b0:	f7ff fee0 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	f7ff fedd 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80007ba:	20a8      	movs	r0, #168	; 0xa8
 80007bc:	f7ff feda 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80007c0:	203f      	movs	r0, #63	; 0x3f
 80007c2:	f7ff fed7 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80007c6:	20d3      	movs	r0, #211	; 0xd3
 80007c8:	f7ff fed4 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fed1 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80007d2:	2040      	movs	r0, #64	; 0x40
 80007d4:	f7ff fece 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80007d8:	20a1      	movs	r0, #161	; 0xa1
 80007da:	f7ff fecb 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80007de:	20c8      	movs	r0, #200	; 0xc8
 80007e0:	f7ff fec8 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80007e4:	20da      	movs	r0, #218	; 0xda
 80007e6:	f7ff fec5 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80007ea:	2012      	movs	r0, #18
 80007ec:	f7ff fec2 	bl	8000574 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 80007f0:	2081      	movs	r0, #129	; 0x81
 80007f2:	f7ff febf 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 80007f6:	20cf      	movs	r0, #207	; 0xcf
 80007f8:	f7ff febc 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 80007fc:	20d9      	movs	r0, #217	; 0xd9
 80007fe:	f7ff feb9 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000802:	20f1      	movs	r0, #241	; 0xf1
 8000804:	f7ff feb6 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000808:	20db      	movs	r0, #219	; 0xdb
 800080a:	f7ff feb3 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	f7ff feb0 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000814:	20a4      	movs	r0, #164	; 0xa4
 8000816:	f7ff fead 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800081a:	20a6      	movs	r0, #166	; 0xa6
 800081c:	f7ff feaa 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000820:	208d      	movs	r0, #141	; 0x8d
 8000822:	f7ff fea7 	bl	8000574 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000826:	2014      	movs	r0, #20
 8000828:	f7ff fea4 	bl	8000574 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800082c:	20af      	movs	r0, #175	; 0xaf
 800082e:	f7ff fea1 	bl	8000574 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8000832:	f7ff fefe 	bl	8000632 <OLED_Clear>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fa7e 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f822 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8ce 	bl	80009ec <MX_GPIO_Init>
  MX_CRC_Init();
 8000850:	f000 f88c 	bl	800096c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000854:	f000 f89e 	bl	8000994 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000858:	f006 fa0c 	bl	8006c74 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800085c:	f7ff ff8b 	bl	8000776 <OLED_Init>
  LED_Off();
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <main+0x48>)
 8000868:	f000 fdb4 	bl	80013d4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED_On();
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <main+0x48>)
 8000874:	f000 fdae 	bl	80013d4 <HAL_GPIO_WritePin>
	  OLED_ShowString(1,1,"InitComp");
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <main+0x4c>)
 800087a:	2101      	movs	r1, #1
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff55 	bl	800072c <OLED_ShowString>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000882:	f006 fa1d 	bl	8006cc0 <MX_USB_HOST_Process>
	  LED_On();
 8000886:	e7f1      	b.n	800086c <main+0x2c>
 8000888:	40020000 	.word	0x40020000
 800088c:	080074d0 	.word	0x080074d0

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fd04 	bl	80072ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <SystemClock_Config+0xd4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a29      	ldr	r2, [pc, #164]	; (8000964 <SystemClock_Config+0xd4>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xd4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <SystemClock_Config+0xd8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008dc:	4a22      	ldr	r2, [pc, #136]	; (8000968 <SystemClock_Config+0xd8>)
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <SystemClock_Config+0xd8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800090c:	230f      	movs	r3, #15
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000918:	2305      	movs	r3, #5
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f97b 	bl	8002c1c <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800092c:	f000 f8cc 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fbde 	bl	800310c <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000956:	f000 f8b7 	bl	8000ac8 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_CRC_Init+0x20>)
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <MX_CRC_Init+0x24>)
 8000974:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_CRC_Init+0x20>)
 8000978:	f000 fb8b 	bl	8001092 <HAL_CRC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000982:	f000 f8a1 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000ac 	.word	0x200000ac
 8000990:	40023000 	.word	0x40023000

08000994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_USART1_UART_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x50>)
 80009d0:	f002 fd7c 	bl	80034cc <HAL_MultiProcessor_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 f875 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000b4 	.word	0x200000b4
 80009e8:	40011000 	.word	0x40011000

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 8000a72:	2200      	movs	r2, #0
 8000a74:	f242 01f8 	movw	r1, #8440	; 0x20f8
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a7a:	f000 fcab 	bl	80013d4 <HAL_GPIO_WritePin>
                          |LED_SCL_Pin|ILED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CS_Pin LED_DC_Pin LED_RES_Pin LED_SDA_Pin
                           LED_SCL_Pin */
  GPIO_InitStruct.Pin = LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 8000a7e:	23f8      	movs	r3, #248	; 0xf8
 8000a80:	617b      	str	r3, [r7, #20]
                          |LED_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a96:	f000 fb19 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ILED_Pin */
  GPIO_InitStruct.Pin = ILED_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ILED_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000ab4:	f000 fb0a 	bl	80010cc <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_CRC_MspInit+0x3c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10d      	bne.n	8000b52 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_CRC_MspInit+0x40>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <HAL_CRC_MspInit+0x40>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_CRC_MspInit+0x40>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023000 	.word	0x40023000
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_UART_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000bde:	f000 fa75 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f8d0 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <OTG_FS_IRQHandler+0x10>)
 8000c52:	f000 fe43 	bl	80018dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000514 	.word	0x20000514

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f006 fad2 	bl	8007238 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20010000 	.word	0x20010000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000f8 	.word	0x200000f8
 8000cc8:	20000828 	.word	0x20000828

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f006 fa91 	bl	8007244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fd8d 	bl	8000840 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d34:	08007af8 	.word	0x08007af8
  ldr r2, =_sbss
 8000d38:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d3c:	20000828 	.word	0x20000828

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f94f 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff feac 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f967 	bl	800107a <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f92f 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	200000fc 	.word	0x200000fc

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200000fc 	.word	0x200000fc

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00e      	b.n	80010c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fd35 	bl	8000b24 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e159      	b.n	800139c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8148 	bne.w	8001396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	2b02      	cmp	r3, #2
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d017      	beq.n	80011bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d123      	bne.n	8001210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0203 	and.w	r2, r3, #3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a2 	beq.w	8001396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a56      	ldr	r2, [pc, #344]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_GPIO_Init+0x2f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x202>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_GPIO_Init+0x2f4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x1fe>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a47      	ldr	r2, [pc, #284]	; (80013c4 <HAL_GPIO_Init+0x2f8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x1fa>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a46      	ldr	r2, [pc, #280]	; (80013c8 <HAL_GPIO_Init+0x2fc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x1f6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a45      	ldr	r2, [pc, #276]	; (80013cc <HAL_GPIO_Init+0x300>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x1f2>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012be:	2307      	movs	r3, #7
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4935      	ldr	r1, [pc, #212]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_GPIO_Init+0x304>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <HAL_GPIO_Init+0x304>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_GPIO_Init+0x304>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800133c:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <HAL_GPIO_Init+0x304>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_GPIO_Init+0x304>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_GPIO_Init+0x304>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f aea2 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40013c00 	.word	0x40013c00

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f0:	e003      	b.n	80013fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001408:	b08f      	sub	sp, #60	; 0x3c
 800140a:	af0a      	add	r7, sp, #40	; 0x28
 800140c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e054      	b.n	80014c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f005 fc7c 	bl	8006d30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fb8e 	bl	8003b78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	687e      	ldr	r6, [r7, #4]
 8001464:	466d      	mov	r5, sp
 8001466:	f106 0410 	add.w	r4, r6, #16
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001476:	e885 0003 	stmia.w	r5, {r0, r1}
 800147a:	1d33      	adds	r3, r6, #4
 800147c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f002 fb08 	bl	8003a94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fb85 	bl	8003b9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	687e      	ldr	r6, [r7, #4]
 8001498:	466d      	mov	r5, sp
 800149a:	f106 0410 	add.w	r4, r6, #16
 800149e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ae:	1d33      	adds	r3, r6, #4
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f002 fd0e 	bl	8003ed4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014ca:	b590      	push	{r4, r7, lr}
 80014cc:	b089      	sub	sp, #36	; 0x24
 80014ce:	af04      	add	r7, sp, #16
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	4608      	mov	r0, r1
 80014d4:	4611      	mov	r1, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	4603      	mov	r3, r0
 80014da:	70fb      	strb	r3, [r7, #3]
 80014dc:	460b      	mov	r3, r1
 80014de:	70bb      	strb	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_HCD_HC_Init+0x28>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e076      	b.n	80015e0 <HAL_HCD_HC_Init+0x116>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	333d      	adds	r3, #61	; 0x3d
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	212c      	movs	r1, #44	; 0x2c
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	3338      	adds	r3, #56	; 0x38
 800151a:	787a      	ldrb	r2, [r7, #1]
 800151c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	3340      	adds	r3, #64	; 0x40
 800152c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800152e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	212c      	movs	r1, #44	; 0x2c
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	3339      	adds	r3, #57	; 0x39
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	212c      	movs	r1, #44	; 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	333f      	adds	r3, #63	; 0x3f
 8001550:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001554:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	78ba      	ldrb	r2, [r7, #2]
 800155a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800155e:	b2d0      	uxtb	r0, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	333a      	adds	r3, #58	; 0x3a
 800156c:	4602      	mov	r2, r0
 800156e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001574:	2b00      	cmp	r3, #0
 8001576:	da09      	bge.n	800158c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	212c      	movs	r1, #44	; 0x2c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	333b      	adds	r3, #59	; 0x3b
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e008      	b.n	800159e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	212c      	movs	r1, #44	; 0x2c
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	333b      	adds	r3, #59	; 0x3b
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	212c      	movs	r1, #44	; 0x2c
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	333c      	adds	r3, #60	; 0x3c
 80015ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	787c      	ldrb	r4, [r7, #1]
 80015b8:	78ba      	ldrb	r2, [r7, #2]
 80015ba:	78f9      	ldrb	r1, [r7, #3]
 80015bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	f002 fe07 	bl	80041e0 <USB_HC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}

080015e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_HCD_HC_Halt+0x1e>
 8001602:	2302      	movs	r3, #2
 8001604:	e00f      	b.n	8001626 <HAL_HCD_HC_Halt+0x3e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f857 	bl	80046ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4603      	mov	r3, r0
 8001640:	70fb      	strb	r3, [r7, #3]
 8001642:	460b      	mov	r3, r1
 8001644:	70bb      	strb	r3, [r7, #2]
 8001646:	4613      	mov	r3, r2
 8001648:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	333b      	adds	r3, #59	; 0x3b
 8001658:	78ba      	ldrb	r2, [r7, #2]
 800165a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	333f      	adds	r3, #63	; 0x3f
 800166a:	787a      	ldrb	r2, [r7, #1]
 800166c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d112      	bne.n	800169a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	212c      	movs	r1, #44	; 0x2c
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3342      	adds	r3, #66	; 0x42
 8001682:	2203      	movs	r2, #3
 8001684:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	333d      	adds	r3, #61	; 0x3d
 8001694:	7f3a      	ldrb	r2, [r7, #28]
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e008      	b.n	80016ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3342      	adds	r3, #66	; 0x42
 80016a8:	2202      	movs	r2, #2
 80016aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	f200 80c6 	bhi.w	8001840 <HAL_HCD_HC_SubmitRequest+0x210>
 80016b4:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	0800182d 	.word	0x0800182d
 80016c4:	08001731 	.word	0x08001731
 80016c8:	080017af 	.word	0x080017af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016cc:	7c3b      	ldrb	r3, [r7, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 80b8 	bne.w	8001844 <HAL_HCD_HC_SubmitRequest+0x214>
 80016d4:	78bb      	ldrb	r3, [r7, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80b4 	bne.w	8001844 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	3355      	adds	r3, #85	; 0x55
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3355      	adds	r3, #85	; 0x55
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3342      	adds	r3, #66	; 0x42
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800171a:	e093      	b.n	8001844 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3342      	adds	r3, #66	; 0x42
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
      break;
 800172e:	e089      	b.n	8001844 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d11d      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3355      	adds	r3, #85	; 0x55
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800175c:	e073      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e069      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3354      	adds	r3, #84	; 0x54
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3342      	adds	r3, #66	; 0x42
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
      break;
 8001798:	e055      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e04b      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ae:	78bb      	ldrb	r3, [r7, #2]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11d      	bne.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3355      	adds	r3, #85	; 0x55
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017da:	e034      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e02a      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3354      	adds	r3, #84	; 0x54
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e016      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	e00c      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	e002      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001840:	bf00      	nop
 8001842:	e000      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001844:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3344      	adds	r3, #68	; 0x44
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	8b3a      	ldrh	r2, [r7, #24]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	202c      	movs	r0, #44	; 0x2c
 8001860:	fb00 f303 	mul.w	r3, r0, r3
 8001864:	440b      	add	r3, r1
 8001866:	334c      	adds	r3, #76	; 0x4c
 8001868:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3360      	adds	r3, #96	; 0x60
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3350      	adds	r3, #80	; 0x50
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3339      	adds	r3, #57	; 0x39
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3361      	adds	r3, #97	; 0x61
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	222c      	movs	r2, #44	; 0x2c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	3338      	adds	r3, #56	; 0x38
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	18d1      	adds	r1, r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	f002 fdaa 	bl	8004424 <USB_HC_StartXfer>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 faab 	bl	8003e4e <USB_GetMode>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	f040 80f6 	bne.w	8001aec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fa8f 	bl	8003e28 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80ec 	beq.w	8001aea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fa86 	bl	8003e28 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001926:	d104      	bne.n	8001932 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001930:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fa76 	bl	8003e28 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001946:	d104      	bne.n	8001952 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001950:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fa66 	bl	8003e28 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001966:	d104      	bne.n	8001972 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001970:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fa56 	bl	8003e28 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d103      	bne.n	800198e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2202      	movs	r2, #2
 800198c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fa48 	bl	8003e28 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a2:	d11c      	bne.n	80019de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019be:	2110      	movs	r1, #16
 80019c0:	6938      	ldr	r0, [r7, #16]
 80019c2:	f002 f937 	bl	8003c34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019c6:	6938      	ldr	r0, [r7, #16]
 80019c8:	f002 f968 	bl	8003c9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2101      	movs	r1, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fb3e 	bl	8004054 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f005 fa27 	bl	8006e2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fa20 	bl	8003e28 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f2:	d102      	bne.n	80019fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f001 f89e 	bl	8002b36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fa12 	bl	8003e28 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d106      	bne.n	8001a1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f005 f9f0 	bl	8006df4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fa01 	bl	8003e28 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d101      	bne.n	8001a34 <HAL_HCD_IRQHandler+0x158>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_HCD_IRQHandler+0x15a>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0210 	bic.w	r2, r2, #16
 8001a48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 ffa1 	bl	8002992 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 f9df 	bl	8003e28 <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a74:	d13a      	bne.n	8001aec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fe14 	bl	80046a8 <USB_HC_ReadInterrupt>
 8001a80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e025      	b.n	8001ad4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d018      	beq.n	8001ace <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8ab 	bl	8001c16 <HCD_HC_IN_IRQHandler>
 8001ac0:	e005      	b.n	8001ace <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fbf9 	bl	80022c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3d4      	bcc.n	8001a88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	e000      	b.n	8001aec <HAL_HCD_IRQHandler+0x210>
      return;
 8001aea:	bf00      	nop
    }
  }
}
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_HCD_Start+0x16>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e013      	b.n	8001b30 <HAL_HCD_Start+0x3e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fb00 	bl	800411c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 f818 	bl	8003b56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_HCD_Stop+0x16>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e00d      	b.n	8001b6a <HAL_HCD_Stop+0x32>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 feee 	bl	800493c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 faa2 	bl	80040c8 <USB_ResetPort>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3360      	adds	r3, #96	; 0x60
 8001ba8:	781b      	ldrb	r3, [r3, #0]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3350      	adds	r3, #80	; 0x50
 8001bd0:	681b      	ldr	r3, [r3, #0]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fae6 	bl	80041bc <USB_GetCurrentFrame>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fac1 	bl	800418e <USB_GetHostSpeed>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d11a      	bne.n	8001c7c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	461a      	mov	r2, r3
 8001c54:	2304      	movs	r3, #4
 8001c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3361      	adds	r3, #97	; 0x61
 8001c66:	2206      	movs	r2, #6
 8001c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fd28 	bl	80046ca <USB_HC_Halt>
 8001c7a:	e0af      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c92:	d11b      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3361      	adds	r3, #97	; 0x61
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fd00 	bl	80046ca <USB_HC_Halt>
 8001cca:	e087      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d109      	bne.n	8001cf6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	e072      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d11a      	bne.n	8001d42 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3361      	adds	r3, #97	; 0x61
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fcc5 	bl	80046ca <USB_HC_Halt>
 8001d40:	e04c      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d11b      	bne.n	8001d92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3361      	adds	r3, #97	; 0x61
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fc9d 	bl	80046ca <USB_HC_Halt>
 8001d90:	e024      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d119      	bne.n	8001ddc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	461a      	mov	r2, r3
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3361      	adds	r3, #97	; 0x61
 8001dc8:	2206      	movs	r2, #6
 8001dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fc77 	bl	80046ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df2:	d112      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fc63 	bl	80046ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e16:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e18:	e24e      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 80df 	bne.w	8001ff0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d019      	beq.n	8001e6e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	3348      	adds	r3, #72	; 0x48
 8001e48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0159      	lsls	r1, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	202c      	movs	r0, #44	; 0x2c
 8001e64:	fb00 f303 	mul.w	r3, r0, r3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3350      	adds	r3, #80	; 0x50
 8001e6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	212c      	movs	r1, #44	; 0x2c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3361      	adds	r3, #97	; 0x61
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	335c      	adds	r3, #92	; 0x5c
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	333f      	adds	r3, #63	; 0x3f
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	333f      	adds	r3, #63	; 0x3f
 8001ec6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d111      	bne.n	8001ef0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fbf7 	bl	80046ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2310      	movs	r3, #16
 8001eec:	6093      	str	r3, [r2, #8]
 8001eee:	e03a      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	333f      	adds	r3, #63	; 0x3f
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d009      	beq.n	8001f18 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	333f      	adds	r3, #63	; 0x3f
 8001f12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d126      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	0151      	lsls	r1, r2, #5
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f36:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3360      	adds	r3, #96	; 0x60
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	b2d9      	uxtb	r1, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	202c      	movs	r0, #44	; 0x2c
 8001f54:	fb00 f303 	mul.w	r3, r0, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f004 ff71 	bl	8006e48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d12b      	bne.n	8001fc6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	202c      	movs	r0, #44	; 0x2c
 8001f84:	fb00 f202 	mul.w	r2, r0, r2
 8001f88:	440a      	add	r2, r1
 8001f8a:	3240      	adds	r2, #64	; 0x40
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 818e 	beq.w	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3354      	adds	r3, #84	; 0x54
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2d8      	uxtb	r0, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3354      	adds	r3, #84	; 0x54
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	701a      	strb	r2, [r3, #0]
}
 8001fc4:	e178      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3354      	adds	r3, #84	; 0x54
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	f083 0301 	eor.w	r3, r3, #1
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3354      	adds	r3, #84	; 0x54
 8001fea:	4602      	mov	r2, r0
 8001fec:	701a      	strb	r2, [r3, #0]
}
 8001fee:	e163      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	f040 80f6 	bne.w	80021f4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3361      	adds	r3, #97	; 0x61
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d109      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e0c9      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3361      	adds	r3, #97	; 0x61
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d109      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	2205      	movs	r2, #5
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e0b5      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3361      	adds	r3, #97	; 0x61
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d009      	beq.n	8002080 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800207c:	2b08      	cmp	r3, #8
 800207e:	d150      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	335c      	adds	r3, #92	; 0x5c
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	202c      	movs	r0, #44	; 0x2c
 8002098:	fb00 f303 	mul.w	r3, r0, r3
 800209c:	440b      	add	r3, r1
 800209e:	335c      	adds	r3, #92	; 0x5c
 80020a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d912      	bls.n	80020dc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3360      	adds	r3, #96	; 0x60
 80020d6:	2204      	movs	r2, #4
 80020d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020da:	e073      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3360      	adds	r3, #96	; 0x60
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002104:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800210c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002120:	e050      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3361      	adds	r3, #97	; 0x61
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d122      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800215e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002166:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e023      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b07      	cmp	r3, #7
 800218e:	d119      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	335c      	adds	r3, #92	; 0x5c
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	fb00 f303 	mul.w	r3, r0, r3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3360      	adds	r3, #96	; 0x60
 80021c0:	2204      	movs	r2, #4
 80021c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	2302      	movs	r3, #2
 80021d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	202c      	movs	r0, #44	; 0x2c
 80021e0:	fb00 f303 	mul.w	r3, r0, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f004 fe2b 	bl	8006e48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021f2:	e061      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b10      	cmp	r3, #16
 8002208:	d156      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333f      	adds	r3, #63	; 0x3f
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d111      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fa45 	bl	80046ca <USB_HC_Halt>
 8002240:	e031      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	333f      	adds	r3, #63	; 0x3f
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	333f      	adds	r3, #63	; 0x3f
 8002264:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002266:	2b02      	cmp	r3, #2
 8002268:	d11d      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	335c      	adds	r3, #92	; 0x5c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d110      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	2203      	movs	r2, #3
 8002294:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fa12 	bl	80046ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2310      	movs	r3, #16
 80022b6:	6093      	str	r3, [r2, #8]
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11a      	bne.n	8002326 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	2304      	movs	r3, #4
 8002300:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3361      	adds	r3, #97	; 0x61
 8002310:	2206      	movs	r2, #6
 8002312:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f002 f9d3 	bl	80046ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002324:	e331      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b20      	cmp	r3, #32
 800233a:	d12e      	bne.n	800239a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	461a      	mov	r2, r3
 800234a:	2320      	movs	r3, #32
 800234c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	333d      	adds	r3, #61	; 0x3d
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 8313 	bne.w	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	333d      	adds	r3, #61	; 0x3d
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3360      	adds	r3, #96	; 0x60
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 f999 	bl	80046ca <USB_HC_Halt>
}
 8002398:	e2f7      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b0:	d112      	bne.n	80023d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 f97a 	bl	80046ca <USB_HC_Halt>
}
 80023d6:	e2d8      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d140      	bne.n	8002470 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	335c      	adds	r3, #92	; 0x5c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d111      	bne.n	800243a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	333d      	adds	r3, #61	; 0x3d
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	461a      	mov	r2, r3
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	2301      	movs	r3, #1
 800244a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3361      	adds	r3, #97	; 0x61
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f002 f92e 	bl	80046ca <USB_HC_Halt>
}
 800246e:	e28c      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d12c      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3361      	adds	r3, #97	; 0x61
 8002494:	2204      	movs	r2, #4
 8002496:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	333d      	adds	r3, #61	; 0x3d
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 f8ff 	bl	80046ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	6093      	str	r3, [r2, #8]
}
 80024de:	e254      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11a      	bne.n	800252c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2308      	movs	r3, #8
 8002506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	2205      	movs	r2, #5
 8002518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f002 f8d0 	bl	80046ca <USB_HC_Halt>
}
 800252a:	e22e      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b10      	cmp	r3, #16
 8002540:	d140      	bne.n	80025c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	335c      	adds	r3, #92	; 0x5c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	2203      	movs	r2, #3
 8002564:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	333d      	adds	r3, #61	; 0x3d
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d112      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333c      	adds	r3, #60	; 0x3c
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333d      	adds	r3, #61	; 0x3d
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 f88d 	bl	80046ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2310      	movs	r3, #16
 80025c0:	6093      	str	r3, [r2, #8]
}
 80025c2:	e1e2      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b80      	cmp	r3, #128	; 0x80
 80025d8:	d164      	bne.n	80026a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d111      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	2206      	movs	r2, #6
 80025f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 f863 	bl	80046ca <USB_HC_Halt>
 8002604:	e044      	b.n	8002690 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	202c      	movs	r0, #44	; 0x2c
 800261e:	fb00 f303 	mul.w	r3, r0, r3
 8002622:	440b      	add	r3, r1
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	335c      	adds	r3, #92	; 0x5c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d920      	bls.n	800267e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	335c      	adds	r3, #92	; 0x5c
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3360      	adds	r3, #96	; 0x60
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	b2d9      	uxtb	r1, r3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	202c      	movs	r0, #44	; 0x2c
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f004 fbe6 	bl	8006e48 <HAL_HCD_HC_NotifyURBChange_Callback>
 800267c:	e008      	b.n	8002690 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	461a      	mov	r2, r3
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	6093      	str	r3, [r2, #8]
}
 80026a2:	e172      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d11b      	bne.n	80026f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3361      	adds	r3, #97	; 0x61
 80026ca:	2208      	movs	r2, #8
 80026cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fff6 	bl	80046ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f0:	6093      	str	r3, [r2, #8]
}
 80026f2:	e14a      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	f040 813f 	bne.w	800298a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3361      	adds	r3, #97	; 0x61
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d17d      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3360      	adds	r3, #96	; 0x60
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333f      	adds	r3, #63	; 0x3f
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d00a      	beq.n	800275c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333f      	adds	r3, #63	; 0x3f
 8002754:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002756:	2b03      	cmp	r3, #3
 8002758:	f040 8100 	bne.w	800295c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d113      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3355      	adds	r3, #85	; 0x55
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2d8      	uxtb	r0, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3355      	adds	r3, #85	; 0x55
 8002788:	4602      	mov	r2, r0
 800278a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 80e3 	bne.w	800295c <HCD_HC_OUT_IRQHandler+0x69c>
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	334c      	adds	r3, #76	; 0x4c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80d8 	beq.w	800295c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	334c      	adds	r3, #76	; 0x4c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	202c      	movs	r0, #44	; 0x2c
 80027c2:	fb00 f202 	mul.w	r2, r0, r2
 80027c6:	440a      	add	r2, r1
 80027c8:	3240      	adds	r2, #64	; 0x40
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	202c      	movs	r0, #44	; 0x2c
 80027d6:	fb00 f202 	mul.w	r2, r0, r2
 80027da:	440a      	add	r2, r1
 80027dc:	3240      	adds	r2, #64	; 0x40
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80b5 	beq.w	800295c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3355      	adds	r3, #85	; 0x55
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f083 0301 	eor.w	r3, r3, #1
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3355      	adds	r3, #85	; 0x55
 8002816:	4602      	mov	r2, r0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e09f      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d109      	bne.n	8002844 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3360      	adds	r3, #96	; 0x60
 800283e:	2202      	movs	r2, #2
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e08b      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3361      	adds	r3, #97	; 0x61
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d109      	bne.n	800286c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e077      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d109      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3360      	adds	r3, #96	; 0x60
 800288e:	2205      	movs	r2, #5
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e063      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3361      	adds	r3, #97	; 0x61
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d009      	beq.n	80028bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d14f      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	335c      	adds	r3, #92	; 0x5c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	202c      	movs	r0, #44	; 0x2c
 80028d4:	fb00 f303 	mul.w	r3, r0, r3
 80028d8:	440b      	add	r3, r1
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	335c      	adds	r3, #92	; 0x5c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d912      	bls.n	8002918 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3360      	adds	r3, #96	; 0x60
 8002912:	2204      	movs	r2, #4
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e021      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002940:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002948:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2302      	movs	r3, #2
 800296c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	b2d9      	uxtb	r1, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	202c      	movs	r0, #44	; 0x2c
 8002978:	fb00 f303 	mul.w	r3, r0, r3
 800297c:	4413      	add	r3, r2
 800297e:	3360      	adds	r3, #96	; 0x60
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f004 fa5f 	bl	8006e48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	0c5b      	lsrs	r3, r3, #17
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d004      	beq.n	80029d8 <HCD_RXQLVL_IRQHandler+0x46>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	f000 80a9 	beq.w	8002b28 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029d6:	e0aa      	b.n	8002b2e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80a6 	beq.w	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3344      	adds	r3, #68	; 0x44
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 809b 	beq.w	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3350      	adds	r3, #80	; 0x50
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	441a      	add	r2, r3
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	202c      	movs	r0, #44	; 0x2c
 8002a10:	fb00 f303 	mul.w	r3, r0, r3
 8002a14:	440b      	add	r3, r1
 8002a16:	334c      	adds	r3, #76	; 0x4c
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d87a      	bhi.n	8002b14 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3344      	adds	r3, #68	; 0x44
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	b292      	uxth	r2, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f001 f99e 	bl	8003d78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3344      	adds	r3, #68	; 0x44
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	441a      	add	r2, r3
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	202c      	movs	r0, #44	; 0x2c
 8002a56:	fb00 f303 	mul.w	r3, r0, r3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3344      	adds	r3, #68	; 0x44
 8002a5e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3350      	adds	r3, #80	; 0x50
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	441a      	add	r2, r3
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	202c      	movs	r0, #44	; 0x2c
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3350      	adds	r3, #80	; 0x50
 8002a82:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	0cdb      	lsrs	r3, r3, #19
 8002a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3340      	adds	r3, #64	; 0x40
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d13c      	bne.n	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d039      	beq.n	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ace:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3354      	adds	r3, #84	; 0x54
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2d8      	uxtb	r0, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3354      	adds	r3, #84	; 0x54
 8002b0e:	4602      	mov	r2, r0
 8002b10:	701a      	strb	r2, [r3, #0]
      break;
 8002b12:	e00b      	b.n	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3360      	adds	r3, #96	; 0x60
 8002b22:	2204      	movs	r2, #4
 8002b24:	701a      	strb	r2, [r3, #0]
      break;
 8002b26:	e001      	b.n	8002b2c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b28:	bf00      	nop
 8002b2a:	e000      	b.n	8002b2e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b2c:	bf00      	nop
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d10b      	bne.n	8002b86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f004 f949 	bl	8006e10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d132      	bne.n	8002bf6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f043 0308 	orr.w	r3, r3, #8
 8002b96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d126      	bne.n	8002bf0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d113      	bne.n	8002bd2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb4:	d106      	bne.n	8002bc4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2102      	movs	r1, #2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fa49 	bl	8004054 <USB_InitFSLSPClkSel>
 8002bc2:	e011      	b.n	8002be8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fa42 	bl	8004054 <USB_InitFSLSPClkSel>
 8002bd0:	e00a      	b.n	8002be8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d106      	bne.n	8002be8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002be0:	461a      	mov	r2, r3
 8002be2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002be6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f004 f93b 	bl	8006e64 <HAL_HCD_PortEnabled_Callback>
 8002bee:	e002      	b.n	8002bf6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f004 f945 	bl	8006e80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d103      	bne.n	8002c08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f043 0320 	orr.w	r3, r3, #32
 8002c06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e267      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d075      	beq.n	8002d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3a:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d00c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d112      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4b82      	ldr	r3, [pc, #520]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	4b7e      	ldr	r3, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05b      	beq.n	8002d24 <HAL_RCC_OscConfig+0x108>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d157      	bne.n	8002d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e242      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x74>
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xb0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x98>
 8002c9a:	4b70      	ldr	r3, [pc, #448]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6c      	ldr	r2, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xb0>
 8002cb4:	4b69      	ldr	r3, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a68      	ldr	r2, [pc, #416]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a65      	ldr	r2, [pc, #404]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f89c 	bl	8000e10 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f898 	bl	8000e10 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e207      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xc0>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f888 	bl	8000e10 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe f884 	bl	8000e10 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1f3      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0xe8>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d32:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x152>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e1c7      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4937      	ldr	r1, [pc, #220]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	e03a      	b.n	8002dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCC_OscConfig+0x244>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe f83d 	bl	8000e10 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f839 	bl	8000e10 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1a8      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4925      	ldr	r1, [pc, #148]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x244>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f81c 	bl	8000e10 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7fe f818 	bl	8000e10 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e187      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d036      	beq.n	8002e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCC_OscConfig+0x248>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fd fffc 	bl	8000e10 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7fd fff8 	bl	8000e10 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e167      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x200>
 8002e3a:	e01b      	b.n	8002e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x248>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fd ffe5 	bl	8000e10 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	e00e      	b.n	8002e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fd ffe1 	bl	8000e10 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d907      	bls.n	8002e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e150      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ea      	bne.n	8002e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8097 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4b81      	ldr	r3, [pc, #516]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b7d      	ldr	r3, [pc, #500]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a7c      	ldr	r2, [pc, #496]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b77      	ldr	r3, [pc, #476]	; (8003090 <HAL_RCC_OscConfig+0x474>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b74      	ldr	r3, [pc, #464]	; (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a73      	ldr	r2, [pc, #460]	; (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fd ffa1 	bl	8000e10 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fd ff9d 	bl	8000e10 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e10c      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2ea>
 8002ef8:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a63      	ldr	r2, [pc, #396]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x324>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x30c>
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a5e      	ldr	r2, [pc, #376]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0x324>
 8002f28:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	4b55      	ldr	r3, [pc, #340]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a54      	ldr	r2, [pc, #336]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 0304 	bic.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fd ff62 	bl	8000e10 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fd ff5e 	bl	8000e10 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0cb      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	4b49      	ldr	r3, [pc, #292]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ee      	beq.n	8002f50 <HAL_RCC_OscConfig+0x334>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fd ff4c 	bl	8000e10 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fd ff48 	bl	8000e10 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0b5      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	4b3e      	ldr	r3, [pc, #248]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ee      	bne.n	8002f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4a38      	ldr	r2, [pc, #224]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a1 	beq.w	80030fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d05c      	beq.n	8003080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d141      	bne.n	8003052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fce:	4b31      	ldr	r3, [pc, #196]	; (8003094 <HAL_RCC_OscConfig+0x478>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ff1c 	bl	8000e10 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fd ff18 	bl	8000e10 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e087      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	491b      	ldr	r1, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x478>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fd fef1 	bl	8000e10 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fd feed 	bl	8000e10 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e05c      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x416>
 8003050:	e054      	b.n	80030fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fd feda 	bl	8000e10 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fd fed6 	bl	8000e10 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e045      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x444>
 800307e:	e03d      	b.n	80030fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e038      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000
 8003094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d028      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d121      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11a      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d111      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0cc      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d90c      	bls.n	8003148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d044      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d119      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e067      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4934      	ldr	r1, [pc, #208]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fd fe08 	bl	8000e10 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fd fe04 	bl	8000e10 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e04f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d20c      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f821 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	490a      	ldr	r1, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fd68 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08007ad0 	.word	0x08007ad0
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b090      	sub	sp, #64	; 0x40
 80032de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	2300      	movs	r3, #0
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f0:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d00d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x40>
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	f200 80a1 	bhi.w	8003444 <HAL_RCC_GetSysClockFreq+0x16c>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x34>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x3a>
 800330a:	e09b      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_GetSysClockFreq+0x184>)
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003310:	e09b      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_GetSysClockFreq+0x188>)
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003316:	e098      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d028      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	2200      	movs	r2, #0
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	627a      	str	r2, [r7, #36]	; 0x24
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003340:	2100      	movs	r1, #0
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_GetSysClockFreq+0x188>)
 8003344:	fb03 f201 	mul.w	r2, r3, r1
 8003348:	2300      	movs	r3, #0
 800334a:	fb00 f303 	mul.w	r3, r0, r3
 800334e:	4413      	add	r3, r2
 8003350:	4a43      	ldr	r2, [pc, #268]	; (8003460 <HAL_RCC_GetSysClockFreq+0x188>)
 8003352:	fba0 1202 	umull	r1, r2, r0, r2
 8003356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003358:	460a      	mov	r2, r1
 800335a:	62ba      	str	r2, [r7, #40]	; 0x28
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	4413      	add	r3, r2
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003364:	2200      	movs	r2, #0
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	61fa      	str	r2, [r7, #28]
 800336a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003372:	f7fc ff2f 	bl	80001d4 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4613      	mov	r3, r2
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337e:	e053      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	2200      	movs	r2, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	617a      	str	r2, [r7, #20]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003392:	f04f 0b00 	mov.w	fp, #0
 8003396:	4652      	mov	r2, sl
 8003398:	465b      	mov	r3, fp
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	0159      	lsls	r1, r3, #5
 80033a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a8:	0150      	lsls	r0, r2, #5
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	ebb2 080a 	subs.w	r8, r2, sl
 80033b2:	eb63 090b 	sbc.w	r9, r3, fp
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ca:	ebb2 0408 	subs.w	r4, r2, r8
 80033ce:	eb63 0509 	sbc.w	r5, r3, r9
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	00eb      	lsls	r3, r5, #3
 80033dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e0:	00e2      	lsls	r2, r4, #3
 80033e2:	4614      	mov	r4, r2
 80033e4:	461d      	mov	r5, r3
 80033e6:	eb14 030a 	adds.w	r3, r4, sl
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	eb45 030b 	adc.w	r3, r5, fp
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033fe:	4629      	mov	r1, r5
 8003400:	028b      	lsls	r3, r1, #10
 8003402:	4621      	mov	r1, r4
 8003404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003408:	4621      	mov	r1, r4
 800340a:	028a      	lsls	r2, r1, #10
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	2200      	movs	r2, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800341c:	f7fc feda 	bl	80001d4 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_GetSysClockFreq+0x180>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	3301      	adds	r3, #1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003442:	e002      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetSysClockFreq+0x184>)
 8003446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800344c:	4618      	mov	r0, r3
 800344e:	3740      	adds	r7, #64	; 0x40
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400
 8003460:	017d7840 	.word	0x017d7840

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_RCC_GetHCLKFreq+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003480:	f7ff fff0 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	08007ae0 	.word	0x08007ae0

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a8:	f7ff ffdc 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	0b5b      	lsrs	r3, r3, #13
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	08007ae0 	.word	0x08007ae0

080034cc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	460b      	mov	r3, r1
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e05f      	b.n	80035a4 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fd fb35 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2224      	movs	r2, #36	; 0x24
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003514:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f848 	bl	80035ac <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800352a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800353a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020f 	bic.w	r2, r2, #15
 800354a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	7afa      	ldrb	r2, [r7, #11]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	430a      	orrs	r2, r1
 800357a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800358a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b0c0      	sub	sp, #256	; 0x100
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	68d9      	ldr	r1, [r3, #12]
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	ea40 0301 	orr.w	r3, r0, r1
 80035d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003604:	f021 010c 	bic.w	r1, r1, #12
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003612:	430b      	orrs	r3, r1
 8003614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	6999      	ldr	r1, [r3, #24]
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	ea40 0301 	orr.w	r3, r0, r1
 8003632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b8f      	ldr	r3, [pc, #572]	; (8003878 <UART_SetConfig+0x2cc>)
 800363c:	429a      	cmp	r2, r3
 800363e:	d005      	beq.n	800364c <UART_SetConfig+0xa0>
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b8d      	ldr	r3, [pc, #564]	; (800387c <UART_SetConfig+0x2d0>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d104      	bne.n	8003656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7ff ff2a 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8003650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003654:	e003      	b.n	800365e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003656:	f7ff ff11 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 800365a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	f040 810c 	bne.w	8003884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800366c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800367a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800367e:	4622      	mov	r2, r4
 8003680:	462b      	mov	r3, r5
 8003682:	1891      	adds	r1, r2, r2
 8003684:	65b9      	str	r1, [r7, #88]	; 0x58
 8003686:	415b      	adcs	r3, r3
 8003688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800368a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800368e:	4621      	mov	r1, r4
 8003690:	eb12 0801 	adds.w	r8, r2, r1
 8003694:	4629      	mov	r1, r5
 8003696:	eb43 0901 	adc.w	r9, r3, r1
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ae:	4690      	mov	r8, r2
 80036b0:	4699      	mov	r9, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	eb18 0303 	adds.w	r3, r8, r3
 80036b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036bc:	462b      	mov	r3, r5
 80036be:	eb49 0303 	adc.w	r3, r9, r3
 80036c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036da:	460b      	mov	r3, r1
 80036dc:	18db      	adds	r3, r3, r3
 80036de:	653b      	str	r3, [r7, #80]	; 0x50
 80036e0:	4613      	mov	r3, r2
 80036e2:	eb42 0303 	adc.w	r3, r2, r3
 80036e6:	657b      	str	r3, [r7, #84]	; 0x54
 80036e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036f0:	f7fc fd70 	bl	80001d4 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4b61      	ldr	r3, [pc, #388]	; (8003880 <UART_SetConfig+0x2d4>)
 80036fa:	fba3 2302 	umull	r2, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	011c      	lsls	r4, r3, #4
 8003702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800370c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	1891      	adds	r1, r2, r2
 800371a:	64b9      	str	r1, [r7, #72]	; 0x48
 800371c:	415b      	adcs	r3, r3
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003724:	4641      	mov	r1, r8
 8003726:	eb12 0a01 	adds.w	sl, r2, r1
 800372a:	4649      	mov	r1, r9
 800372c:	eb43 0b01 	adc.w	fp, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003744:	4692      	mov	sl, r2
 8003746:	469b      	mov	fp, r3
 8003748:	4643      	mov	r3, r8
 800374a:	eb1a 0303 	adds.w	r3, sl, r3
 800374e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003752:	464b      	mov	r3, r9
 8003754:	eb4b 0303 	adc.w	r3, fp, r3
 8003758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800376c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
 800377e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003786:	f7fc fd25 	bl	80001d4 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4611      	mov	r1, r2
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <UART_SetConfig+0x2d4>)
 8003792:	fba3 2301 	umull	r2, r3, r3, r1
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2264      	movs	r2, #100	; 0x64
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	1acb      	subs	r3, r1, r3
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <UART_SetConfig+0x2d4>)
 80037a8:	fba3 2302 	umull	r2, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b4:	441c      	add	r4, r3
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d0:	415b      	adcs	r3, r3
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037d8:	4641      	mov	r1, r8
 80037da:	1851      	adds	r1, r2, r1
 80037dc:	6339      	str	r1, [r7, #48]	; 0x30
 80037de:	4649      	mov	r1, r9
 80037e0:	414b      	adcs	r3, r1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037f0:	4659      	mov	r1, fp
 80037f2:	00cb      	lsls	r3, r1, #3
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fa:	4651      	mov	r1, sl
 80037fc:	00ca      	lsls	r2, r1, #3
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	4603      	mov	r3, r0
 8003804:	4642      	mov	r2, r8
 8003806:	189b      	adds	r3, r3, r2
 8003808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800380c:	464b      	mov	r3, r9
 800380e:	460a      	mov	r2, r1
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800382c:	460b      	mov	r3, r1
 800382e:	18db      	adds	r3, r3, r3
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
 8003832:	4613      	mov	r3, r2
 8003834:	eb42 0303 	adc.w	r3, r2, r3
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800383e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003842:	f7fc fcc7 	bl	80001d4 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <UART_SetConfig+0x2d4>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <UART_SetConfig+0x2d4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 0207 	and.w	r2, r3, #7
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4422      	add	r2, r4
 8003872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003874:	e105      	b.n	8003a82 <UART_SetConfig+0x4d6>
 8003876:	bf00      	nop
 8003878:	40011000 	.word	0x40011000
 800387c:	40011400 	.word	0x40011400
 8003880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800388e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	1891      	adds	r1, r2, r2
 800389c:	6239      	str	r1, [r7, #32]
 800389e:	415b      	adcs	r3, r3
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038a6:	4641      	mov	r1, r8
 80038a8:	1854      	adds	r4, r2, r1
 80038aa:	4649      	mov	r1, r9
 80038ac:	eb43 0501 	adc.w	r5, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038cc:	464b      	mov	r3, r9
 80038ce:	eb45 0303 	adc.w	r3, r5, r3
 80038d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038f2:	4629      	mov	r1, r5
 80038f4:	008b      	lsls	r3, r1, #2
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fc:	4621      	mov	r1, r4
 80038fe:	008a      	lsls	r2, r1, #2
 8003900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003904:	f7fc fc66 	bl	80001d4 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4b60      	ldr	r3, [pc, #384]	; (8003a90 <UART_SetConfig+0x4e4>)
 800390e:	fba3 2302 	umull	r2, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011c      	lsls	r4, r3, #4
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	61b9      	str	r1, [r7, #24]
 8003930:	415b      	adcs	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003938:	4641      	mov	r1, r8
 800393a:	1851      	adds	r1, r2, r1
 800393c:	6139      	str	r1, [r7, #16]
 800393e:	4649      	mov	r1, r9
 8003940:	414b      	adcs	r3, r1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003950:	4659      	mov	r1, fp
 8003952:	00cb      	lsls	r3, r1, #3
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395a:	4651      	mov	r1, sl
 800395c:	00ca      	lsls	r2, r1, #3
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	4603      	mov	r3, r0
 8003964:	4642      	mov	r2, r8
 8003966:	189b      	adds	r3, r3, r2
 8003968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800396c:	464b      	mov	r3, r9
 800396e:	460a      	mov	r2, r1
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	67bb      	str	r3, [r7, #120]	; 0x78
 8003982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003990:	4649      	mov	r1, r9
 8003992:	008b      	lsls	r3, r1, #2
 8003994:	4641      	mov	r1, r8
 8003996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800399a:	4641      	mov	r1, r8
 800399c:	008a      	lsls	r2, r1, #2
 800399e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039a2:	f7fc fc17 	bl	80001d4 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <UART_SetConfig+0x4e4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <UART_SetConfig+0x4e4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	441c      	add	r4, r3
 80039cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d0:	2200      	movs	r2, #0
 80039d2:	673b      	str	r3, [r7, #112]	; 0x70
 80039d4:	677a      	str	r2, [r7, #116]	; 0x74
 80039d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039da:	4642      	mov	r2, r8
 80039dc:	464b      	mov	r3, r9
 80039de:	1891      	adds	r1, r2, r2
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	415b      	adcs	r3, r3
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ea:	4641      	mov	r1, r8
 80039ec:	1851      	adds	r1, r2, r1
 80039ee:	6039      	str	r1, [r7, #0]
 80039f0:	4649      	mov	r1, r9
 80039f2:	414b      	adcs	r3, r1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a02:	4659      	mov	r1, fp
 8003a04:	00cb      	lsls	r3, r1, #3
 8003a06:	4651      	mov	r1, sl
 8003a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	00ca      	lsls	r2, r1, #3
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	4642      	mov	r2, r8
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	460a      	mov	r2, r1
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a30:	667a      	str	r2, [r7, #100]	; 0x64
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a3e:	4649      	mov	r1, r9
 8003a40:	008b      	lsls	r3, r1, #2
 8003a42:	4641      	mov	r1, r8
 8003a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a48:	4641      	mov	r1, r8
 8003a4a:	008a      	lsls	r2, r1, #2
 8003a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a50:	f7fc fbc0 	bl	80001d4 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <UART_SetConfig+0x4e4>)
 8003a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	; 0x32
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <UART_SetConfig+0x4e4>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4422      	add	r2, r4
 8003a80:	609a      	str	r2, [r3, #8]
}
 8003a82:	bf00      	nop
 8003a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	51eb851f 	.word	0x51eb851f

08003a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	f107 001c 	add.w	r0, r7, #28
 8003aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d122      	bne.n	8003af2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9c0 	bl	8003e6c <USB_CoreReset>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e01a      	b.n	8003b28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9b4 	bl	8003e6c <USB_CoreReset>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
 8003b1a:	e005      	b.n	8003b28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10b      	bne.n	8003b46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f043 0206 	orr.w	r2, r3, #6
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b52:	b004      	add	sp, #16
 8003b54:	4770      	bx	lr

08003b56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f023 0201 	bic.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d115      	bne.n	8003be8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fd f92d 	bl	8000e28 <HAL_Delay>
      ms++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f93a 	bl	8003e4e <USB_GetMode>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d01e      	beq.n	8003c1e <USB_SetCurrentMode+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b31      	cmp	r3, #49	; 0x31
 8003be4:	d9f0      	bls.n	8003bc8 <USB_SetCurrentMode+0x2e>
 8003be6:	e01a      	b.n	8003c1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7fd f914 	bl	8000e28 <HAL_Delay>
      ms++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f921 	bl	8003e4e <USB_GetMode>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <USB_SetCurrentMode+0x84>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b31      	cmp	r3, #49	; 0x31
 8003c16:	d9f0      	bls.n	8003bfa <USB_SetCurrentMode+0x60>
 8003c18:	e001      	b.n	8003c1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e005      	b.n	8003c2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b32      	cmp	r3, #50	; 0x32
 8003c22:	d101      	bne.n	8003c28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <USB_FlushTxFifo+0x64>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e01b      	b.n	8003c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	daf2      	bge.n	8003c42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	019b      	lsls	r3, r3, #6
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <USB_FlushTxFifo+0x64>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e006      	b.n	8003c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d0f0      	beq.n	8003c6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	00030d40 	.word	0x00030d40

08003c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <USB_FlushRxFifo+0x5c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e018      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	daf2      	bge.n	8003ca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <USB_FlushRxFifo+0x5c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d0f0      	beq.n	8003ccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	00030d40 	.word	0x00030d40

08003cfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	; 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	71fb      	strb	r3, [r7, #7]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d123      	bne.n	8003d6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d22:	88bb      	ldrh	r3, [r7, #4]
 8003d24:	3303      	adds	r3, #3
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e018      	b.n	8003d62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	031a      	lsls	r2, r3, #12
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3e2      	bcc.n	8003d30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3724      	adds	r7, #36	; 0x24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	e014      	b.n	8003dce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	601a      	str	r2, [r3, #0]
    pDest++;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	3301      	adds	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	3301      	adds	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3e6      	bcc.n	8003da4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003dd6:	8bfb      	ldrh	r3, [r7, #30]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01e      	beq.n	8003e1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	461a      	mov	r2, r3
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	701a      	strb	r2, [r3, #0]
      i++;
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	3301      	adds	r3, #1
 8003e06:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e0e:	8bfb      	ldrh	r3, [r7, #30]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e14:	8bfb      	ldrh	r3, [r7, #30]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ea      	bne.n	8003df0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	372c      	adds	r7, #44	; 0x2c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <USB_CoreReset+0x64>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e01b      	b.n	8003ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	daf2      	bge.n	8003e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <USB_CoreReset+0x64>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d0f0      	beq.n	8003ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	00030d40 	.word	0x00030d40

08003ed4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d018      	beq.n	8003f5c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10a      	bne.n	8003f46 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3e:	f043 0304 	orr.w	r3, r3, #4
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e014      	b.n	8003f70 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e009      	b.n	8003f70 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f70:	2110      	movs	r1, #16
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fe5e 	bl	8003c34 <USB_FlushTxFifo>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fe8a 	bl	8003c9c <USB_FlushRxFifo>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e015      	b.n	8003fc4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3e5      	bcc.n	8003f98 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <USB_HostInit+0x16c>)
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a13      	ldr	r2, [pc, #76]	; (8004044 <USB_HostInit+0x170>)
 8003ff8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ffc:	e009      	b.n	8004012 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <USB_HostInit+0x174>)
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <USB_HostInit+0x178>)
 800400e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <USB_HostInit+0x17c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004030:	7dfb      	ldrb	r3, [r7, #23]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800403c:	b004      	add	sp, #16
 800403e:	4770      	bx	lr
 8004040:	01000200 	.word	0x01000200
 8004044:	00e00300 	.word	0x00e00300
 8004048:	00600080 	.word	0x00600080
 800404c:	004000e0 	.word	0x004000e0
 8004050:	a3200008 	.word	0xa3200008

08004054 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d107      	bne.n	80040a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409c:	461a      	mov	r2, r3
 800409e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040a2:	6053      	str	r3, [r2, #4]
 80040a4:	e009      	b.n	80040ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d106      	bne.n	80040ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b2:	461a      	mov	r2, r3
 80040b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80040b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80040f8:	2064      	movs	r0, #100	; 0x64
 80040fa:	f7fc fe95 	bl	8000e28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800410c:	200a      	movs	r0, #10
 800410e:	f7fc fe8b 	bl	8000e28 <HAL_Delay>

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004140:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <USB_DriveVbus+0x44>
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d106      	bne.n	8004160 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800415a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800415e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d109      	bne.n	8004180 <USB_DriveVbus+0x64>
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800417a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c5b      	lsrs	r3, r3, #17
 80041ac:	f003 0303 	and.w	r3, r3, #3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	b29b      	uxth	r3, r3
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	70fb      	strb	r3, [r7, #3]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70bb      	strb	r3, [r7, #2]
 80041f6:	4613      	mov	r3, r2
 80041f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800421a:	2b03      	cmp	r3, #3
 800421c:	d87e      	bhi.n	800431c <USB_HC_Init+0x13c>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <USB_HC_Init+0x44>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004235 	.word	0x08004235
 8004228:	080042df 	.word	0x080042df
 800422c:	08004235 	.word	0x08004235
 8004230:	080042a1 	.word	0x080042a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	461a      	mov	r2, r3
 8004242:	f240 439d 	movw	r3, #1181	; 0x49d
 8004246:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004248:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800424c:	2b00      	cmp	r3, #0
 800424e:	da10      	bge.n	8004272 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	440a      	add	r2, r1
 8004266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004270:	e057      	b.n	8004322 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d051      	beq.n	8004322 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	440a      	add	r2, r1
 8004294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004298:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800429c:	60d3      	str	r3, [r2, #12]
      break;
 800429e:	e040      	b.n	8004322 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	461a      	mov	r2, r3
 80042ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80042b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da34      	bge.n	8004326 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80042dc:	e023      	b.n	8004326 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	f240 2325 	movw	r3, #549	; 0x225
 80042f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da17      	bge.n	800432a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	440a      	add	r2, r1
 8004310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004314:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004318:	60d3      	str	r3, [r2, #12]
      }
      break;
 800431a:	e006      	b.n	800432a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
      break;
 8004320:	e004      	b.n	800432c <USB_HC_Init+0x14c>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <USB_HC_Init+0x14c>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <USB_HC_Init+0x14c>
      break;
 800432a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	440a      	add	r2, r1
 8004342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	2101      	movs	r1, #1
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004366:	4313      	orrs	r3, r2
 8004368:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da03      	bge.n	8004386 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e001      	b.n	800438a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff feff 	bl	800418e <USB_GetHostSpeed>
 8004390:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004396:	2b02      	cmp	r3, #2
 8004398:	d106      	bne.n	80043a8 <USB_HC_Init+0x1c8>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d003      	beq.n	80043a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80043a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e001      	b.n	80043ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	059b      	lsls	r3, r3, #22
 80043b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80043b4:	78bb      	ldrb	r3, [r7, #2]
 80043b6:	02db      	lsls	r3, r3, #11
 80043b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043c2:	049b      	lsls	r3, r3, #18
 80043c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80043c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80043cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	0159      	lsls	r1, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	440b      	add	r3, r1
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80043ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d003      	beq.n	80043fa <USB_HC_Init+0x21a>
 80043f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10f      	bne.n	800441a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004418:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800441a:	7ffb      	ldrb	r3, [r7, #31]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	; 0x30
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800443c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004440:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02d      	beq.n	80044aa <USB_HC_StartXfer+0x86>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d129      	bne.n	80044aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d117      	bne.n	800448c <USB_HC_StartXfer+0x68>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	79db      	ldrb	r3, [r3, #7]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <USB_HC_StartXfer+0x48>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	79db      	ldrb	r3, [r3, #7]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d10f      	bne.n	800448c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	4413      	add	r3, r2
 8004474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	440a      	add	r2, r1
 8004482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <USB_HC_StartXfer+0x86>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	795b      	ldrb	r3, [r3, #5]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d107      	bne.n	80044aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fa0f 	bl	80048c4 <USB_DoPing>
      return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e0f8      	b.n	800469c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d018      	beq.n	80044e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	8912      	ldrh	r2, [r2, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	3b01      	subs	r3, #1
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	8912      	ldrh	r2, [r2, #8]
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80044c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044ca:	8b7b      	ldrh	r3, [r7, #26]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d90b      	bls.n	80044e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80044d0:	8b7b      	ldrh	r3, [r7, #26]
 80044d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80044d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	8912      	ldrh	r2, [r2, #8]
 80044da:	fb03 f202 	mul.w	r2, r3, r2
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	611a      	str	r2, [r3, #16]
 80044e2:	e001      	b.n	80044e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80044f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	8912      	ldrh	r2, [r2, #8]
 80044f6:	fb03 f202 	mul.w	r2, r3, r2
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	e003      	b.n	8004508 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004512:	04d9      	lsls	r1, r3, #19
 8004514:	4b63      	ldr	r3, [pc, #396]	; (80046a4 <USB_HC_StartXfer+0x280>)
 8004516:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004518:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	7a9b      	ldrb	r3, [r3, #10]
 800451e:	075b      	lsls	r3, r3, #29
 8004520:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	0148      	lsls	r0, r1, #5
 8004528:	6a39      	ldr	r1, [r7, #32]
 800452a:	4401      	add	r1, r0
 800452c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004530:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004532:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68d9      	ldr	r1, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	460a      	mov	r2, r1
 800454c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	440a      	add	r2, r1
 800457c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004580:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004584:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	7e7b      	ldrb	r3, [r7, #25]
 8004596:	075b      	lsls	r3, r3, #29
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	0148      	lsls	r0, r1, #5
 800459c:	6a39      	ldr	r1, [r7, #32]
 800459e:	4401      	add	r1, r0
 80045a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	78db      	ldrb	r3, [r3, #3]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e003      	b.n	80045da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ee:	461a      	mov	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e04e      	b.n	800469c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	78db      	ldrb	r3, [r3, #3]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d149      	bne.n	800469a <USB_HC_StartXfer+0x276>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d045      	beq.n	800469a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	79db      	ldrb	r3, [r3, #7]
 8004612:	2b03      	cmp	r3, #3
 8004614:	d830      	bhi.n	8004678 <USB_HC_StartXfer+0x254>
 8004616:	a201      	add	r2, pc, #4	; (adr r2, 800461c <USB_HC_StartXfer+0x1f8>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	0800462d 	.word	0x0800462d
 8004620:	08004651 	.word	0x08004651
 8004624:	0800462d 	.word	0x0800462d
 8004628:	08004651 	.word	0x08004651
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	3303      	adds	r3, #3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004636:	8afa      	ldrh	r2, [r7, #22]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	b29b      	uxth	r3, r3
 800463e:	429a      	cmp	r2, r3
 8004640:	d91c      	bls.n	800467c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	619a      	str	r2, [r3, #24]
        }
        break;
 800464e:	e015      	b.n	800467c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	3303      	adds	r3, #3
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800465a:	8afa      	ldrh	r2, [r7, #22]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	b29b      	uxth	r3, r3
 8004666:	429a      	cmp	r2, r3
 8004668:	d90a      	bls.n	8004680 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	619a      	str	r2, [r3, #24]
        }
        break;
 8004676:	e003      	b.n	8004680 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004678:	bf00      	nop
 800467a:	e002      	b.n	8004682 <USB_HC_StartXfer+0x25e>
        break;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <USB_HC_StartXfer+0x25e>
        break;
 8004680:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	785a      	ldrb	r2, [r3, #1]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	b29b      	uxth	r3, r3
 8004690:	2000      	movs	r0, #0
 8004692:	9000      	str	r0, [sp, #0]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fb31 	bl	8003cfc <USB_WritePacket>
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3728      	adds	r7, #40	; 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	1ff80000 	.word	0x1ff80000

080046a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	b29b      	uxth	r3, r3
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b089      	sub	sp, #36	; 0x24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0fdb      	lsrs	r3, r3, #31
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b20      	cmp	r3, #32
 8004718:	d104      	bne.n	8004724 <USB_HC_Halt+0x5a>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e0c8      	b.n	80048b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <USB_HC_Halt+0x66>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d163      	bne.n	80047f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	440a      	add	r2, r1
 8004746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 80ab 	bne.w	80048b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d133      	bne.n	80047d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	440a      	add	r2, r1
 8004780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004788:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b6:	d81d      	bhi.n	80047f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ce:	d0ec      	beq.n	80047aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047d0:	e070      	b.n	80048b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047f2:	e05f      	b.n	80048b4 <USB_HC_Halt+0x1ea>
            break;
 80047f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047f6:	e05d      	b.n	80048b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004816:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d133      	bne.n	8004890 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	440a      	add	r2, r1
 800483e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004846:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004866:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004874:	d81d      	bhi.n	80048b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488c:	d0ec      	beq.n	8004868 <USB_HC_Halt+0x19e>
 800488e:	e011      	b.n	80048b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e000      	b.n	80048b4 <USB_HC_Halt+0x1ea>
          break;
 80048b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80048d8:	2301      	movs	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	04da      	lsls	r2, r3, #19
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <USB_DoPing+0x74>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800490c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004914:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	1ff80000 	.word	0x1ff80000

0800493c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff f911 	bl	8003b78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004956:	2110      	movs	r1, #16
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff f96b 	bl	8003c34 <USB_FlushTxFifo>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff f997 	bl	8003c9c <USB_FlushRxFifo>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e01f      	b.n	80049be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004994:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800499c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	461a      	mov	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9dc      	bls.n	800497e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	e034      	b.n	8004a34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a10:	d80c      	bhi.n	8004a2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a28:	d0ec      	beq.n	8004a04 <USB_StopHost+0xc8>
 8004a2a:	e000      	b.n	8004a2e <USB_StopHost+0xf2>
        break;
 8004a2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d9c7      	bls.n	80049ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a40:	461a      	mov	r2, r3
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff f880 	bl	8003b56 <USB_EnableGlobalInt>

  return ret;
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004a74:	2302      	movs	r3, #2
 8004a76:	e029      	b.n	8004acc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	79fa      	ldrb	r2, [r7, #7]
 8004a7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f81f 	bl	8004ad4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f002 f9e9 	bl	8006e9c <USBH_LL_Init>

  return USBH_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e009      	b.n	8004afa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	33e0      	adds	r3, #224	; 0xe0
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	2200      	movs	r2, #0
 8004af2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b0f      	cmp	r3, #15
 8004afe:	d9f2      	bls.n	8004ae6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e009      	b.n	8004b1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b20:	d3f1      	bcc.n	8004b06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2240      	movs	r2, #64	; 0x40
 8004b46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d016      	beq.n	8004bbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10e      	bne.n	8004bb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004ba0:	1c59      	adds	r1, r3, #1
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	33de      	adds	r3, #222	; 0xde
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e004      	b.n	8004bc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e001      	b.n	8004bc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d204      	bcs.n	8004bf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004bf4:	e001      	b.n	8004bfa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	70fb      	strb	r3, [r7, #3]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70bb      	strb	r3, [r7, #2]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004c30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004c32:	e025      	b.n	8004c80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	221a      	movs	r2, #26
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	3302      	adds	r3, #2
 8004c44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	795b      	ldrb	r3, [r3, #5]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d002      	beq.n	8004c56 <USBH_FindInterface+0x4e>
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	2bff      	cmp	r3, #255	; 0xff
 8004c54:	d111      	bne.n	8004c7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004c5a:	78ba      	ldrb	r2, [r7, #2]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d002      	beq.n	8004c66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c60:	78bb      	ldrb	r3, [r7, #2]
 8004c62:	2bff      	cmp	r3, #255	; 0xff
 8004c64:	d109      	bne.n	8004c7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004c6a:	787a      	ldrb	r2, [r7, #1]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d002      	beq.n	8004c76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004c70:	787b      	ldrb	r3, [r7, #1]
 8004c72:	2bff      	cmp	r3, #255	; 0xff
 8004c74:	d101      	bne.n	8004c7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	e006      	b.n	8004c88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d9d6      	bls.n	8004c34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004c86:	23ff      	movs	r3, #255	; 0xff
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f002 f939 	bl	8006f14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f002 fa52 	bl	800714e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af04      	add	r7, sp, #16
 8004cba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b0b      	cmp	r3, #11
 8004cde:	f200 81be 	bhi.w	800505e <USBH_Process+0x3aa>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <USBH_Process+0x34>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d4b 	.word	0x08004d4b
 8004cf0:	08004db3 	.word	0x08004db3
 8004cf4:	08004ff9 	.word	0x08004ff9
 8004cf8:	0800505f 	.word	0x0800505f
 8004cfc:	08004e57 	.word	0x08004e57
 8004d00:	08004f9f 	.word	0x08004f9f
 8004d04:	08004e8d 	.word	0x08004e8d
 8004d08:	08004ead 	.word	0x08004ead
 8004d0c:	08004ecd 	.word	0x08004ecd
 8004d10:	08004f11 	.word	0x08004f11
 8004d14:	08004fe1 	.word	0x08004fe1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 819e 	beq.w	8005062 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004d2c:	20c8      	movs	r0, #200	; 0xc8
 8004d2e:	f002 fa4c 	bl	80071ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f002 f94b 	bl	8006fce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004d48:	e18b      	b.n	8005062 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004d62:	e18d      	b.n	8005080 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6e:	d914      	bls.n	8004d9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d903      	bls.n	8004d92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	220d      	movs	r2, #13
 8004d8e:	701a      	strb	r2, [r3, #0]
      break;
 8004d90:	e176      	b.n	8005080 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
      break;
 8004d98:	e172      	b.n	8005080 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004da0:	f103 020a 	add.w	r2, r3, #10
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004daa:	200a      	movs	r0, #10
 8004dac:	f002 fa0d 	bl	80071ca <USBH_Delay>
      break;
 8004db0:	e166      	b.n	8005080 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004dc8:	2064      	movs	r0, #100	; 0x64
 8004dca:	f002 f9fe 	bl	80071ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f002 f8d6 	bl	8006f80 <USBH_LL_GetSpeed>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2205      	movs	r2, #5
 8004de2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004de4:	2100      	movs	r1, #0
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fee1 	bl	8006bae <USBH_AllocPipe>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f001 fed9 	bl	8006bae <USBH_AllocPipe>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7919      	ldrb	r1, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	9202      	str	r2, [sp, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	9201      	str	r2, [sp, #4]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4603      	mov	r3, r0
 8004e24:	2280      	movs	r2, #128	; 0x80
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 fe92 	bl	8006b50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7959      	ldrb	r1, [r3, #5]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004e40:	b292      	uxth	r2, r2
 8004e42:	9202      	str	r2, [sp, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 fe7e 	bl	8006b50 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e54:	e114      	b.n	8005080 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f918 	bl	800508c <USBH_HandleEnum>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004e60:	7bbb      	ldrb	r3, [r7, #14]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80fe 	bne.w	8005066 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d103      	bne.n	8004e84 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004e82:	e0f0      	b.n	8005066 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2207      	movs	r2, #7
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e0ec      	b.n	8005066 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80e9 	beq.w	800506a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8004eaa:	e0de      	b.n	800506a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fc2c 	bl	8005714 <USBH_SetCfg>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 80d5 	bne.w	800506e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2209      	movs	r2, #9
 8004ec8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004eca:	e0d0      	b.n	800506e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8004eda:	2101      	movs	r1, #1
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fc3c 	bl	800575a <USBH_SetFeature>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	220a      	movs	r2, #10
 8004ef2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004ef4:	e0bd      	b.n	8005072 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8004ef6:	7bbb      	ldrb	r3, [r7, #14]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	f040 80b9 	bne.w	8005072 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	220a      	movs	r2, #10
 8004f04:	701a      	strb	r2, [r3, #0]
      break;
 8004f06:	e0b4      	b.n	8005072 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	220a      	movs	r2, #10
 8004f0c:	701a      	strb	r2, [r3, #0]
      break;
 8004f0e:	e0b0      	b.n	8005072 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80ad 	beq.w	8005076 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e016      	b.n	8004f58 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	32de      	adds	r2, #222	; 0xde
 8004f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f34:	791a      	ldrb	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d108      	bne.n	8004f52 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	32de      	adds	r2, #222	; 0xde
 8004f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004f50:	e005      	b.n	8004f5e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	3301      	adds	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0e5      	beq.n	8004f2a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d016      	beq.n	8004f96 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2206      	movs	r2, #6
 8004f7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f86:	2103      	movs	r1, #3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004f8c:	e073      	b.n	8005076 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	220d      	movs	r2, #13
 8004f92:	701a      	strb	r2, [r3, #0]
      break;
 8004f94:	e06f      	b.n	8005076 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	220d      	movs	r2, #13
 8004f9a:	701a      	strb	r2, [r3, #0]
      break;
 8004f9c:	e06b      	b.n	8005076 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	220b      	movs	r2, #11
 8004fc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004fc6:	e058      	b.n	800507a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d154      	bne.n	800507a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	220d      	movs	r2, #13
 8004fd4:	701a      	strb	r2, [r3, #0]
      break;
 8004fd6:	e050      	b.n	800507a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	220d      	movs	r2, #13
 8004fdc:	701a      	strb	r2, [r3, #0]
      break;
 8004fde:	e04c      	b.n	800507a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d049      	beq.n	800507e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
      }
      break;
 8004ff6:	e042      	b.n	800507e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fd67 	bl	8004ad4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005034:	2105      	movs	r1, #5
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fe20 	bl	8004c94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005054:	e014      	b.n	8005080 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 ff5c 	bl	8006f14 <USBH_LL_Start>
      break;
 800505c:	e010      	b.n	8005080 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800505e:	bf00      	nop
 8005060:	e00e      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 8005062:	bf00      	nop
 8005064:	e00c      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 8005066:	bf00      	nop
 8005068:	e00a      	b.n	8005080 <USBH_Process+0x3cc>
    break;
 800506a:	bf00      	nop
 800506c:	e008      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 800506e:	bf00      	nop
 8005070:	e006      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 8005072:	bf00      	nop
 8005074:	e004      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <USBH_Process+0x3cc>
      break;
 800507e:	bf00      	nop
  }
  return USBH_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop

0800508c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af04      	add	r7, sp, #16
 8005092:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005098:	2301      	movs	r3, #1
 800509a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b07      	cmp	r3, #7
 80050a2:	f200 81c1 	bhi.w	8005428 <USBH_HandleEnum+0x39c>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <USBH_HandleEnum+0x20>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050cd 	.word	0x080050cd
 80050b0:	0800518b 	.word	0x0800518b
 80050b4:	080051f5 	.word	0x080051f5
 80050b8:	08005283 	.word	0x08005283
 80050bc:	080052ed 	.word	0x080052ed
 80050c0:	0800535d 	.word	0x0800535d
 80050c4:	080053a3 	.word	0x080053a3
 80050c8:	080053e9 	.word	0x080053e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80050cc:	2108      	movs	r1, #8
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa50 	bl	8005574 <USBH_Get_DevDesc>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d130      	bne.n	8005140 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7919      	ldrb	r1, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005102:	b292      	uxth	r2, r2
 8005104:	9202      	str	r2, [sp, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4603      	mov	r3, r0
 800510e:	2280      	movs	r2, #128	; 0x80
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 fd1d 	bl	8006b50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7959      	ldrb	r1, [r3, #5]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800512a:	b292      	uxth	r2, r2
 800512c:	9202      	str	r2, [sp, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	9201      	str	r2, [sp, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	4603      	mov	r3, r0
 8005136:	2200      	movs	r2, #0
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 fd09 	bl	8006b50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800513e:	e175      	b.n	800542c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b03      	cmp	r3, #3
 8005144:	f040 8172 	bne.w	800542c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800514e:	3301      	adds	r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800515e:	2b03      	cmp	r3, #3
 8005160:	d903      	bls.n	800516a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	220d      	movs	r2, #13
 8005166:	701a      	strb	r2, [r3, #0]
      break;
 8005168:	e160      	b.n	800542c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	795b      	ldrb	r3, [r3, #5]
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 fd3d 	bl	8006bf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fd37 	bl	8006bf0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
      break;
 8005188:	e150      	b.n	800542c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800518a:	2112      	movs	r1, #18
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9f1 	bl	8005574 <USBH_Get_DevDesc>
 8005192:	4603      	mov	r3, r0
 8005194:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80051a2:	e145      	b.n	8005430 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	f040 8142 	bne.w	8005430 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051b2:	3301      	adds	r3, #1
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d903      	bls.n	80051ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	220d      	movs	r2, #13
 80051ca:	701a      	strb	r2, [r3, #0]
      break;
 80051cc:	e130      	b.n	8005430 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	795b      	ldrb	r3, [r3, #5]
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 fd0b 	bl	8006bf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fd05 	bl	8006bf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
      break;
 80051f2:	e11d      	b.n	8005430 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80051f4:	2101      	movs	r1, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa68 	bl	80056cc <USBH_SetAddress>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d132      	bne.n	800526c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005206:	2002      	movs	r0, #2
 8005208:	f001 ffdf 	bl	80071ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2203      	movs	r2, #3
 8005218:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7919      	ldrb	r1, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800522e:	b292      	uxth	r2, r2
 8005230:	9202      	str	r2, [sp, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fc87 	bl	8006b50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7959      	ldrb	r1, [r3, #5]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005256:	b292      	uxth	r2, r2
 8005258:	9202      	str	r2, [sp, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	9201      	str	r2, [sp, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4603      	mov	r3, r0
 8005262:	2200      	movs	r2, #0
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fc73 	bl	8006b50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800526a:	e0e3      	b.n	8005434 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	2b03      	cmp	r3, #3
 8005270:	f040 80e0 	bne.w	8005434 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	220d      	movs	r2, #13
 8005278:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	705a      	strb	r2, [r3, #1]
      break;
 8005280:	e0d8      	b.n	8005434 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005282:	2109      	movs	r1, #9
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f99d 	bl	80055c4 <USBH_Get_CfgDesc>
 800528a:	4603      	mov	r3, r0
 800528c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2204      	movs	r2, #4
 8005298:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800529a:	e0cd      	b.n	8005438 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	f040 80ca 	bne.w	8005438 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80052aa:	3301      	adds	r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d903      	bls.n	80052c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	220d      	movs	r2, #13
 80052c2:	701a      	strb	r2, [r3, #0]
      break;
 80052c4:	e0b8      	b.n	8005438 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	795b      	ldrb	r3, [r3, #5]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fc8f 	bl	8006bf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fc89 	bl	8006bf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	e0a5      	b.n	8005438 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f965 	bl	80055c4 <USBH_Get_CfgDesc>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2205      	movs	r2, #5
 8005308:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800530a:	e097      	b.n	800543c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	2b03      	cmp	r3, #3
 8005310:	f040 8094 	bne.w	800543c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800531a:	3301      	adds	r3, #1
 800531c:	b2da      	uxtb	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800532a:	2b03      	cmp	r3, #3
 800532c:	d903      	bls.n	8005336 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	220d      	movs	r2, #13
 8005332:	701a      	strb	r2, [r3, #0]
      break;
 8005334:	e082      	b.n	800543c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	795b      	ldrb	r3, [r3, #5]
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fc57 	bl	8006bf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fc51 	bl	8006bf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
      break;
 800535a:	e06f      	b.n	800543c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005362:	2b00      	cmp	r3, #0
 8005364:	d019      	beq.n	800539a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f949 	bl	800560c <USBH_Get_StringDesc>
 800537a:	4603      	mov	r3, r0
 800537c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800537e:	7bbb      	ldrb	r3, [r7, #14]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2206      	movs	r2, #6
 8005388:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800538a:	e059      	b.n	8005440 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800538c:	7bbb      	ldrb	r3, [r7, #14]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d156      	bne.n	8005440 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2206      	movs	r2, #6
 8005396:	705a      	strb	r2, [r3, #1]
      break;
 8005398:	e052      	b.n	8005440 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2206      	movs	r2, #6
 800539e:	705a      	strb	r2, [r3, #1]
      break;
 80053a0:	e04e      	b.n	8005440 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80053b8:	23ff      	movs	r3, #255	; 0xff
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f926 	bl	800560c <USBH_Get_StringDesc>
 80053c0:	4603      	mov	r3, r0
 80053c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2207      	movs	r2, #7
 80053ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80053d0:	e038      	b.n	8005444 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d135      	bne.n	8005444 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2207      	movs	r2, #7
 80053dc:	705a      	strb	r2, [r3, #1]
      break;
 80053de:	e031      	b.n	8005444 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2207      	movs	r2, #7
 80053e4:	705a      	strb	r2, [r3, #1]
      break;
 80053e6:	e02d      	b.n	8005444 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d017      	beq.n	8005422 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80053fe:	23ff      	movs	r3, #255	; 0xff
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f903 	bl	800560c <USBH_Get_StringDesc>
 8005406:	4603      	mov	r3, r0
 8005408:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005414:	e018      	b.n	8005448 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d115      	bne.n	8005448 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e012      	b.n	8005448 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
      break;
 8005426:	e00f      	b.n	8005448 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005428:	bf00      	nop
 800542a:	e00e      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 800542c:	bf00      	nop
 800542e:	e00c      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005430:	bf00      	nop
 8005432:	e00a      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005434:	bf00      	nop
 8005436:	e008      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005438:	bf00      	nop
 800543a:	e006      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 800543c:	bf00      	nop
 800543e:	e004      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005440:	bf00      	nop
 8005442:	e002      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <USBH_HandleEnum+0x3be>
      break;
 8005448:	bf00      	nop
  }
  return Status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f804 	bl	8005496 <USBH_HandleSof>
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b0b      	cmp	r3, #11
 80054a6:	d10a      	bne.n	80054be <USBH_HandleSof+0x28>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
  }
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80054d6:	bf00      	nop
}
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80054f2:	bf00      	nop
}
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fcfc 	bl	8006f4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fb49 	bl	8006bf0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	795b      	ldrb	r3, [r3, #5]
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fb43 	bl	8006bf0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	b29b      	uxth	r3, r3
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005592:	2100      	movs	r1, #0
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f864 	bl	8005662 <USBH_GetDescriptor>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	b292      	uxth	r2, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f000 f918 	bl	80057ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	331c      	adds	r3, #28
 80055d4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80055d6:	887b      	ldrh	r3, [r7, #2]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e0:	2100      	movs	r1, #0
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f83d 	bl	8005662 <USBH_GetDescriptor>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	461a      	mov	r2, r3
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f987 	bl	800590c <USBH_ParseCfgDesc>
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	72fb      	strb	r3, [r7, #11]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005628:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	460b      	mov	r3, r1
 8005636:	2100      	movs	r1, #0
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f812 	bl	8005662 <USBH_GetDescriptor>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800564e:	893a      	ldrh	r2, [r7, #8]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fb24 	bl	8005ca0 <USBH_ParseStringDesc>
  }

  return status;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	72fb      	strb	r3, [r7, #11]
 8005670:	4613      	mov	r3, r2
 8005672:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	789b      	ldrb	r3, [r3, #2]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d11c      	bne.n	80056b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2206      	movs	r2, #6
 800568c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	893a      	ldrh	r2, [r7, #8]
 8005692:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005694:	893b      	ldrh	r3, [r7, #8]
 8005696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800569a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569e:	d104      	bne.n	80056aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f240 4209 	movw	r2, #1033	; 0x409
 80056a6:	829a      	strh	r2, [r3, #20]
 80056a8:	e002      	b.n	80056b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8b3a      	ldrh	r2, [r7, #24]
 80056b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80056b6:	8b3b      	ldrh	r3, [r7, #24]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fb3d 	bl	8005d3c <USBH_CtlReq>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10f      	bne.n	8005700 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2205      	movs	r2, #5
 80056ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb19 	bl	8005d3c <USBH_CtlReq>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	789b      	ldrb	r3, [r3, #2]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10e      	bne.n	8005746 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2209      	movs	r2, #9
 8005732:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005746:	2200      	movs	r2, #0
 8005748:	2100      	movs	r1, #0
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 faf6 	bl	8005d3c <USBH_CtlReq>
 8005750:	4603      	mov	r3, r0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	789b      	ldrb	r3, [r3, #2]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d10f      	bne.n	800578e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800578e:	2200      	movs	r2, #0
 8005790:	2100      	movs	r1, #0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fad2 	bl	8005d3c <USBH_CtlReq>
 8005798:	4603      	mov	r3, r0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	789b      	ldrb	r3, [r3, #2]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10f      	bne.n	80057d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2100      	movs	r1, #0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 faae 	bl	8005d3c <USBH_CtlReq>
 80057e0:	4603      	mov	r3, r0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785a      	ldrb	r2, [r3, #1]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3302      	adds	r3, #2
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b29a      	uxth	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3303      	adds	r3, #3
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b29b      	uxth	r3, r3
 800581c:	4313      	orrs	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	791a      	ldrb	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	795a      	ldrb	r2, [r3, #5]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	799a      	ldrb	r2, [r3, #6]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	79da      	ldrb	r2, [r3, #7]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	79db      	ldrb	r3, [r3, #7]
 8005848:	2b20      	cmp	r3, #32
 800584a:	dc11      	bgt.n	8005870 <USBH_ParseDevDesc+0x86>
 800584c:	2b08      	cmp	r3, #8
 800584e:	db16      	blt.n	800587e <USBH_ParseDevDesc+0x94>
 8005850:	3b08      	subs	r3, #8
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800585c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <USBH_ParseDevDesc+0x8a>
 800586e:	e006      	b.n	800587e <USBH_ParseDevDesc+0x94>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d104      	bne.n	800587e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	79da      	ldrb	r2, [r3, #7]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	71da      	strb	r2, [r3, #7]
      break;
 800587c:	e003      	b.n	8005886 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2240      	movs	r2, #64	; 0x40
 8005882:	71da      	strb	r2, [r3, #7]
      break;
 8005884:	bf00      	nop
  }

  if (length > 8U)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d939      	bls.n	8005900 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	3308      	adds	r3, #8
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b29a      	uxth	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	3309      	adds	r3, #9
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	b29b      	uxth	r3, r3
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	330a      	adds	r3, #10
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	330b      	adds	r3, #11
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	330c      	adds	r3, #12
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	330d      	adds	r3, #13
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4313      	orrs	r3, r2
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	7b9a      	ldrb	r2, [r3, #14]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	7bda      	ldrb	r2, [r3, #15]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	7c1a      	ldrb	r2, [r3, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	7c5a      	ldrb	r2, [r3, #17]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	745a      	strb	r2, [r3, #17]
  }
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005920:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785a      	ldrb	r2, [r3, #1]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3302      	adds	r3, #2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b29a      	uxth	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	3303      	adds	r3, #3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	b29b      	uxth	r3, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005968:	bf28      	it	cs
 800596a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800596e:	b29a      	uxth	r2, r3
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	791a      	ldrb	r2, [r3, #4]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	795a      	ldrb	r2, [r3, #5]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	799a      	ldrb	r2, [r3, #6]
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	79da      	ldrb	r2, [r3, #7]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	7a1a      	ldrb	r2, [r3, #8]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b09      	cmp	r3, #9
 80059a2:	d002      	beq.n	80059aa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2209      	movs	r2, #9
 80059a8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	f240 809d 	bls.w	8005aec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80059b2:	2309      	movs	r3, #9
 80059b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80059ba:	e081      	b.n	8005ac0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80059bc:	f107 0316 	add.w	r3, r7, #22
 80059c0:	4619      	mov	r1, r3
 80059c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c4:	f000 f99f 	bl	8005d06 <USBH_GetNextDesc>
 80059c8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d176      	bne.n	8005ac0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	d002      	beq.n	80059e0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	2209      	movs	r2, #9
 80059de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80059e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e4:	221a      	movs	r2, #26
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	3308      	adds	r3, #8
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	4413      	add	r3, r2
 80059f0:	3302      	adds	r3, #2
 80059f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80059f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f6:	69f8      	ldr	r0, [r7, #28]
 80059f8:	f000 f87e 	bl	8005af8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a06:	e043      	b.n	8005a90 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005a08:	f107 0316 	add.w	r3, r7, #22
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a10:	f000 f979 	bl	8005d06 <USBH_GetNextDesc>
 8005a14:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d138      	bne.n	8005a90 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	795b      	ldrb	r3, [r3, #5]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10f      	bne.n	8005a46 <USBH_ParseCfgDesc+0x13a>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	799b      	ldrb	r3, [r3, #6]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d10b      	bne.n	8005a46 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	79db      	ldrb	r3, [r3, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10f      	bne.n	8005a56 <USBH_ParseCfgDesc+0x14a>
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b09      	cmp	r3, #9
 8005a3c:	d00b      	beq.n	8005a56 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2209      	movs	r2, #9
 8005a42:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005a44:	e007      	b.n	8005a56 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	d004      	beq.n	8005a58 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	2207      	movs	r2, #7
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e000      	b.n	8005a58 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005a56:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a60:	3201      	adds	r2, #1
 8005a62:	00d2      	lsls	r2, r2, #3
 8005a64:	211a      	movs	r1, #26
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	4413      	add	r3, r2
 8005a72:	3304      	adds	r3, #4
 8005a74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f86b 	bl	8005b56 <USBH_ParseEPDesc>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005a86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	791b      	ldrb	r3, [r3, #4]
 8005a94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d204      	bcs.n	8005aa6 <USBH_ParseCfgDesc+0x19a>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	885a      	ldrh	r2, [r3, #2]
 8005aa0:	8afb      	ldrh	r3, [r7, #22]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d8b0      	bhi.n	8005a08 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d201      	bcs.n	8005ab6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e01c      	b.n	8005af0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8005ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aba:	3301      	adds	r3, #1
 8005abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d805      	bhi.n	8005ad4 <USBH_ParseCfgDesc+0x1c8>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	885a      	ldrh	r2, [r3, #2]
 8005acc:	8afb      	ldrh	r3, [r7, #22]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	f63f af74 	bhi.w	80059bc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	bf28      	it	cs
 8005adc:	2302      	movcs	r3, #2
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d201      	bcs.n	8005aec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e001      	b.n	8005af0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8005aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3730      	adds	r7, #48	; 0x30
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	785a      	ldrb	r2, [r3, #1]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	789a      	ldrb	r2, [r3, #2]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	78da      	ldrb	r2, [r3, #3]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	791a      	ldrb	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	795a      	ldrb	r2, [r3, #5]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	799a      	ldrb	r2, [r3, #6]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	79da      	ldrb	r2, [r3, #7]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	7a1a      	ldrb	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	721a      	strb	r2, [r3, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b087      	sub	sp, #28
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	785a      	ldrb	r2, [r3, #1]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	789a      	ldrb	r2, [r3, #2]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	78da      	ldrb	r2, [r3, #3]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3305      	adds	r3, #5
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	799a      	ldrb	r2, [r3, #6]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	889b      	ldrh	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	75fb      	strb	r3, [r7, #23]
 8005bb6:	e033      	b.n	8005c20 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	889b      	ldrh	r3, [r3, #4]
 8005bbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	889b      	ldrh	r3, [r3, #4]
 8005bce:	b21a      	sxth	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b299      	uxth	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3305      	adds	r3, #5
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	430b      	orrs	r3, r1
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d110      	bne.n	8005c12 <USBH_ParseEPDesc+0xbc>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b299      	uxth	r1, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3305      	adds	r3, #5
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	430b      	orrs	r3, r1
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c0e:	b21b      	sxth	r3, r3
 8005c10:	e001      	b.n	8005c16 <USBH_ParseEPDesc+0xc0>
 8005c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d116      	bne.n	8005c58 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	78db      	ldrb	r3, [r3, #3]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d005      	beq.n	8005c42 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d127      	bne.n	8005c92 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	799b      	ldrb	r3, [r3, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <USBH_ParseEPDesc+0xfc>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	799b      	ldrb	r3, [r3, #6]
 8005c4e:	2b10      	cmp	r3, #16
 8005c50:	d91f      	bls.n	8005c92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c52:	2303      	movs	r3, #3
 8005c54:	75fb      	strb	r3, [r7, #23]
 8005c56:	e01c      	b.n	8005c92 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10a      	bne.n	8005c7a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	799b      	ldrb	r3, [r3, #6]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <USBH_ParseEPDesc+0x11e>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	799b      	ldrb	r3, [r3, #6]
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d90e      	bls.n	8005c92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c74:	2303      	movs	r3, #3
 8005c76:	75fb      	strb	r3, [r7, #23]
 8005c78:	e00b      	b.n	8005c92 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d105      	bne.n	8005c92 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	799b      	ldrb	r3, [r3, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d120      	bne.n	8005cfa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	1e9a      	subs	r2, r3, #2
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bf28      	it	cs
 8005cc4:	4613      	movcs	r3, r2
 8005cc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3302      	adds	r3, #2
 8005ccc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	82fb      	strh	r3, [r7, #22]
 8005cd2:	e00b      	b.n	8005cec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005cd4:	8afb      	ldrh	r3, [r7, #22]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	82fb      	strh	r3, [r7, #22]
 8005cec:	8afa      	ldrh	r2, [r7, #22]
 8005cee:	8abb      	ldrh	r3, [r7, #20]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d3ef      	bcc.n	8005cd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	789b      	ldrb	r3, [r3, #2]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d002      	beq.n	8005d5c <USBH_CtlReq+0x20>
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d00f      	beq.n	8005d7a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005d5a:	e027      	b.n	8005dac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2202      	movs	r2, #2
 8005d72:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
      break;
 8005d78:	e018      	b.n	8005dac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f81c 	bl	8005db8 <USBH_HandleControl>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <USBH_CtlReq+0x54>
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d106      	bne.n	8005d9e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	761a      	strb	r2, [r3, #24]
      break;
 8005d9c:	e005      	b.n	8005daa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d102      	bne.n	8005daa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	709a      	strb	r2, [r3, #2]
      break;
 8005daa:	bf00      	nop
  }
  return status;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7e1b      	ldrb	r3, [r3, #24]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	2b0a      	cmp	r3, #10
 8005dd0:	f200 8156 	bhi.w	8006080 <USBH_HandleControl+0x2c8>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USBH_HandleControl+0x24>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e23 	.word	0x08005e23
 8005de4:	08005e8d 	.word	0x08005e8d
 8005de8:	08005eb3 	.word	0x08005eb3
 8005dec:	08005eeb 	.word	0x08005eeb
 8005df0:	08005f15 	.word	0x08005f15
 8005df4:	08005f67 	.word	0x08005f67
 8005df8:	08005f89 	.word	0x08005f89
 8005dfc:	08005fc5 	.word	0x08005fc5
 8005e00:	08005feb 	.word	0x08005feb
 8005e04:	08006029 	.word	0x08006029
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f103 0110 	add.w	r1, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	795b      	ldrb	r3, [r3, #5]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fe1f 	bl	8006a58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	761a      	strb	r2, [r3, #24]
      break;
 8005e20:	e139      	b.n	8006096 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	795b      	ldrb	r3, [r3, #5]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f97d 	bl	8007128 <USBH_LL_GetURBState>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d11e      	bne.n	8005e76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	7c1b      	ldrb	r3, [r3, #16]
 8005e3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8adb      	ldrh	r3, [r3, #22]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005e4a:	7b7b      	ldrb	r3, [r7, #13]
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d103      	bne.n	8005e58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005e56:	e115      	b.n	8006084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	761a      	strb	r2, [r3, #24]
      break;
 8005e5e:	e111      	b.n	8006084 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005e60:	7b7b      	ldrb	r3, [r7, #13]
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	d103      	bne.n	8005e6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2209      	movs	r2, #9
 8005e6a:	761a      	strb	r2, [r3, #24]
      break;
 8005e6c:	e10a      	b.n	8006084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2207      	movs	r2, #7
 8005e72:	761a      	strb	r2, [r3, #24]
      break;
 8005e74:	e106      	b.n	8006084 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d003      	beq.n	8005e84 <USBH_HandleControl+0xcc>
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	f040 8100 	bne.w	8006084 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	220b      	movs	r2, #11
 8005e88:	761a      	strb	r2, [r3, #24]
      break;
 8005e8a:	e0fb      	b.n	8006084 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6899      	ldr	r1, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	899a      	ldrh	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fe16 	bl	8006ad6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2204      	movs	r2, #4
 8005eae:	761a      	strb	r2, [r3, #24]
      break;
 8005eb0:	e0f1      	b.n	8006096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	791b      	ldrb	r3, [r3, #4]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f935 	bl	8007128 <USBH_LL_GetURBState>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d102      	bne.n	8005ece <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2209      	movs	r2, #9
 8005ecc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d102      	bne.n	8005eda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005ed8:	e0d6      	b.n	8006088 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	f040 80d3 	bne.w	8006088 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	220b      	movs	r2, #11
 8005ee6:	761a      	strb	r2, [r3, #24]
      break;
 8005ee8:	e0ce      	b.n	8006088 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6899      	ldr	r1, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	899a      	ldrh	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	795b      	ldrb	r3, [r3, #5]
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	9000      	str	r0, [sp, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fdc6 	bl	8006a8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2206      	movs	r2, #6
 8005f10:	761a      	strb	r2, [r3, #24]
      break;
 8005f12:	e0c0      	b.n	8006096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	795b      	ldrb	r3, [r3, #5]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f904 	bl	8007128 <USBH_LL_GetURBState>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d103      	bne.n	8005f32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2207      	movs	r2, #7
 8005f2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005f30:	e0ac      	b.n	800608c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d105      	bne.n	8005f44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	220c      	movs	r2, #12
 8005f3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	73fb      	strb	r3, [r7, #15]
      break;
 8005f42:	e0a3      	b.n	800608c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d103      	bne.n	8005f52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2205      	movs	r2, #5
 8005f4e:	761a      	strb	r2, [r3, #24]
      break;
 8005f50:	e09c      	b.n	800608c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	f040 8099 	bne.w	800608c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	220b      	movs	r2, #11
 8005f5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005f60:	2302      	movs	r3, #2
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e092      	b.n	800608c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fdb1 	bl	8006ad6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2208      	movs	r2, #8
 8005f84:	761a      	strb	r2, [r3, #24]

      break;
 8005f86:	e086      	b.n	8006096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	791b      	ldrb	r3, [r3, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 f8ca 	bl	8007128 <USBH_LL_GetURBState>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d105      	bne.n	8005faa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	220d      	movs	r2, #13
 8005fa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005fa8:	e072      	b.n	8006090 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d103      	bne.n	8005fb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	220b      	movs	r2, #11
 8005fb4:	761a      	strb	r2, [r3, #24]
      break;
 8005fb6:	e06b      	b.n	8006090 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d168      	bne.n	8006090 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc2:	e065      	b.n	8006090 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	795b      	ldrb	r3, [r3, #5]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	9200      	str	r2, [sp, #0]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fd5b 	bl	8006a8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	220a      	movs	r2, #10
 8005fe6:	761a      	strb	r2, [r3, #24]
      break;
 8005fe8:	e055      	b.n	8006096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	795b      	ldrb	r3, [r3, #5]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f899 	bl	8007128 <USBH_LL_GetURBState>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	220d      	movs	r2, #13
 8006008:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800600a:	e043      	b.n	8006094 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d103      	bne.n	800601a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2209      	movs	r2, #9
 8006016:	761a      	strb	r2, [r3, #24]
      break;
 8006018:	e03c      	b.n	8006094 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d139      	bne.n	8006094 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	220b      	movs	r2, #11
 8006024:	761a      	strb	r2, [r3, #24]
      break;
 8006026:	e035      	b.n	8006094 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7e5b      	ldrb	r3, [r3, #25]
 800602c:	3301      	adds	r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	765a      	strb	r2, [r3, #25]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7e5b      	ldrb	r3, [r3, #25]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d806      	bhi.n	800604a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006048:	e025      	b.n	8006096 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006050:	2106      	movs	r1, #6
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	795b      	ldrb	r3, [r3, #5]
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fdc4 	bl	8006bf0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fdbe 	bl	8006bf0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800607a:	2302      	movs	r3, #2
 800607c:	73fb      	strb	r3, [r7, #15]
      break;
 800607e:	e00a      	b.n	8006096 <USBH_HandleControl+0x2de>

    default:
      break;
 8006080:	bf00      	nop
 8006082:	e008      	b.n	8006096 <USBH_HandleControl+0x2de>
      break;
 8006084:	bf00      	nop
 8006086:	e006      	b.n	8006096 <USBH_HandleControl+0x2de>
      break;
 8006088:	bf00      	nop
 800608a:	e004      	b.n	8006096 <USBH_HandleControl+0x2de>
      break;
 800608c:	bf00      	nop
 800608e:	e002      	b.n	8006096 <USBH_HandleControl+0x2de>
      break;
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <USBH_HandleControl+0x2de>
      break;
 8006094:	bf00      	nop
  }

  return status;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b08b      	sub	sp, #44	; 0x2c
 80060a4:	af04      	add	r7, sp, #16
 80060a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b2:	7919      	ldrb	r1, [r3, #4]
 80060b4:	23ff      	movs	r3, #255	; 0xff
 80060b6:	2201      	movs	r2, #1
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fe fda5 	bl	8004c08 <USBH_FindInterface>
 80060be:	4603      	mov	r3, r0
 80060c0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060c2:	7dbb      	ldrb	r3, [r7, #22]
 80060c4:	2bff      	cmp	r3, #255	; 0xff
 80060c6:	d002      	beq.n	80060ce <USBH_HID_InterfaceInit+0x2e>
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d901      	bls.n	80060d2 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e108      	b.n	80062e4 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 80060d2:	7dbb      	ldrb	r3, [r7, #22]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fe fd7a 	bl	8004bd0 <USBH_SelectInterface>
 80060dc:	4603      	mov	r3, r0
 80060de:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80060e0:	7d7b      	ldrb	r3, [r7, #21]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0fc      	b.n	80062e4 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060f0:	2034      	movs	r0, #52	; 0x34
 80060f2:	f001 f8cb 	bl	800728c <malloc>
 80060f6:	4603      	mov	r3, r0
 80060f8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 800610a:	2302      	movs	r3, #2
 800610c:	e0ea      	b.n	80062e4 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800610e:	2234      	movs	r2, #52	; 0x34
 8006110:	2100      	movs	r1, #0
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f001 f8ca 	bl	80072ac <memset>

  HID_Handle->state = HID_ERROR;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2207      	movs	r2, #7
 800611c:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800611e:	7dbb      	ldrb	r3, [r7, #22]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	211a      	movs	r1, #26
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	4413      	add	r3, r2
 800612a:	f203 3349 	addw	r3, r3, #841	; 0x349
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d103      	bne.n	800613c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4a6d      	ldr	r2, [pc, #436]	; (80062ec <USBH_HID_InterfaceInit+0x24c>)
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
 800613a:	e010      	b.n	800615e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800613c:	7dbb      	ldrb	r3, [r7, #22]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	211a      	movs	r1, #26
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f203 3349 	addw	r3, r3, #841	; 0x349
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d103      	bne.n	800615a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4a66      	ldr	r2, [pc, #408]	; (80062f0 <USBH_HID_InterfaceInit+0x250>)
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
 8006158:	e001      	b.n	800615e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800615a:	2302      	movs	r3, #2
 800615c:	e0c2      	b.n	80062e4 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2200      	movs	r2, #0
 8006162:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2200      	movs	r2, #0
 8006168:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800616a:	7dbb      	ldrb	r3, [r7, #22]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	211a      	movs	r1, #26
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006180:	7dbb      	ldrb	r3, [r7, #22]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	211a      	movs	r1, #26
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006196:	7dbb      	ldrb	r3, [r7, #22]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	211a      	movs	r1, #26
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	8b9b      	ldrh	r3, [r3, #28]
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	d802      	bhi.n	80061bc <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	220a      	movs	r2, #10
 80061ba:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80061bc:	7dbb      	ldrb	r3, [r7, #22]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	bf28      	it	cs
 80061d2:	2302      	movcs	r3, #2
 80061d4:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
 80061da:	e07d      	b.n	80062d8 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80061dc:	7dbb      	ldrb	r3, [r7, #22]
 80061de:	7df9      	ldrb	r1, [r7, #23]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	3101      	adds	r1, #1
 80061e4:	00c9      	lsls	r1, r1, #3
 80061e6:	201a      	movs	r0, #26
 80061e8:	fb00 f303 	mul.w	r3, r0, r3
 80061ec:	440b      	add	r3, r1
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da35      	bge.n	8006268 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80061fc:	7dbb      	ldrb	r3, [r7, #22]
 80061fe:	7df9      	ldrb	r1, [r7, #23]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	3101      	adds	r1, #1
 8006204:	00c9      	lsls	r1, r1, #3
 8006206:	201a      	movs	r0, #26
 8006208:	fb00 f303 	mul.w	r3, r0, r3
 800620c:	440b      	add	r3, r1
 800620e:	4413      	add	r3, r2
 8006210:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	791b      	ldrb	r3, [r3, #4]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fcc4 	bl	8006bae <USBH_AllocPipe>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	7859      	ldrb	r1, [r3, #1]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	7918      	ldrb	r0, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	8b12      	ldrh	r2, [r2, #24]
 8006246:	9202      	str	r2, [sp, #8]
 8006248:	2203      	movs	r2, #3
 800624a:	9201      	str	r2, [sp, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4623      	mov	r3, r4
 8006250:	4602      	mov	r2, r0
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc7c 	bl	8006b50 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2200      	movs	r2, #0
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 ff82 	bl	800716a <USBH_LL_SetToggle>
 8006266:	e034      	b.n	80062d2 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8006268:	7dbb      	ldrb	r3, [r7, #22]
 800626a:	7df9      	ldrb	r1, [r7, #23]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	3101      	adds	r1, #1
 8006270:	00c9      	lsls	r1, r1, #3
 8006272:	201a      	movs	r0, #26
 8006274:	fb00 f303 	mul.w	r3, r0, r3
 8006278:	440b      	add	r3, r1
 800627a:	4413      	add	r3, r2
 800627c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	78db      	ldrb	r3, [r3, #3]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fc8e 	bl	8006bae <USBH_AllocPipe>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	7819      	ldrb	r1, [r3, #0]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	78d8      	ldrb	r0, [r3, #3]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	8b12      	ldrh	r2, [r2, #24]
 80062b2:	9202      	str	r2, [sp, #8]
 80062b4:	2203      	movs	r2, #3
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4623      	mov	r3, r4
 80062bc:	4602      	mov	r2, r0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fc46 	bl	8006b50 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2200      	movs	r2, #0
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 ff4c 	bl	800716a <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	3301      	adds	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
 80062d8:	7dfa      	ldrb	r2, [r7, #23]
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	429a      	cmp	r2, r3
 80062de:	f4ff af7d 	bcc.w	80061dc <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd90      	pop	{r4, r7, pc}
 80062ec:	0800691d 	.word	0x0800691d
 80062f0:	080069c5 	.word	0x080069c5

080062f4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00e      	beq.n	800632c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc3a 	bl	8006b8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fc65 	bl	8006bf0 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fc27 	bl	8006b8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fc52 	bl	8006bf0 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 ff98 	bl	800729c <free>
    phost->pActiveClass->pData = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006372:	2200      	movs	r2, #0
 8006374:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800638c:	2301      	movs	r3, #1
 800638e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	795b      	ldrb	r3, [r3, #5]
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d860      	bhi.n	8006464 <USBH_HID_ClassRequest+0xe4>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <USBH_HID_ClassRequest+0x28>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	08006465 	.word	0x08006465
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063c1 	.word	0x080063c1
 80063b8:	08006405 	.word	0x08006405
 80063bc:	0800642f 	.word	0x0800642f
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	331c      	adds	r3, #28
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f000 f9cd 	bl	800676c <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2202      	movs	r2, #2
 80063d6:	715a      	strb	r2, [r3, #5]

      break;
 80063d8:	e04b      	b.n	8006472 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f930 	bl	8006646 <USBH_HID_GetHIDReportDescriptor>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2204      	movs	r2, #4
 80063f4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 80063f6:	e037      	b.n	8006468 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d134      	bne.n	8006468 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80063fe:	2302      	movs	r3, #2
 8006400:	73fb      	strb	r3, [r7, #15]
      break;
 8006402:	e031      	b.n	8006468 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f935 	bl	8006678 <USBH_HID_SetIdle>
 800640e:	4603      	mov	r3, r0
 8006410:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2205      	movs	r2, #5
 800641c:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800641e:	e025      	b.n	800646c <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d122      	bne.n	800646c <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2205      	movs	r2, #5
 800642a:	715a      	strb	r2, [r3, #5]
      break;
 800642c:	e01e      	b.n	800646c <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800642e:	2100      	movs	r1, #0
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f975 	bl	8006720 <USBH_HID_SetProtocol>
 8006436:	4603      	mov	r3, r0
 8006438:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2201      	movs	r2, #1
 8006444:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800644c:	2102      	movs	r1, #2
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
        status = USBH_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8006456:	e00b      	b.n	8006470 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d108      	bne.n	8006470 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800645e:	2302      	movs	r3, #2
 8006460:	73fb      	strb	r3, [r7, #15]
      break;
 8006462:	e005      	b.n	8006470 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8006464:	bf00      	nop
 8006466:	e004      	b.n	8006472 <USBH_HID_ClassRequest+0xf2>
      break;
 8006468:	bf00      	nop
 800646a:	e002      	b.n	8006472 <USBH_HID_ClassRequest+0xf2>
      break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <USBH_HID_ClassRequest+0xf2>
      break;
 8006470:	bf00      	nop
  }

  return status;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	789b      	ldrb	r3, [r3, #2]
 8006496:	2b06      	cmp	r3, #6
 8006498:	f200 80a9 	bhi.w	80065ee <USBH_HID_Process+0x172>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <USBH_HID_Process+0x28>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080065ef 	.word	0x080065ef
 80064b0:	080065ef 	.word	0x080065ef
 80064b4:	08006541 	.word	0x08006541
 80064b8:	0800652b 	.word	0x0800652b
 80064bc:	0800656f 	.word	0x0800656f
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2201      	movs	r2, #1
 80064cc:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064ce:	e093      	b.n	80065f8 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	8b1b      	ldrh	r3, [r3, #24]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	2101      	movs	r1, #1
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f8f0 	bl	80066c8 <USBH_HID_GetReport>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2205      	movs	r2, #5
 80064f6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064f8:	e07e      	b.n	80065f8 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d105      	bne.n	800650c <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2201      	movs	r2, #1
 8006504:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]
      break;
 800650a:	e075      	b.n	80065f8 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d105      	bne.n	800651e <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2205      	movs	r2, #5
 8006516:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	75fb      	strb	r3, [r7, #23]
      break;
 800651c:	e06c      	b.n	80065f8 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2207      	movs	r2, #7
 8006522:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006524:	2302      	movs	r3, #2
 8006526:	75fb      	strb	r3, [r7, #23]
      break;
 8006528:	e066      	b.n	80065f8 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d05c      	beq.n	80065f2 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2204      	movs	r2, #4
 800653c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800653e:	e058      	b.n	80065f2 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006548:	b2da      	uxtb	r2, r3
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fadf 	bl	8006b12 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2206      	movs	r2, #6
 8006558:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800656c:	e044      	b.n	80065f8 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fdd7 	bl	8007128 <USBH_LL_GetURBState>
 800657a:	4603      	mov	r3, r0
 800657c:	2b01      	cmp	r3, #1
 800657e:	d120      	bne.n	80065c2 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd3c 	bl	8007004 <USBH_LL_GetLastXferSize>
 800658c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d12e      	bne.n	80065f6 <USBH_HID_Process+0x17a>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02b      	beq.n	80065f6 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f103 0008 	add.w	r0, r3, #8
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6959      	ldr	r1, [r3, #20]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	8b1b      	ldrh	r3, [r3, #24]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f000 f957 	bl	8006860 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9a4 	bl	8006908 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80065c0:	e019      	b.n	80065f6 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fdad 	bl	8007128 <USBH_LL_GetURBState>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b05      	cmp	r3, #5
 80065d2:	d110      	bne.n	80065f6 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	7e9b      	ldrb	r3, [r3, #26]
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff f8e1 	bl	80057a2 <USBH_ClrFeature>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2204      	movs	r2, #4
 80065ea:	709a      	strb	r2, [r3, #2]
      break;
 80065ec:	e003      	b.n	80065f6 <USBH_HID_Process+0x17a>

    default:
      break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <USBH_HID_Process+0x17c>
      break;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <USBH_HID_Process+0x17c>
      break;
 80065f6:	bf00      	nop
  }

  return status;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop

08006604 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	789b      	ldrb	r3, [r3, #2]
 800661a:	2b06      	cmp	r3, #6
 800661c:	d10c      	bne.n	8006638 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	8b92      	ldrh	r2, [r2, #28]
 800662e:	4293      	cmp	r3, r2
 8006630:	d302      	bcc.n	8006638 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2204      	movs	r2, #4
 8006636:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af02      	add	r7, sp, #8
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fffc 	bl	8005662 <USBH_GetDescriptor>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
 8006684:	4613      	mov	r3, r2
 8006686:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2221      	movs	r2, #33	; 0x21
 800668c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	220a      	movs	r2, #10
 8006692:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	b29b      	uxth	r3, r3
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	b29a      	uxth	r2, r3
 800669c:	78bb      	ldrb	r3, [r7, #2]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	4313      	orrs	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fb3f 	bl	8005d3c <USBH_CtlReq>
 80066be:	4603      	mov	r3, r0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	72fb      	strb	r3, [r7, #11]
 80066d6:	4613      	mov	r3, r2
 80066d8:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22a1      	movs	r2, #161	; 0xa1
 80066de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	7abb      	ldrb	r3, [r7, #10]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8006700:	7e3b      	ldrb	r3, [r7, #24]
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8006708:	7e3b      	ldrb	r3, [r7, #24]
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fb13 	bl	8005d3c <USBH_CtlReq>
 8006716:	4603      	mov	r3, r0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2221      	movs	r2, #33	; 0x21
 8006730:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	220b      	movs	r2, #11
 8006736:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	825a      	strh	r2, [r3, #18]
 8006744:	e002      	b.n	800674c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006758:	2200      	movs	r2, #0
 800675a:	2100      	movs	r1, #0
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff faed 	bl	8005d3c <USBH_CtlReq>
 8006762:	4603      	mov	r3, r0

}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	3302      	adds	r3, #2
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b29a      	uxth	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	3303      	adds	r3, #3
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	b29b      	uxth	r3, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006792:	897b      	ldrh	r3, [r7, #10]
 8006794:	2b09      	cmp	r3, #9
 8006796:	d943      	bls.n	8006820 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006798:	2309      	movs	r3, #9
 800679a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800679c:	e03c      	b.n	8006818 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff faae 	bl	8005d06 <USBH_GetNextDesc>
 80067aa:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b21      	cmp	r3, #33	; 0x21
 80067b2:	d131      	bne.n	8006818 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	785a      	ldrb	r2, [r3, #1]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3302      	adds	r3, #2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3303      	adds	r3, #3
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	791a      	ldrb	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	795a      	ldrb	r2, [r3, #5]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	799a      	ldrb	r2, [r3, #6]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3307      	adds	r3, #7
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3308      	adds	r3, #8
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	b29b      	uxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	811a      	strh	r2, [r3, #8]
        break;
 8006814:	bf00      	nop
      }
    }
  }
}
 8006816:	e003      	b.n	8006820 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	897a      	ldrh	r2, [r7, #10]
 800681c:	429a      	cmp	r2, r3
 800681e:	d8be      	bhi.n	800679e <USBH_HID_ParseHIDDesc+0x32>
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	7a9b      	ldrb	r3, [r3, #10]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d13c      	bne.n	80068f4 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006880:	2300      	movs	r3, #0
 8006882:	82fb      	strh	r3, [r7, #22]
 8006884:	e032      	b.n	80068ec <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	3301      	adds	r3, #1
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	88d2      	ldrh	r2, [r2, #6]
 8006890:	4293      	cmp	r3, r2
 8006892:	d00a      	beq.n	80068aa <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	889b      	ldrh	r3, [r3, #4]
 8006898:	3301      	adds	r3, #1
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800689e:	4293      	cmp	r3, r2
 80068a0:	d108      	bne.n	80068b4 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	729a      	strb	r2, [r3, #10]
        return i;
 80068b0:	8afb      	ldrh	r3, [r7, #22]
 80068b2:	e023      	b.n	80068fc <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	613a      	str	r2, [r7, #16]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	8889      	ldrh	r1, [r1, #4]
 80068c2:	440a      	add	r2, r1
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	7013      	strb	r3, [r2, #0]
        f->head++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	889b      	ldrh	r3, [r3, #4]
 80068cc:	3301      	adds	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	889a      	ldrh	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	891b      	ldrh	r3, [r3, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d102      	bne.n	80068e6 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80068e6:	8afb      	ldrh	r3, [r7, #22]
 80068e8:	3301      	adds	r3, #1
 80068ea:	82fb      	strh	r3, [r7, #22]
 80068ec:	8afa      	ldrh	r2, [r7, #22]
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d3c8      	bcc.n	8006886 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80068fa:	88fb      	ldrh	r3, [r7, #6]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBH_HID_EventCallback>:
  * @brief  The function is a callback about HID Data events
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 8006930:	2200      	movs	r2, #0
 8006932:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 8006936:	2200      	movs	r2, #0
 8006938:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800693a:	4b1f      	ldr	r3, [pc, #124]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 800693c:	2200      	movs	r2, #0
 800693e:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8006940:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 8006942:	2200      	movs	r2, #0
 8006944:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8006946:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 8006948:	2200      	movs	r2, #0
 800694a:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 800694e:	2200      	movs	r2, #0
 8006950:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 8006954:	2200      	movs	r2, #0
 8006956:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8006958:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <USBH_HID_KeybdInit+0x9c>)
 800695a:	2200      	movs	r2, #0
 800695c:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e00c      	b.n	800697e <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <USBH_HID_KeybdInit+0xa0>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2100      	movs	r1, #0
 800696a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800696e:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <USBH_HID_KeybdInit+0xa4>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2100      	movs	r1, #0
 8006974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d9ef      	bls.n	8006964 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	8b1b      	ldrh	r3, [r3, #24]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d902      	bls.n	8006992 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2208      	movs	r2, #8
 8006990:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a0a      	ldr	r2, [pc, #40]	; (80069c0 <USBH_HID_KeybdInit+0xa4>)
 8006996:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f103 0008 	add.w	r0, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069a4:	2250      	movs	r2, #80	; 0x50
 80069a6:	4619      	mov	r1, r3
 80069a8:	f7ff ff3e 	bl	8006828 <USBH_HID_FifoInit>

  return USBH_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000100 	.word	0x20000100
 80069bc:	20000118 	.word	0x20000118
 80069c0:	20000110 	.word	0x20000110

080069c4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <USBH_HID_MouseInit+0x88>)
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <USBH_HID_MouseInit+0x88>)
 80069de:	2200      	movs	r2, #0
 80069e0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80069e2:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <USBH_HID_MouseInit+0x88>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <USBH_HID_MouseInit+0x88>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80069ee:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <USBH_HID_MouseInit+0x88>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e00c      	b.n	8006a14 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <USBH_HID_MouseInit+0x8c>)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2100      	movs	r1, #0
 8006a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8006a04:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <USBH_HID_MouseInit+0x90>)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d9ef      	bls.n	80069fa <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	8b1b      	ldrh	r3, [r3, #24]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d902      	bls.n	8006a28 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2208      	movs	r2, #8
 8006a26:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <USBH_HID_MouseInit+0x90>)
 8006a2c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f103 0008 	add.w	r0, r3, #8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a3a:	2250      	movs	r2, #80	; 0x50
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f7ff fef3 	bl	8006828 <USBH_HID_FifoInit>

  return USBH_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000120 	.word	0x20000120
 8006a50:	20000128 	.word	0x20000128
 8006a54:	20000130 	.word	0x20000130

08006a58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a66:	79f9      	ldrb	r1, [r7, #7]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	9302      	str	r3, [sp, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fb22 	bl	80070c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af04      	add	r7, sp, #16
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4611      	mov	r1, r2
 8006a98:	461a      	mov	r2, r3
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	80fb      	strh	r3, [r7, #6]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ab0:	7979      	ldrb	r1, [r7, #5]
 8006ab2:	7e3b      	ldrb	r3, [r7, #24]
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fafd 	bl	80070c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b088      	sub	sp, #32
 8006ada:	af04      	add	r7, sp, #16
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	80fb      	strh	r3, [r7, #6]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006aec:	7979      	ldrb	r1, [r7, #5]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	2301      	movs	r3, #1
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	2201      	movs	r2, #1
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fadf 	bl	80070c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006b08:	2300      	movs	r3, #0

}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b088      	sub	sp, #32
 8006b16:	af04      	add	r7, sp, #16
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	460b      	mov	r3, r1
 8006b22:	71fb      	strb	r3, [r7, #7]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	79b9      	ldrb	r1, [r7, #6]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	9203      	str	r2, [sp, #12]
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	2201      	movs	r2, #1
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fac0 	bl	80070c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af04      	add	r7, sp, #16
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	70fb      	strb	r3, [r7, #3]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70bb      	strb	r3, [r7, #2]
 8006b66:	4613      	mov	r3, r2
 8006b68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006b6a:	7878      	ldrb	r0, [r7, #1]
 8006b6c:	78ba      	ldrb	r2, [r7, #2]
 8006b6e:	78f9      	ldrb	r1, [r7, #3]
 8006b70:	8b3b      	ldrh	r3, [r7, #24]
 8006b72:	9302      	str	r3, [sp, #8]
 8006b74:	7d3b      	ldrb	r3, [r7, #20]
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	7c3b      	ldrb	r3, [r7, #16]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa53 	bl	800702a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa72 	bl	8007088 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f836 	bl	8006c2c <USBH_GetFreePipe>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00a      	beq.n	8006be4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	33e0      	adds	r3, #224	; 0xe0
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	b2db      	uxtb	r3, r3
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	d80d      	bhi.n	8006c1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	33e0      	adds	r3, #224	; 0xe0
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	33e0      	adds	r3, #224	; 0xe0
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
 8006c3c:	e00f      	b.n	8006c5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33e0      	adds	r3, #224	; 0xe0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	e007      	b.n	8006c68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	d9ec      	bls.n	8006c3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	490e      	ldr	r1, [pc, #56]	; (8006cb4 <MX_USB_HOST_Init+0x40>)
 8006c7c:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <MX_USB_HOST_Init+0x44>)
 8006c7e:	f7fd feef 	bl	8004a60 <USBH_Init>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006c88:	f7f9 ff1e 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006c8c:	490b      	ldr	r1, [pc, #44]	; (8006cbc <MX_USB_HOST_Init+0x48>)
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <MX_USB_HOST_Init+0x44>)
 8006c90:	f7fd ff74 	bl	8004b7c <USBH_RegisterClass>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006c9a:	f7f9 ff15 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006c9e:	4806      	ldr	r0, [pc, #24]	; (8006cb8 <MX_USB_HOST_Init+0x44>)
 8006ca0:	f7fd fff8 	bl	8004c94 <USBH_Start>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006caa:	f7f9 ff0d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08006cd5 	.word	0x08006cd5
 8006cb8:	20000138 	.word	0x20000138
 8006cbc:	2000000c 	.word	0x2000000c

08006cc0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006cc4:	4802      	ldr	r0, [pc, #8]	; (8006cd0 <MX_USB_HOST_Process+0x10>)
 8006cc6:	f7fd fff5 	bl	8004cb4 <USBH_Process>
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000138 	.word	0x20000138

08006cd4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d819      	bhi.n	8006d1c <USBH_UserProcess+0x48>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USBH_UserProcess+0x1c>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d0d 	.word	0x08006d0d
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d15 	.word	0x08006d15
 8006d00:	08006d05 	.word	0x08006d05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006d04:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <USBH_UserProcess+0x58>)
 8006d06:	2203      	movs	r2, #3
 8006d08:	701a      	strb	r2, [r3, #0]
  break;
 8006d0a:	e008      	b.n	8006d1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <USBH_UserProcess+0x58>)
 8006d0e:	2202      	movs	r2, #2
 8006d10:	701a      	strb	r2, [r3, #0]
  break;
 8006d12:	e004      	b.n	8006d1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <USBH_UserProcess+0x58>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
  break;
 8006d1a:	e000      	b.n	8006d1e <USBH_UserProcess+0x4a>

  default:
  break;
 8006d1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000510 	.word	0x20000510

08006d30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d50:	d147      	bne.n	8006de2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	4b25      	ldr	r3, [pc, #148]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	4a24      	ldr	r2, [pc, #144]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6313      	str	r3, [r2, #48]	; 0x30
 8006d62:	4b22      	ldr	r3, [pc, #136]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006d6e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d74:	2302      	movs	r3, #2
 8006d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d80:	230a      	movs	r3, #10
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4819      	ldr	r0, [pc, #100]	; (8006df0 <HAL_HCD_MspInit+0xc0>)
 8006d8c:	f7fa f99e 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	4619      	mov	r1, r3
 8006da4:	4812      	ldr	r0, [pc, #72]	; (8006df0 <HAL_HCD_MspInit+0xc0>)
 8006da6:	f7fa f991 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	4a0f      	ldr	r2, [pc, #60]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	6353      	str	r3, [r2, #52]	; 0x34
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_HCD_MspInit+0xbc>)
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	2043      	movs	r0, #67	; 0x43
 8006dd8:	f7fa f925 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ddc:	2043      	movs	r0, #67	; 0x43
 8006dde:	f7fa f93e 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006de2:	bf00      	nop
 8006de4:	3728      	adds	r7, #40	; 0x28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800
 8006df0:	40020000 	.word	0x40020000

08006df4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fb35 	bl	8005472 <USBH_LL_IncTimer>
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fb6d 	bl	80054fe <USBH_LL_Connect>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fb76 	bl	800552c <USBH_LL_Disconnect>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
 8006e54:	4613      	mov	r3, r2
 8006e56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fb27 	bl	80054c6 <USBH_LL_PortEnabled>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fb27 	bl	80054e2 <USBH_LL_PortDisabled>
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d12a      	bne.n	8006f04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006eae:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <USBH_LL_Init+0x74>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <USBH_LL_Init+0x74>)
 8006eba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ec4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006ec6:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ec8:	2208      	movs	r2, #8
 8006eca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <USBH_LL_Init+0x74>)
 8006eda:	2202      	movs	r2, #2
 8006edc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ee4:	480a      	ldr	r0, [pc, #40]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ee6:	f7fa fa8e 	bl	8001406 <HAL_HCD_Init>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006ef0:	f7f9 fdea 	bl	8000ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006ef4:	4806      	ldr	r0, [pc, #24]	; (8006f10 <USBH_LL_Init+0x74>)
 8006ef6:	f7fa fe72 	bl	8001bde <HAL_HCD_GetCurrentFrame>
 8006efa:	4603      	mov	r3, r0
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fe faa8 	bl	8005454 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000514 	.word	0x20000514

08006f14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fa fde1 	bl	8001af2 <HAL_HCD_Start>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f952 	bl	80071e0 <USBH_Get_USB_Status>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fa fde9 	bl	8001b38 <HAL_HCD_Stop>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f937 	bl	80071e0 <USBH_Get_USB_Status>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa fe31 	bl	8001bfa <HAL_HCD_GetCurrentSpeed>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d00c      	beq.n	8006fb8 <USBH_LL_GetSpeed+0x38>
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d80d      	bhi.n	8006fbe <USBH_LL_GetSpeed+0x3e>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <USBH_LL_GetSpeed+0x2c>
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d003      	beq.n	8006fb2 <USBH_LL_GetSpeed+0x32>
 8006faa:	e008      	b.n	8006fbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb0:	e008      	b.n	8006fc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb6:	e005      	b.n	8006fc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	73fb      	strb	r3, [r7, #15]
    break;
 8006fbc:	e002      	b.n	8006fc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc2:	bf00      	nop
  }
  return  speed;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fa fdc4 	bl	8001b72 <HAL_HCD_ResetPort>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f8f5 	bl	80071e0 <USBH_Get_USB_Status>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa fdcb 	bl	8001bb6 <HAL_HCD_HC_GetXferCount>
 8007020:	4603      	mov	r3, r0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800702a:	b590      	push	{r4, r7, lr}
 800702c:	b089      	sub	sp, #36	; 0x24
 800702e:	af04      	add	r7, sp, #16
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	461a      	mov	r2, r3
 8007038:	4603      	mov	r3, r0
 800703a:	70fb      	strb	r3, [r7, #3]
 800703c:	460b      	mov	r3, r1
 800703e:	70bb      	strb	r3, [r7, #2]
 8007040:	4613      	mov	r3, r2
 8007042:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007052:	787c      	ldrb	r4, [r7, #1]
 8007054:	78ba      	ldrb	r2, [r7, #2]
 8007056:	78f9      	ldrb	r1, [r7, #3]
 8007058:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4623      	mov	r3, r4
 800706a:	f7fa fa2e 	bl	80014ca <HAL_HCD_HC_Init>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f8b3 	bl	80071e0 <USBH_Get_USB_Status>
 800707a:	4603      	mov	r3, r0
 800707c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800707e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	bd90      	pop	{r4, r7, pc}

08007088 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fa fa9e 	bl	80015e8 <HAL_HCD_HC_Halt>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f894 	bl	80071e0 <USBH_Get_USB_Status>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80070c6:	b590      	push	{r4, r7, lr}
 80070c8:	b089      	sub	sp, #36	; 0x24
 80070ca:	af04      	add	r7, sp, #16
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	461a      	mov	r2, r3
 80070d4:	4603      	mov	r3, r0
 80070d6:	70fb      	strb	r3, [r7, #3]
 80070d8:	460b      	mov	r3, r1
 80070da:	70bb      	strb	r3, [r7, #2]
 80070dc:	4613      	mov	r3, r2
 80070de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80070ee:	787c      	ldrb	r4, [r7, #1]
 80070f0:	78ba      	ldrb	r2, [r7, #2]
 80070f2:	78f9      	ldrb	r1, [r7, #3]
 80070f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	4623      	mov	r3, r4
 800710a:	f7fa fa91 	bl	8001630 <HAL_HCD_HC_SubmitRequest>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f863 	bl	80071e0 <USBH_Get_USB_Status>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800711e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}

08007128 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7fa fd25 	bl	8001b8e <HAL_HCD_HC_GetURBState>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800715a:	20c8      	movs	r0, #200	; 0xc8
 800715c:	f7f9 fe64 	bl	8000e28 <HAL_Delay>
  return USBH_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
 8007176:	4613      	mov	r3, r2
 8007178:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007180:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	212c      	movs	r1, #44	; 0x2c
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	333b      	adds	r3, #59	; 0x3b
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	212c      	movs	r1, #44	; 0x2c
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	3354      	adds	r3, #84	; 0x54
 80071a4:	78ba      	ldrb	r2, [r7, #2]
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e008      	b.n	80071bc <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	212c      	movs	r1, #44	; 0x2c
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	4413      	add	r3, r2
 80071b6:	3355      	adds	r3, #85	; 0x55
 80071b8:	78ba      	ldrb	r2, [r7, #2]
 80071ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7f9 fe28 	bl	8000e28 <HAL_Delay>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d817      	bhi.n	8007224 <USBH_Get_USB_Status+0x44>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBH_Get_USB_Status+0x1c>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	08007213 	.word	0x08007213
 8007204:	08007219 	.word	0x08007219
 8007208:	0800721f 	.word	0x0800721f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	e00b      	b.n	800722a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	73fb      	strb	r3, [r7, #15]
    break;
 8007216:	e008      	b.n	800722a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
    break;
 800721c:	e005      	b.n	800722a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	73fb      	strb	r3, [r7, #15]
    break;
 8007222:	e002      	b.n	800722a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	73fb      	strb	r3, [r7, #15]
    break;
 8007228:	bf00      	nop
  }
  return usb_status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <__errno>:
 8007238:	4b01      	ldr	r3, [pc, #4]	; (8007240 <__errno+0x8>)
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	2000002c 	.word	0x2000002c

08007244 <__libc_init_array>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4d0d      	ldr	r5, [pc, #52]	; (800727c <__libc_init_array+0x38>)
 8007248:	4c0d      	ldr	r4, [pc, #52]	; (8007280 <__libc_init_array+0x3c>)
 800724a:	1b64      	subs	r4, r4, r5
 800724c:	10a4      	asrs	r4, r4, #2
 800724e:	2600      	movs	r6, #0
 8007250:	42a6      	cmp	r6, r4
 8007252:	d109      	bne.n	8007268 <__libc_init_array+0x24>
 8007254:	4d0b      	ldr	r5, [pc, #44]	; (8007284 <__libc_init_array+0x40>)
 8007256:	4c0c      	ldr	r4, [pc, #48]	; (8007288 <__libc_init_array+0x44>)
 8007258:	f000 f92e 	bl	80074b8 <_init>
 800725c:	1b64      	subs	r4, r4, r5
 800725e:	10a4      	asrs	r4, r4, #2
 8007260:	2600      	movs	r6, #0
 8007262:	42a6      	cmp	r6, r4
 8007264:	d105      	bne.n	8007272 <__libc_init_array+0x2e>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	f855 3b04 	ldr.w	r3, [r5], #4
 800726c:	4798      	blx	r3
 800726e:	3601      	adds	r6, #1
 8007270:	e7ee      	b.n	8007250 <__libc_init_array+0xc>
 8007272:	f855 3b04 	ldr.w	r3, [r5], #4
 8007276:	4798      	blx	r3
 8007278:	3601      	adds	r6, #1
 800727a:	e7f2      	b.n	8007262 <__libc_init_array+0x1e>
 800727c:	08007af0 	.word	0x08007af0
 8007280:	08007af0 	.word	0x08007af0
 8007284:	08007af0 	.word	0x08007af0
 8007288:	08007af4 	.word	0x08007af4

0800728c <malloc>:
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <malloc+0xc>)
 800728e:	4601      	mov	r1, r0
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	f000 b87f 	b.w	8007394 <_malloc_r>
 8007296:	bf00      	nop
 8007298:	2000002c 	.word	0x2000002c

0800729c <free>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <free+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f000 b80b 	b.w	80072bc <_free_r>
 80072a6:	bf00      	nop
 80072a8:	2000002c 	.word	0x2000002c

080072ac <memset>:
 80072ac:	4402      	add	r2, r0
 80072ae:	4603      	mov	r3, r0
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d100      	bne.n	80072b6 <memset+0xa>
 80072b4:	4770      	bx	lr
 80072b6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ba:	e7f9      	b.n	80072b0 <memset+0x4>

080072bc <_free_r>:
 80072bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072be:	2900      	cmp	r1, #0
 80072c0:	d044      	beq.n	800734c <_free_r+0x90>
 80072c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c6:	9001      	str	r0, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f1a1 0404 	sub.w	r4, r1, #4
 80072ce:	bfb8      	it	lt
 80072d0:	18e4      	addlt	r4, r4, r3
 80072d2:	f000 f8e3 	bl	800749c <__malloc_lock>
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <_free_r+0x94>)
 80072d8:	9801      	ldr	r0, [sp, #4]
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	b933      	cbnz	r3, 80072ec <_free_r+0x30>
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	6014      	str	r4, [r2, #0]
 80072e2:	b003      	add	sp, #12
 80072e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e8:	f000 b8de 	b.w	80074a8 <__malloc_unlock>
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d908      	bls.n	8007302 <_free_r+0x46>
 80072f0:	6825      	ldr	r5, [r4, #0]
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	428b      	cmp	r3, r1
 80072f6:	bf01      	itttt	eq
 80072f8:	6819      	ldreq	r1, [r3, #0]
 80072fa:	685b      	ldreq	r3, [r3, #4]
 80072fc:	1949      	addeq	r1, r1, r5
 80072fe:	6021      	streq	r1, [r4, #0]
 8007300:	e7ed      	b.n	80072de <_free_r+0x22>
 8007302:	461a      	mov	r2, r3
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	b10b      	cbz	r3, 800730c <_free_r+0x50>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d9fa      	bls.n	8007302 <_free_r+0x46>
 800730c:	6811      	ldr	r1, [r2, #0]
 800730e:	1855      	adds	r5, r2, r1
 8007310:	42a5      	cmp	r5, r4
 8007312:	d10b      	bne.n	800732c <_free_r+0x70>
 8007314:	6824      	ldr	r4, [r4, #0]
 8007316:	4421      	add	r1, r4
 8007318:	1854      	adds	r4, r2, r1
 800731a:	42a3      	cmp	r3, r4
 800731c:	6011      	str	r1, [r2, #0]
 800731e:	d1e0      	bne.n	80072e2 <_free_r+0x26>
 8007320:	681c      	ldr	r4, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	6053      	str	r3, [r2, #4]
 8007326:	4421      	add	r1, r4
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	e7da      	b.n	80072e2 <_free_r+0x26>
 800732c:	d902      	bls.n	8007334 <_free_r+0x78>
 800732e:	230c      	movs	r3, #12
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	e7d6      	b.n	80072e2 <_free_r+0x26>
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	1961      	adds	r1, r4, r5
 8007338:	428b      	cmp	r3, r1
 800733a:	bf04      	itt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	bf04      	itt	eq
 8007344:	1949      	addeq	r1, r1, r5
 8007346:	6021      	streq	r1, [r4, #0]
 8007348:	6054      	str	r4, [r2, #4]
 800734a:	e7ca      	b.n	80072e2 <_free_r+0x26>
 800734c:	b003      	add	sp, #12
 800734e:	bd30      	pop	{r4, r5, pc}
 8007350:	20000818 	.word	0x20000818

08007354 <sbrk_aligned>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4e0e      	ldr	r6, [pc, #56]	; (8007390 <sbrk_aligned+0x3c>)
 8007358:	460c      	mov	r4, r1
 800735a:	6831      	ldr	r1, [r6, #0]
 800735c:	4605      	mov	r5, r0
 800735e:	b911      	cbnz	r1, 8007366 <sbrk_aligned+0x12>
 8007360:	f000 f88c 	bl	800747c <_sbrk_r>
 8007364:	6030      	str	r0, [r6, #0]
 8007366:	4621      	mov	r1, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 f887 	bl	800747c <_sbrk_r>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d00a      	beq.n	8007388 <sbrk_aligned+0x34>
 8007372:	1cc4      	adds	r4, r0, #3
 8007374:	f024 0403 	bic.w	r4, r4, #3
 8007378:	42a0      	cmp	r0, r4
 800737a:	d007      	beq.n	800738c <sbrk_aligned+0x38>
 800737c:	1a21      	subs	r1, r4, r0
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f87c 	bl	800747c <_sbrk_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d101      	bne.n	800738c <sbrk_aligned+0x38>
 8007388:	f04f 34ff 	mov.w	r4, #4294967295
 800738c:	4620      	mov	r0, r4
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	2000081c 	.word	0x2000081c

08007394 <_malloc_r>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	1ccd      	adds	r5, r1, #3
 800739a:	f025 0503 	bic.w	r5, r5, #3
 800739e:	3508      	adds	r5, #8
 80073a0:	2d0c      	cmp	r5, #12
 80073a2:	bf38      	it	cc
 80073a4:	250c      	movcc	r5, #12
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	4607      	mov	r7, r0
 80073aa:	db01      	blt.n	80073b0 <_malloc_r+0x1c>
 80073ac:	42a9      	cmp	r1, r5
 80073ae:	d905      	bls.n	80073bc <_malloc_r+0x28>
 80073b0:	230c      	movs	r3, #12
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	2600      	movs	r6, #0
 80073b6:	4630      	mov	r0, r6
 80073b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073bc:	4e2e      	ldr	r6, [pc, #184]	; (8007478 <_malloc_r+0xe4>)
 80073be:	f000 f86d 	bl	800749c <__malloc_lock>
 80073c2:	6833      	ldr	r3, [r6, #0]
 80073c4:	461c      	mov	r4, r3
 80073c6:	bb34      	cbnz	r4, 8007416 <_malloc_r+0x82>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	f7ff ffc2 	bl	8007354 <sbrk_aligned>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	4604      	mov	r4, r0
 80073d4:	d14d      	bne.n	8007472 <_malloc_r+0xde>
 80073d6:	6834      	ldr	r4, [r6, #0]
 80073d8:	4626      	mov	r6, r4
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d140      	bne.n	8007460 <_malloc_r+0xcc>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	4631      	mov	r1, r6
 80073e2:	4638      	mov	r0, r7
 80073e4:	eb04 0803 	add.w	r8, r4, r3
 80073e8:	f000 f848 	bl	800747c <_sbrk_r>
 80073ec:	4580      	cmp	r8, r0
 80073ee:	d13a      	bne.n	8007466 <_malloc_r+0xd2>
 80073f0:	6821      	ldr	r1, [r4, #0]
 80073f2:	3503      	adds	r5, #3
 80073f4:	1a6d      	subs	r5, r5, r1
 80073f6:	f025 0503 	bic.w	r5, r5, #3
 80073fa:	3508      	adds	r5, #8
 80073fc:	2d0c      	cmp	r5, #12
 80073fe:	bf38      	it	cc
 8007400:	250c      	movcc	r5, #12
 8007402:	4629      	mov	r1, r5
 8007404:	4638      	mov	r0, r7
 8007406:	f7ff ffa5 	bl	8007354 <sbrk_aligned>
 800740a:	3001      	adds	r0, #1
 800740c:	d02b      	beq.n	8007466 <_malloc_r+0xd2>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	442b      	add	r3, r5
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	e00e      	b.n	8007434 <_malloc_r+0xa0>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	1b52      	subs	r2, r2, r5
 800741a:	d41e      	bmi.n	800745a <_malloc_r+0xc6>
 800741c:	2a0b      	cmp	r2, #11
 800741e:	d916      	bls.n	800744e <_malloc_r+0xba>
 8007420:	1961      	adds	r1, r4, r5
 8007422:	42a3      	cmp	r3, r4
 8007424:	6025      	str	r5, [r4, #0]
 8007426:	bf18      	it	ne
 8007428:	6059      	strne	r1, [r3, #4]
 800742a:	6863      	ldr	r3, [r4, #4]
 800742c:	bf08      	it	eq
 800742e:	6031      	streq	r1, [r6, #0]
 8007430:	5162      	str	r2, [r4, r5]
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	4638      	mov	r0, r7
 8007436:	f104 060b 	add.w	r6, r4, #11
 800743a:	f000 f835 	bl	80074a8 <__malloc_unlock>
 800743e:	f026 0607 	bic.w	r6, r6, #7
 8007442:	1d23      	adds	r3, r4, #4
 8007444:	1af2      	subs	r2, r6, r3
 8007446:	d0b6      	beq.n	80073b6 <_malloc_r+0x22>
 8007448:	1b9b      	subs	r3, r3, r6
 800744a:	50a3      	str	r3, [r4, r2]
 800744c:	e7b3      	b.n	80073b6 <_malloc_r+0x22>
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	42a3      	cmp	r3, r4
 8007452:	bf0c      	ite	eq
 8007454:	6032      	streq	r2, [r6, #0]
 8007456:	605a      	strne	r2, [r3, #4]
 8007458:	e7ec      	b.n	8007434 <_malloc_r+0xa0>
 800745a:	4623      	mov	r3, r4
 800745c:	6864      	ldr	r4, [r4, #4]
 800745e:	e7b2      	b.n	80073c6 <_malloc_r+0x32>
 8007460:	4634      	mov	r4, r6
 8007462:	6876      	ldr	r6, [r6, #4]
 8007464:	e7b9      	b.n	80073da <_malloc_r+0x46>
 8007466:	230c      	movs	r3, #12
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4638      	mov	r0, r7
 800746c:	f000 f81c 	bl	80074a8 <__malloc_unlock>
 8007470:	e7a1      	b.n	80073b6 <_malloc_r+0x22>
 8007472:	6025      	str	r5, [r4, #0]
 8007474:	e7de      	b.n	8007434 <_malloc_r+0xa0>
 8007476:	bf00      	nop
 8007478:	20000818 	.word	0x20000818

0800747c <_sbrk_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_sbrk_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7f9 fbea 	bl	8000c60 <_sbrk>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_sbrk_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_sbrk_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20000820 	.word	0x20000820

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_lock+0x8>)
 800749e:	f000 b809 	b.w	80074b4 <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	20000824 	.word	0x20000824

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f000 b804 	b.w	80074b6 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	20000824 	.word	0x20000824

080074b4 <__retarget_lock_acquire_recursive>:
 80074b4:	4770      	bx	lr

080074b6 <__retarget_lock_release_recursive>:
 80074b6:	4770      	bx	lr

080074b8 <_init>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr

080074c4 <_fini>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr
