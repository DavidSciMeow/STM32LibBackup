
F401CCU6_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001924  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08001ab8  08001ab8  00011ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020d0  080020d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  080020e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080020e4  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004101  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001262  00000000  00000000  00024180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  000253e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000386  00000000  00000000  000258d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001463b  00000000  00000000  00025c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006181  00000000  00000000  0003a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e9db  00000000  00000000  00040412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011d4  00000000  00000000  000bedf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001aa0 	.word	0x08001aa0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001aa0 	.word	0x08001aa0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OLED_SPI_Init>:
#define OLED_W_DC(x)		HAL_GPIO_WritePin(LED_DC_GPIO_Port, LED_DC_Pin, (GPIO_PinState)(x))
#define OLED_W_CS(x)		HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_SPI_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	OLED_W_D0(1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <OLED_SPI_Init+0x3c>)
 80004da:	f000 fe77 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_D1(1);
 80004de:	2201      	movs	r2, #1
 80004e0:	2140      	movs	r1, #64	; 0x40
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <OLED_SPI_Init+0x3c>)
 80004e4:	f000 fe72 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_RES(1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <OLED_SPI_Init+0x3c>)
 80004ee:	f000 fe6d 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2110      	movs	r1, #16
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <OLED_SPI_Init+0x3c>)
 80004f8:	f000 fe68 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_CS(1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <OLED_SPI_Init+0x3c>)
 8000502:	f000 fe63 	bl	80011cc <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40020400 	.word	0x40020400

08000510 <OLED_SPI_SendByte>:
  * @brief  SPI发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_SPI_SendByte(uint8_t Byte)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e01b      	b.n	8000558 <OLED_SPI_SendByte+0x48>
	{
		OLED_W_D0(0);
 8000520:	2200      	movs	r2, #0
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <OLED_SPI_SendByte+0x58>)
 8000526:	f000 fe51 	bl	80011cc <HAL_GPIO_WritePin>
		OLED_W_D1(Byte & (0x80 >> i));
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	fa42 f303 	asr.w	r3, r2, r3
 8000532:	b25a      	sxtb	r2, r3
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	4013      	ands	r3, r2
 800053a:	b25b      	sxtb	r3, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <OLED_SPI_SendByte+0x58>)
 8000544:	f000 fe42 	bl	80011cc <HAL_GPIO_WritePin>
		OLED_W_D0(1);
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <OLED_SPI_SendByte+0x58>)
 800054e:	f000 fe3d 	bl	80011cc <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	3301      	adds	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b07      	cmp	r3, #7
 800055c:	d9e0      	bls.n	8000520 <OLED_SPI_SendByte+0x10>
	}
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020400 	.word	0x40020400

0800056c <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	480a      	ldr	r0, [pc, #40]	; (80005a4 <OLED_WriteCommand+0x38>)
 800057c:	f000 fe26 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_DC(0);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <OLED_WriteCommand+0x38>)
 8000586:	f000 fe21 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Command);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffbf 	bl	8000510 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 8000592:	2201      	movs	r2, #1
 8000594:	2108      	movs	r1, #8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <OLED_WriteCommand+0x38>)
 8000598:	f000 fe18 	bl	80011cc <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400

080005a8 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	OLED_W_CS(0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <OLED_WriteData+0x38>)
 80005b8:	f000 fe08 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_W_DC(1);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <OLED_WriteData+0x38>)
 80005c2:	f000 fe03 	bl	80011cc <HAL_GPIO_WritePin>
	OLED_SPI_SendByte(Data);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffa1 	bl	8000510 <OLED_SPI_SendByte>
	OLED_W_CS(1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <OLED_WriteData+0x38>)
 80005d4:	f000 fdfa 	bl	80011cc <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020400 	.word	0x40020400

080005e4 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffb5 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffac 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffa5 	bl	800056c <OLED_WriteCommand>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000630:	2300      	movs	r3, #0
 8000632:	71bb      	strb	r3, [r7, #6]
 8000634:	e014      	b.n	8000660 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffd2 	bl	80005e4 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	e005      	b.n	8000652 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ffae 	bl	80005a8 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	3301      	adds	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	daf5      	bge.n	8000646 <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	3301      	adds	r3, #1
 800065e:	71bb      	strb	r3, [r7, #6]
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2b07      	cmp	r3, #7
 8000664:	d9e7      	bls.n	8000636 <OLED_Clear+0xc>
		}
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	460b      	mov	r3, r1
 800067c:	71bb      	strb	r3, [r7, #6]
 800067e:	4613      	mov	r3, r2
 8000680:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	3b01      	subs	r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	3b01      	subs	r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	4610      	mov	r0, r2
 800069a:	f7ff ffa3 	bl	80005e4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e00e      	b.n	80006c2 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	f1a3 0220 	sub.w	r2, r3, #32
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	491c      	ldr	r1, [pc, #112]	; (8000720 <OLED_ShowChar+0xb0>)
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	440a      	add	r2, r1
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff76 	bl	80005a8 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	3301      	adds	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d9ed      	bls.n	80006a4 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f7ff ff7e 	bl	80005e4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e00f      	b.n	800070e <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	f1a3 0220 	sub.w	r2, r3, #32
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	3308      	adds	r3, #8
 80006f8:	4909      	ldr	r1, [pc, #36]	; (8000720 <OLED_ShowChar+0xb0>)
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	440a      	add	r2, r1
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff50 	bl	80005a8 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b07      	cmp	r3, #7
 8000712:	d9ec      	bls.n	80006ee <OLED_ShowChar+0x7e>
	}
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08001ac8 	.word	0x08001ac8

08000724 <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	603a      	str	r2, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	460b      	mov	r3, r1
 8000732:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e00e      	b.n	8000758 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 800073a:	79ba      	ldrb	r2, [r7, #6]
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4413      	add	r3, r2
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	4413      	add	r3, r2
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff8f 	bl	8000670 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	3301      	adds	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1ea      	bne.n	800073a <OLED_ShowString+0x16>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	e00c      	b.n	8000794 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	e002      	b.n	8000786 <OLED_Init+0x18>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078c:	d3f8      	bcc.n	8000780 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800079a:	d3ee      	bcc.n	800077a <OLED_Init+0xc>
	}
	
	OLED_SPI_Init();			//端口初始化
 800079c:	f7ff fe98 	bl	80004d0 <OLED_SPI_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80007a0:	20ae      	movs	r0, #174	; 0xae
 80007a2:	f7ff fee3 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80007a6:	20d5      	movs	r0, #213	; 0xd5
 80007a8:	f7ff fee0 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80007ac:	2080      	movs	r0, #128	; 0x80
 80007ae:	f7ff fedd 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80007b2:	20a8      	movs	r0, #168	; 0xa8
 80007b4:	f7ff feda 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80007b8:	203f      	movs	r0, #63	; 0x3f
 80007ba:	f7ff fed7 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80007be:	20d3      	movs	r0, #211	; 0xd3
 80007c0:	f7ff fed4 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed1 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80007ca:	2040      	movs	r0, #64	; 0x40
 80007cc:	f7ff fece 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80007d0:	20a1      	movs	r0, #161	; 0xa1
 80007d2:	f7ff fecb 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80007d6:	20c8      	movs	r0, #200	; 0xc8
 80007d8:	f7ff fec8 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80007dc:	20da      	movs	r0, #218	; 0xda
 80007de:	f7ff fec5 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80007e2:	2012      	movs	r0, #18
 80007e4:	f7ff fec2 	bl	800056c <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 80007e8:	2081      	movs	r0, #129	; 0x81
 80007ea:	f7ff febf 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 80007ee:	20cf      	movs	r0, #207	; 0xcf
 80007f0:	f7ff febc 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 80007f4:	20d9      	movs	r0, #217	; 0xd9
 80007f6:	f7ff feb9 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 80007fa:	20f1      	movs	r0, #241	; 0xf1
 80007fc:	f7ff feb6 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000800:	20db      	movs	r0, #219	; 0xdb
 8000802:	f7ff feb3 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000806:	2030      	movs	r0, #48	; 0x30
 8000808:	f7ff feb0 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 800080c:	20a4      	movs	r0, #164	; 0xa4
 800080e:	f7ff fead 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8000812:	20a6      	movs	r0, #166	; 0xa6
 8000814:	f7ff feaa 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000818:	208d      	movs	r0, #141	; 0x8d
 800081a:	f7ff fea7 	bl	800056c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 800081e:	2014      	movs	r0, #20
 8000820:	f7ff fea4 	bl	800056c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000824:	20af      	movs	r0, #175	; 0xaf
 8000826:	f7ff fea1 	bl	800056c <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 800082a:	f7ff fefe 	bl	800062a <OLED_Clear>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  OLED_Init();
 800083c:	f7ff ff97 	bl	800076e <OLED_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 f9cc 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f80e 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f894 	bl	8000974 <MX_GPIO_Init>
  MX_CRC_Init();
 800084c:	f000 f876 	bl	800093c <MX_CRC_Init>
  MX_USB_OTG_FS_USB_Init();
 8000850:	f000 f888 	bl	8000964 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  OLED_ShowString(1,1,"InitComplete");
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <main+0x28>)
 8000856:	2101      	movs	r1, #1
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff63 	bl	8000724 <OLED_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x26>
 8000860:	08001ab8 	.word	0x08001ab8

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f8e8 	bl	8001a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd4>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008d8:	2319      	movs	r3, #25
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fc86 	bl	8001200 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fa:	f000 f8b9 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fee8 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 f8a3 	bl	8000a70 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_CRC_Init+0x20>)
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <MX_CRC_Init+0x24>)
 8000944:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_CRC_Init+0x20>)
 8000948:	f000 fa9f 	bl	8000e8a <HAL_CRC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000952:	f000 f88d 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028
 8000960:	40023000 	.word	0x40023000

08000964 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0xf0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <MX_GPIO_Init+0xf0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_GPIO_Init+0xf0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 80009fa:	2200      	movs	r2, #0
 80009fc:	21f8      	movs	r1, #248	; 0xf8
 80009fe:	481a      	ldr	r0, [pc, #104]	; (8000a68 <MX_GPIO_Init+0xf4>)
 8000a00:	f000 fbe4 	bl	80011cc <HAL_GPIO_WritePin>
                          |LED_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a16:	230a      	movs	r3, #10
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xf8>)
 8000a22:	f000 fa4f 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0xf8>)
 8000a3c:	f000 fa42 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CS_Pin LED_DC_Pin LED_RES_Pin LED_SDA_Pin
                           LED_SCL_Pin */
  GPIO_InitStruct.Pin = LED_CS_Pin|LED_DC_Pin|LED_RES_Pin|LED_SDA_Pin
 8000a40:	23f8      	movs	r3, #248	; 0xf8
 8000a42:	617b      	str	r3, [r7, #20]
                          |LED_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0xf4>)
 8000a58:	f000 fa34 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020000 	.word	0x40020000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_CRC_MspInit+0x3c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10d      	bne.n	8000afa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_CRC_MspInit+0x40>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_CRC_MspInit+0x40>)
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_CRC_MspInit+0x40>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023000 	.word	0x40023000
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f890 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f000 ff4f 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fe3d 	bl	8000838 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080020d8 	.word	0x080020d8
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	20000034 	.word	0x20000034

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f90d 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff ff34 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f917 	bl	8000e72 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f8ed 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000030 	.word	0x20000030

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000030 	.word	0x20000030

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00e      	b.n	8000eba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	795b      	ldrb	r3, [r3, #5]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fe0d 	bl	8000acc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e159      	b.n	8001194 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8148 	bne.w	800118e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a2 	beq.w	800118e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x2f0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x202>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_GPIO_Init+0x2f4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x1fe>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a47      	ldr	r2, [pc, #284]	; (80011bc <HAL_GPIO_Init+0x2f8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1fa>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a46      	ldr	r2, [pc, #280]	; (80011c0 <HAL_GPIO_Init+0x2fc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1f6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a45      	ldr	r2, [pc, #276]	; (80011c4 <HAL_GPIO_Init+0x300>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1f2>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_GPIO_Init+0x304>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_GPIO_Init+0x304>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_GPIO_Init+0x304>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_GPIO_Init+0x304>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_GPIO_Init+0x304>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_GPIO_Init+0x304>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f aea2 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e267      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e242      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcf6 	bl	8000ca8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcf2 	bl	8000ca8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e207      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fce2 	bl	8000ca8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcde 	bl	8000ca8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1f3      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc97 	bl	8000ca8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc93 	bl	8000ca8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a8      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc76 	bl	8000ca8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc72 	bl	8000ca8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e187      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc56 	bl	8000ca8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc52 	bl	8000ca8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e167      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc3f 	bl	8000ca8 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc3b 	bl	8000ca8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e150      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbfb 	bl	8000ca8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbf7 	bl	8000ca8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e10c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fbbc 	bl	8000ca8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fbb8 	bl	8000ca8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fba6 	bl	8000ca8 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fba2 	bl	8000ca8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b5      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a1 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d141      	bne.n	8001636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb76 	bl	8000ca8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb72 	bl	8000ca8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e087      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb4b 	bl	8000ca8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb47 	bl	8000ca8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e05c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x416>
 8001634:	e054      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb34 	bl	8000ca8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb30 	bl	8000ca8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e038      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x4ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d028      	beq.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d121      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa62 	bl	8000ca8 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa5e 	bl	8000ca8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f9c2 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	080020b8 	.word	0x080020b8
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b090      	sub	sp, #64	; 0x40
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
 80018c8:	2300      	movs	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00d      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f200 80a1 	bhi.w	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ee:	e09b      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018f4:	e09b      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018fa:	e098      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d028      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	627a      	str	r2, [r7, #36]	; 0x24
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001924:	2100      	movs	r1, #0
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001928:	fb03 f201 	mul.w	r2, r3, r1
 800192c:	2300      	movs	r3, #0
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	4413      	add	r3, r2
 8001934:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001936:	fba0 1202 	umull	r1, r2, r0, r2
 800193a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800193c:	460a      	mov	r2, r1
 800193e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	4413      	add	r3, r2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	2200      	movs	r2, #0
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	61fa      	str	r2, [r7, #28]
 800194e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001956:	f7fe fc3d 	bl	80001d4 <__aeabi_uldivmod>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4613      	mov	r3, r2
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	e053      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	2200      	movs	r2, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	617a      	str	r2, [r7, #20]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001976:	f04f 0b00 	mov.w	fp, #0
 800197a:	4652      	mov	r2, sl
 800197c:	465b      	mov	r3, fp
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ebb2 080a 	subs.w	r8, r2, sl
 8001996:	eb63 090b 	sbc.w	r9, r3, fp
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ae:	ebb2 0408 	subs.w	r4, r2, r8
 80019b2:	eb63 0509 	sbc.w	r5, r3, r9
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	00eb      	lsls	r3, r5, #3
 80019c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c4:	00e2      	lsls	r2, r4, #3
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	eb14 030a 	adds.w	r3, r4, sl
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	eb45 030b 	adc.w	r3, r5, fp
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e2:	4629      	mov	r1, r5
 80019e4:	028b      	lsls	r3, r1, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019ec:	4621      	mov	r1, r4
 80019ee:	028a      	lsls	r2, r1, #10
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2200      	movs	r2, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a00:	f7fe fbe8 	bl	80001d4 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3740      	adds	r7, #64	; 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <memset>:
 8001a48:	4402      	add	r2, r0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <memset+0xa>
 8001a50:	4770      	bx	lr
 8001a52:	f803 1b01 	strb.w	r1, [r3], #1
 8001a56:	e7f9      	b.n	8001a4c <memset+0x4>

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	4d0d      	ldr	r5, [pc, #52]	; (8001a90 <__libc_init_array+0x38>)
 8001a5c:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a5e:	1b64      	subs	r4, r4, r5
 8001a60:	10a4      	asrs	r4, r4, #2
 8001a62:	2600      	movs	r6, #0
 8001a64:	42a6      	cmp	r6, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	4d0b      	ldr	r5, [pc, #44]	; (8001a98 <__libc_init_array+0x40>)
 8001a6a:	4c0c      	ldr	r4, [pc, #48]	; (8001a9c <__libc_init_array+0x44>)
 8001a6c:	f000 f818 	bl	8001aa0 <_init>
 8001a70:	1b64      	subs	r4, r4, r5
 8001a72:	10a4      	asrs	r4, r4, #2
 8001a74:	2600      	movs	r6, #0
 8001a76:	42a6      	cmp	r6, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a80:	4798      	blx	r3
 8001a82:	3601      	adds	r6, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8a:	4798      	blx	r3
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	080020d0 	.word	0x080020d0
 8001a94:	080020d0 	.word	0x080020d0
 8001a98:	080020d0 	.word	0x080020d0
 8001a9c:	080020d4 	.word	0x080020d4

08001aa0 <_init>:
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa2:	bf00      	nop
 8001aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa6:	bc08      	pop	{r3}
 8001aa8:	469e      	mov	lr, r3
 8001aaa:	4770      	bx	lr

08001aac <_fini>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	bf00      	nop
 8001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab2:	bc08      	pop	{r3}
 8001ab4:	469e      	mov	lr, r3
 8001ab6:	4770      	bx	lr
